/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AgreementsCreateNewAgreementRequest;
import com.konfigthis.client.model.AgreementsCreateNewAgreementResponse;
import com.konfigthis.client.model.AgreementsDeleteAgreementResponse;
import com.konfigthis.client.model.AgreementsGetAgreementResponse;
import com.konfigthis.client.model.AgreementsListResponse;
import com.konfigthis.client.model.AgreementsUpdateAgreementRequest;
import com.konfigthis.client.model.AgreementsUpdateAgreementResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AgreementsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AgreementsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AgreementsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewAgreementCall(AgreementsCreateNewAgreementRequest agreementsCreateNewAgreementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = agreementsCreateNewAgreementRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/agreements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAgreementValidateBeforeCall(AgreementsCreateNewAgreementRequest agreementsCreateNewAgreementRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agreementsCreateNewAgreementRequest' is set
        if (agreementsCreateNewAgreementRequest == null) {
            throw new ApiException("Missing the required parameter 'agreementsCreateNewAgreementRequest' when calling createNewAgreement(Async)");
        }

        return createNewAgreementCall(agreementsCreateNewAgreementRequest, _callback);

    }


    private ApiResponse<AgreementsCreateNewAgreementResponse> createNewAgreementWithHttpInfo(AgreementsCreateNewAgreementRequest agreementsCreateNewAgreementRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewAgreementValidateBeforeCall(agreementsCreateNewAgreementRequest, null);
        Type localVarReturnType = new TypeToken<AgreementsCreateNewAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAgreementAsync(AgreementsCreateNewAgreementRequest agreementsCreateNewAgreementRequest, final ApiCallback<AgreementsCreateNewAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAgreementValidateBeforeCall(agreementsCreateNewAgreementRequest, _callback);
        Type localVarReturnType = new TypeToken<AgreementsCreateNewAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAgreementRequestBuilder {
        private final String name;
        private final String code;
        private final String color;
        private final Double annualHours;

        private CreateNewAgreementRequestBuilder(String name, String code, String color, double annualHours) {
            this.name = name;
            this.code = code;
            this.color = color;
            this.annualHours = annualHours;
        }

        /**
         * Build call for createNewAgreement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AgreementsCreateNewAgreementRequest agreementsCreateNewAgreementRequest = buildBodyParams();
            return createNewAgreementCall(agreementsCreateNewAgreementRequest, _callback);
        }

        private AgreementsCreateNewAgreementRequest buildBodyParams() {
            AgreementsCreateNewAgreementRequest agreementsCreateNewAgreementRequest = new AgreementsCreateNewAgreementRequest();
            agreementsCreateNewAgreementRequest.name(this.name);
            agreementsCreateNewAgreementRequest.code(this.code);
            agreementsCreateNewAgreementRequest.color(this.color);
            agreementsCreateNewAgreementRequest.annualHours(this.annualHours);
            return agreementsCreateNewAgreementRequest;
        }

        /**
         * Execute createNewAgreement request
         * @return AgreementsCreateNewAgreementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement created </td><td>  -  </td></tr>
         </table>
         */
        public AgreementsCreateNewAgreementResponse execute() throws ApiException {
            AgreementsCreateNewAgreementRequest agreementsCreateNewAgreementRequest = buildBodyParams();
            ApiResponse<AgreementsCreateNewAgreementResponse> localVarResp = createNewAgreementWithHttpInfo(agreementsCreateNewAgreementRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAgreement request with HTTP info returned
         * @return ApiResponse&lt;AgreementsCreateNewAgreementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AgreementsCreateNewAgreementResponse> executeWithHttpInfo() throws ApiException {
            AgreementsCreateNewAgreementRequest agreementsCreateNewAgreementRequest = buildBodyParams();
            return createNewAgreementWithHttpInfo(agreementsCreateNewAgreementRequest);
        }

        /**
         * Execute createNewAgreement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AgreementsCreateNewAgreementResponse> _callback) throws ApiException {
            AgreementsCreateNewAgreementRequest agreementsCreateNewAgreementRequest = buildBodyParams();
            return createNewAgreementAsync(agreementsCreateNewAgreementRequest, _callback);
        }
    }

    /**
     * Create an agreement
     * Create an agreement
     * @param agreementsCreateNewAgreementRequest Data to create an agreement (required)
     * @return CreateNewAgreementRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Agreement created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAgreementRequestBuilder createNewAgreement(String name, String code, String color, double annualHours) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        if (color == null) throw new IllegalArgumentException("\"color\" is required but got null");
            

        
        return new CreateNewAgreementRequestBuilder(name, code, color, annualHours);
    }
    private okhttp3.Call deleteAgreementCall(UUID agreementId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/agreements/{agreementId}"
            .replace("{" + "agreementId" + "}", localVarApiClient.escapeString(agreementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAgreementValidateBeforeCall(UUID agreementId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agreementId' is set
        if (agreementId == null) {
            throw new ApiException("Missing the required parameter 'agreementId' when calling deleteAgreement(Async)");
        }

        return deleteAgreementCall(agreementId, _callback);

    }


    private ApiResponse<AgreementsDeleteAgreementResponse> deleteAgreementWithHttpInfo(UUID agreementId) throws ApiException {
        okhttp3.Call localVarCall = deleteAgreementValidateBeforeCall(agreementId, null);
        Type localVarReturnType = new TypeToken<AgreementsDeleteAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAgreementAsync(UUID agreementId, final ApiCallback<AgreementsDeleteAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAgreementValidateBeforeCall(agreementId, _callback);
        Type localVarReturnType = new TypeToken<AgreementsDeleteAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteAgreementRequestBuilder {
        private final UUID agreementId;

        private DeleteAgreementRequestBuilder(UUID agreementId) {
            this.agreementId = agreementId;
        }

        /**
         * Build call for deleteAgreement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAgreementCall(agreementId, _callback);
        }


        /**
         * Execute deleteAgreement request
         * @return AgreementsDeleteAgreementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement deleted </td><td>  -  </td></tr>
         </table>
         */
        public AgreementsDeleteAgreementResponse execute() throws ApiException {
            ApiResponse<AgreementsDeleteAgreementResponse> localVarResp = deleteAgreementWithHttpInfo(agreementId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteAgreement request with HTTP info returned
         * @return ApiResponse&lt;AgreementsDeleteAgreementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AgreementsDeleteAgreementResponse> executeWithHttpInfo() throws ApiException {
            return deleteAgreementWithHttpInfo(agreementId);
        }

        /**
         * Execute deleteAgreement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AgreementsDeleteAgreementResponse> _callback) throws ApiException {
            return deleteAgreementAsync(agreementId, _callback);
        }
    }

    /**
     * Delete agreement
     * 
     * @param agreementId Agreement UUID (required)
     * @return DeleteAgreementRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Agreement deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAgreementRequestBuilder deleteAgreement(UUID agreementId) throws IllegalArgumentException {
        if (agreementId == null) throw new IllegalArgumentException("\"agreementId\" is required but got null");
            

        return new DeleteAgreementRequestBuilder(agreementId);
    }
    private okhttp3.Call getAgreementCall(UUID agreementId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/agreements/{agreementId}"
            .replace("{" + "agreementId" + "}", localVarApiClient.escapeString(agreementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAgreementValidateBeforeCall(UUID agreementId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agreementId' is set
        if (agreementId == null) {
            throw new ApiException("Missing the required parameter 'agreementId' when calling getAgreement(Async)");
        }

        return getAgreementCall(agreementId, limit, page, _callback);

    }


    private ApiResponse<AgreementsGetAgreementResponse> getAgreementWithHttpInfo(UUID agreementId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getAgreementValidateBeforeCall(agreementId, limit, page, null);
        Type localVarReturnType = new TypeToken<AgreementsGetAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAgreementAsync(UUID agreementId, Integer limit, Integer page, final ApiCallback<AgreementsGetAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAgreementValidateBeforeCall(agreementId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<AgreementsGetAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAgreementRequestBuilder {
        private final UUID agreementId;
        private Integer limit;
        private Integer page;

        private GetAgreementRequestBuilder(UUID agreementId) {
            this.agreementId = agreementId;
        }

        /**
         * Set limit
         * @param limit Limit results (optional)
         * @return GetAgreementRequestBuilder
         */
        public GetAgreementRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return GetAgreementRequestBuilder
         */
        public GetAgreementRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getAgreement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get agreement </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAgreementCall(agreementId, limit, page, _callback);
        }


        /**
         * Execute getAgreement request
         * @return AgreementsGetAgreementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get agreement </td><td>  -  </td></tr>
         </table>
         */
        public AgreementsGetAgreementResponse execute() throws ApiException {
            ApiResponse<AgreementsGetAgreementResponse> localVarResp = getAgreementWithHttpInfo(agreementId, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAgreement request with HTTP info returned
         * @return ApiResponse&lt;AgreementsGetAgreementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get agreement </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AgreementsGetAgreementResponse> executeWithHttpInfo() throws ApiException {
            return getAgreementWithHttpInfo(agreementId, limit, page);
        }

        /**
         * Execute getAgreement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get agreement </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AgreementsGetAgreementResponse> _callback) throws ApiException {
            return getAgreementAsync(agreementId, limit, page, _callback);
        }
    }

    /**
     * Get agreement
     * 
     * @param agreementId Agreement UUID (required)
     * @return GetAgreementRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get agreement </td><td>  -  </td></tr>
     </table>
     */
    public GetAgreementRequestBuilder getAgreement(UUID agreementId) throws IllegalArgumentException {
        if (agreementId == null) throw new IllegalArgumentException("\"agreementId\" is required but got null");
            

        return new GetAgreementRequestBuilder(agreementId);
    }
    private okhttp3.Call listCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/agreements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        return listCall(limit, page, _callback);

    }


    private ApiResponse<AgreementsListResponse> listWithHttpInfo(Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(limit, page, null);
        Type localVarReturnType = new TypeToken<AgreementsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer limit, Integer page, final ApiCallback<AgreementsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(limit, page, _callback);
        Type localVarReturnType = new TypeToken<AgreementsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Integer limit;
        private Integer page;

        private ListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Limit results (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of agreements </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(limit, page, _callback);
        }


        /**
         * Execute list request
         * @return AgreementsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of agreements </td><td>  -  </td></tr>
         </table>
         */
        public AgreementsListResponse execute() throws ApiException {
            ApiResponse<AgreementsListResponse> localVarResp = listWithHttpInfo(limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;AgreementsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of agreements </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AgreementsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(limit, page);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of agreements </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AgreementsListResponse> _callback) throws ApiException {
            return listAsync(limit, page, _callback);
        }
    }

    /**
     * List agreements
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of agreements </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateAgreementCall(UUID agreementId, AgreementsUpdateAgreementRequest agreementsUpdateAgreementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = agreementsUpdateAgreementRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/agreements/{agreementId}"
            .replace("{" + "agreementId" + "}", localVarApiClient.escapeString(agreementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAgreementValidateBeforeCall(UUID agreementId, AgreementsUpdateAgreementRequest agreementsUpdateAgreementRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agreementId' is set
        if (agreementId == null) {
            throw new ApiException("Missing the required parameter 'agreementId' when calling updateAgreement(Async)");
        }

        // verify the required parameter 'agreementsUpdateAgreementRequest' is set
        if (agreementsUpdateAgreementRequest == null) {
            throw new ApiException("Missing the required parameter 'agreementsUpdateAgreementRequest' when calling updateAgreement(Async)");
        }

        return updateAgreementCall(agreementId, agreementsUpdateAgreementRequest, _callback);

    }


    private ApiResponse<AgreementsUpdateAgreementResponse> updateAgreementWithHttpInfo(UUID agreementId, AgreementsUpdateAgreementRequest agreementsUpdateAgreementRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAgreementValidateBeforeCall(agreementId, agreementsUpdateAgreementRequest, null);
        Type localVarReturnType = new TypeToken<AgreementsUpdateAgreementResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAgreementAsync(UUID agreementId, AgreementsUpdateAgreementRequest agreementsUpdateAgreementRequest, final ApiCallback<AgreementsUpdateAgreementResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAgreementValidateBeforeCall(agreementId, agreementsUpdateAgreementRequest, _callback);
        Type localVarReturnType = new TypeToken<AgreementsUpdateAgreementResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAgreementRequestBuilder {
        private final String name;
        private final String code;
        private final String color;
        private final Double annualHours;
        private final UUID agreementId;

        private UpdateAgreementRequestBuilder(String name, String code, String color, double annualHours, UUID agreementId) {
            this.name = name;
            this.code = code;
            this.color = color;
            this.annualHours = annualHours;
            this.agreementId = agreementId;
        }

        /**
         * Build call for updateAgreement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AgreementsUpdateAgreementRequest agreementsUpdateAgreementRequest = buildBodyParams();
            return updateAgreementCall(agreementId, agreementsUpdateAgreementRequest, _callback);
        }

        private AgreementsUpdateAgreementRequest buildBodyParams() {
            AgreementsUpdateAgreementRequest agreementsUpdateAgreementRequest = new AgreementsUpdateAgreementRequest();
            agreementsUpdateAgreementRequest.name(this.name);
            agreementsUpdateAgreementRequest.code(this.code);
            agreementsUpdateAgreementRequest.color(this.color);
            agreementsUpdateAgreementRequest.annualHours(this.annualHours);
            return agreementsUpdateAgreementRequest;
        }

        /**
         * Execute updateAgreement request
         * @return AgreementsUpdateAgreementResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement updated </td><td>  -  </td></tr>
         </table>
         */
        public AgreementsUpdateAgreementResponse execute() throws ApiException {
            AgreementsUpdateAgreementRequest agreementsUpdateAgreementRequest = buildBodyParams();
            ApiResponse<AgreementsUpdateAgreementResponse> localVarResp = updateAgreementWithHttpInfo(agreementId, agreementsUpdateAgreementRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAgreement request with HTTP info returned
         * @return ApiResponse&lt;AgreementsUpdateAgreementResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AgreementsUpdateAgreementResponse> executeWithHttpInfo() throws ApiException {
            AgreementsUpdateAgreementRequest agreementsUpdateAgreementRequest = buildBodyParams();
            return updateAgreementWithHttpInfo(agreementId, agreementsUpdateAgreementRequest);
        }

        /**
         * Execute updateAgreement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Agreement updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AgreementsUpdateAgreementResponse> _callback) throws ApiException {
            AgreementsUpdateAgreementRequest agreementsUpdateAgreementRequest = buildBodyParams();
            return updateAgreementAsync(agreementId, agreementsUpdateAgreementRequest, _callback);
        }
    }

    /**
     * Update an agreement
     * Update an agreement
     * @param agreementId Agreement UUID (required)
     * @param agreementsUpdateAgreementRequest Data to update an agreement (required)
     * @return UpdateAgreementRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Agreement updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAgreementRequestBuilder updateAgreement(String name, String code, String color, double annualHours, UUID agreementId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        if (color == null) throw new IllegalArgumentException("\"color\" is required but got null");
            

        
        if (agreementId == null) throw new IllegalArgumentException("\"agreementId\" is required but got null");
            

        return new UpdateAgreementRequestBuilder(name, code, color, annualHours, agreementId);
    }
}
