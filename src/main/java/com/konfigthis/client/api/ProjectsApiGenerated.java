/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.ProjectsCreateProjectRequest;
import com.konfigthis.client.model.ProjectsCreateProjectResponse;
import com.konfigthis.client.model.ProjectsListResponse;
import com.konfigthis.client.model.ProjectsRemoveByIdResponse;
import com.konfigthis.client.model.ProjectsUpdateProjectByIdRequest;
import com.konfigthis.client.model.ProjectsUpdateProjectByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createProjectCall(ProjectsCreateProjectRequest projectsCreateProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsCreateProjectRequest;

        // create path and map variables
        String localVarPath = "/project/v1/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectValidateBeforeCall(ProjectsCreateProjectRequest projectsCreateProjectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectsCreateProjectRequest' is set
        if (projectsCreateProjectRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsCreateProjectRequest' when calling createProject(Async)");
        }

        return createProjectCall(projectsCreateProjectRequest, _callback);

    }


    private ApiResponse<ProjectsCreateProjectResponse> createProjectWithHttpInfo(ProjectsCreateProjectRequest projectsCreateProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectValidateBeforeCall(projectsCreateProjectRequest, null);
        Type localVarReturnType = new TypeToken<ProjectsCreateProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createProjectAsync(ProjectsCreateProjectRequest projectsCreateProjectRequest, final ApiCallback<ProjectsCreateProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectValidateBeforeCall(projectsCreateProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectsCreateProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateProjectRequestBuilder {
        private final UUID companyId;
        private final String name;
        private String description;
        private UUID parentProjectId;
        private UUID customerId;
        private Float price;
        private LocalDate startDate;
        private LocalDate endDate;
        private UUID managerId;
        private String status;

        private CreateProjectRequestBuilder(UUID companyId, String name) {
            this.companyId = companyId;
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the project (optional)
         * @return CreateProjectRequestBuilder
         */
        public CreateProjectRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set parentProjectId
         * @param parentProjectId The id of the parent project (optional)
         * @return CreateProjectRequestBuilder
         */
        public CreateProjectRequestBuilder parentProjectId(UUID parentProjectId) {
            this.parentProjectId = parentProjectId;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId The id of the customer (optional)
         * @return CreateProjectRequestBuilder
         */
        public CreateProjectRequestBuilder customerId(UUID customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set price
         * @param price The price of the project (optional)
         * @return CreateProjectRequestBuilder
         */
        public CreateProjectRequestBuilder price(Float price) {
            this.price = price;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The start date of the project (optional)
         * @return CreateProjectRequestBuilder
         */
        public CreateProjectRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The end date of the project (optional)
         * @return CreateProjectRequestBuilder
         */
        public CreateProjectRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set managerId
         * @param managerId The id of the employee manager (optional)
         * @return CreateProjectRequestBuilder
         */
        public CreateProjectRequestBuilder managerId(UUID managerId) {
            this.managerId = managerId;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of the project (optional)
         * @return CreateProjectRequestBuilder
         */
        public CreateProjectRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for createProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsCreateProjectRequest projectsCreateProjectRequest = buildBodyParams();
            return createProjectCall(projectsCreateProjectRequest, _callback);
        }

        private ProjectsCreateProjectRequest buildBodyParams() {
            ProjectsCreateProjectRequest projectsCreateProjectRequest = new ProjectsCreateProjectRequest();
            projectsCreateProjectRequest.description(this.description);
            projectsCreateProjectRequest.companyId(this.companyId);
            projectsCreateProjectRequest.name(this.name);
            projectsCreateProjectRequest.parentProjectId(this.parentProjectId);
            projectsCreateProjectRequest.customerId(this.customerId);
            projectsCreateProjectRequest.price(this.price);
            projectsCreateProjectRequest.startDate(this.startDate);
            projectsCreateProjectRequest.endDate(this.endDate);
            projectsCreateProjectRequest.managerId(this.managerId);
            if (this.status != null)
            projectsCreateProjectRequest.status(ProjectsCreateProjectRequest.StatusEnum.fromValue(this.status));
            return projectsCreateProjectRequest;
        }

        /**
         * Execute createProject request
         * @return ProjectsCreateProjectResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsCreateProjectResponse execute() throws ApiException {
            ProjectsCreateProjectRequest projectsCreateProjectRequest = buildBodyParams();
            ApiResponse<ProjectsCreateProjectResponse> localVarResp = createProjectWithHttpInfo(projectsCreateProjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createProject request with HTTP info returned
         * @return ApiResponse&lt;ProjectsCreateProjectResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsCreateProjectResponse> executeWithHttpInfo() throws ApiException {
            ProjectsCreateProjectRequest projectsCreateProjectRequest = buildBodyParams();
            return createProjectWithHttpInfo(projectsCreateProjectRequest);
        }

        /**
         * Execute createProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsCreateProjectResponse> _callback) throws ApiException {
            ProjectsCreateProjectRequest projectsCreateProjectRequest = buildBodyParams();
            return createProjectAsync(projectsCreateProjectRequest, _callback);
        }
    }

    /**
     * Create a project
     * 
     * @param projectsCreateProjectRequest Project object that needs to be updated (required)
     * @return CreateProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateProjectRequestBuilder createProject(UUID companyId, String name) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateProjectRequestBuilder(companyId, name);
    }
    private okhttp3.Call listCall(UUID id, Integer page, Integer limit, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/v1/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(UUID id, Integer page, Integer limit, String orderBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling list(Async)");
        }

        return listCall(id, page, limit, orderBy, _callback);

    }


    private ApiResponse<ProjectsListResponse> listWithHttpInfo(UUID id, Integer page, Integer limit, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(id, page, limit, orderBy, null);
        Type localVarReturnType = new TypeToken<ProjectsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(UUID id, Integer page, Integer limit, String orderBy, final ApiCallback<ProjectsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(id, page, limit, orderBy, _callback);
        Type localVarReturnType = new TypeToken<ProjectsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final UUID id;
        private Integer page;
        private Integer limit;
        private String orderBy;

        private ListRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit results (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy field1 asc, field2 desc (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(id, page, limit, orderBy, _callback);
        }


        /**
         * Execute list request
         * @return ProjectsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsListResponse execute() throws ApiException {
            ApiResponse<ProjectsListResponse> localVarResp = listWithHttpInfo(id, page, limit, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;ProjectsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(id, page, limit, orderBy);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsListResponse> _callback) throws ApiException {
            return listAsync(id, page, limit, orderBy, _callback);
        }
    }

    /**
     * List projects
     * 
     * @param id Company ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListRequestBuilder(id);
    }
    private okhttp3.Call removeByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/v1/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeById(Async)");
        }

        return removeByIdCall(id, _callback);

    }


    private ApiResponse<ProjectsRemoveByIdResponse> removeByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProjectsRemoveByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeByIdAsync(UUID id, final ApiCallback<ProjectsRemoveByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProjectsRemoveByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final UUID id;

        private RemoveByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(id, _callback);
        }


        /**
         * Execute removeById request
         * @return ProjectsRemoveByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsRemoveByIdResponse execute() throws ApiException {
            ApiResponse<ProjectsRemoveByIdResponse> localVarResp = removeByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;ProjectsRemoveByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsRemoveByIdResponse> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(id);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsRemoveByIdResponse> _callback) throws ApiException {
            return removeByIdAsync(id, _callback);
        }
    }

    /**
     * Delete a project
     * 
     * @param id Project ID (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveByIdRequestBuilder(id);
    }
    private okhttp3.Call updateProjectByIdCall(UUID id, ProjectsUpdateProjectByIdRequest projectsUpdateProjectByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsUpdateProjectByIdRequest;

        // create path and map variables
        String localVarPath = "/project/v1/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectByIdValidateBeforeCall(UUID id, ProjectsUpdateProjectByIdRequest projectsUpdateProjectByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProjectById(Async)");
        }

        // verify the required parameter 'projectsUpdateProjectByIdRequest' is set
        if (projectsUpdateProjectByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'projectsUpdateProjectByIdRequest' when calling updateProjectById(Async)");
        }

        return updateProjectByIdCall(id, projectsUpdateProjectByIdRequest, _callback);

    }


    private ApiResponse<ProjectsUpdateProjectByIdResponse> updateProjectByIdWithHttpInfo(UUID id, ProjectsUpdateProjectByIdRequest projectsUpdateProjectByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProjectByIdValidateBeforeCall(id, projectsUpdateProjectByIdRequest, null);
        Type localVarReturnType = new TypeToken<ProjectsUpdateProjectByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProjectByIdAsync(UUID id, ProjectsUpdateProjectByIdRequest projectsUpdateProjectByIdRequest, final ApiCallback<ProjectsUpdateProjectByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectByIdValidateBeforeCall(id, projectsUpdateProjectByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectsUpdateProjectByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProjectByIdRequestBuilder {
        private final String name;
        private final UUID id;
        private String description;
        private UUID parentProjectId;
        private UUID customerId;
        private Float price;
        private LocalDate startDate;
        private LocalDate endDate;
        private UUID managerId;
        private String status;

        private UpdateProjectByIdRequestBuilder(String name, UUID id) {
            this.name = name;
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the project (optional)
         * @return UpdateProjectByIdRequestBuilder
         */
        public UpdateProjectByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set parentProjectId
         * @param parentProjectId The id of the parent project (optional)
         * @return UpdateProjectByIdRequestBuilder
         */
        public UpdateProjectByIdRequestBuilder parentProjectId(UUID parentProjectId) {
            this.parentProjectId = parentProjectId;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId The id of the customer (optional)
         * @return UpdateProjectByIdRequestBuilder
         */
        public UpdateProjectByIdRequestBuilder customerId(UUID customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set price
         * @param price The price of the project (optional)
         * @return UpdateProjectByIdRequestBuilder
         */
        public UpdateProjectByIdRequestBuilder price(Float price) {
            this.price = price;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The start date of the project (optional)
         * @return UpdateProjectByIdRequestBuilder
         */
        public UpdateProjectByIdRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The end date of the project (optional)
         * @return UpdateProjectByIdRequestBuilder
         */
        public UpdateProjectByIdRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set managerId
         * @param managerId The id of the employee manager (optional)
         * @return UpdateProjectByIdRequestBuilder
         */
        public UpdateProjectByIdRequestBuilder managerId(UUID managerId) {
            this.managerId = managerId;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of the project (optional)
         * @return UpdateProjectByIdRequestBuilder
         */
        public UpdateProjectByIdRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updateProjectById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsUpdateProjectByIdRequest projectsUpdateProjectByIdRequest = buildBodyParams();
            return updateProjectByIdCall(id, projectsUpdateProjectByIdRequest, _callback);
        }

        private ProjectsUpdateProjectByIdRequest buildBodyParams() {
            ProjectsUpdateProjectByIdRequest projectsUpdateProjectByIdRequest = new ProjectsUpdateProjectByIdRequest();
            projectsUpdateProjectByIdRequest.description(this.description);
            projectsUpdateProjectByIdRequest.name(this.name);
            projectsUpdateProjectByIdRequest.parentProjectId(this.parentProjectId);
            projectsUpdateProjectByIdRequest.customerId(this.customerId);
            projectsUpdateProjectByIdRequest.price(this.price);
            projectsUpdateProjectByIdRequest.startDate(this.startDate);
            projectsUpdateProjectByIdRequest.endDate(this.endDate);
            projectsUpdateProjectByIdRequest.managerId(this.managerId);
            if (this.status != null)
            projectsUpdateProjectByIdRequest.status(ProjectsUpdateProjectByIdRequest.StatusEnum.fromValue(this.status));
            return projectsUpdateProjectByIdRequest;
        }

        /**
         * Execute updateProjectById request
         * @return ProjectsUpdateProjectByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsUpdateProjectByIdResponse execute() throws ApiException {
            ProjectsUpdateProjectByIdRequest projectsUpdateProjectByIdRequest = buildBodyParams();
            ApiResponse<ProjectsUpdateProjectByIdResponse> localVarResp = updateProjectByIdWithHttpInfo(id, projectsUpdateProjectByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProjectById request with HTTP info returned
         * @return ApiResponse&lt;ProjectsUpdateProjectByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsUpdateProjectByIdResponse> executeWithHttpInfo() throws ApiException {
            ProjectsUpdateProjectByIdRequest projectsUpdateProjectByIdRequest = buildBodyParams();
            return updateProjectByIdWithHttpInfo(id, projectsUpdateProjectByIdRequest);
        }

        /**
         * Execute updateProjectById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsUpdateProjectByIdResponse> _callback) throws ApiException {
            ProjectsUpdateProjectByIdRequest projectsUpdateProjectByIdRequest = buildBodyParams();
            return updateProjectByIdAsync(id, projectsUpdateProjectByIdRequest, _callback);
        }
    }

    /**
     * Update a project
     * 
     * @param id Project ID (required)
     * @param projectsUpdateProjectByIdRequest Department object that needs to be updated (required)
     * @return UpdateProjectByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProjectByIdRequestBuilder updateProjectById(String name, UUID id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateProjectByIdRequestBuilder(name, id);
    }
}
