/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest;
import com.konfigthis.client.model.EmployeeDepartmentAssignationsAssignDepartmentToEmployeeResponse;
import com.konfigthis.client.model.EmployeeDepartmentAssignationsListResponse;
import com.konfigthis.client.model.EmployeeDepartmentAssignationsUnassignRequest;
import com.konfigthis.client.model.EmployeeDepartmentAssignationsUnassignResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeDepartmentAssignationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeDepartmentAssignationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeDepartmentAssignationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignDepartmentToEmployeeCall(EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest;

        // create path and map variables
        String localVarPath = "/core/v3/employee-department-assignations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignDepartmentToEmployeeValidateBeforeCall(EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest' is set
        if (employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest == null) {
            throw new ApiException("Missing the required parameter 'employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest' when calling assignDepartmentToEmployee(Async)");
        }

        return assignDepartmentToEmployeeCall(employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest, _callback);

    }


    private ApiResponse<EmployeeDepartmentAssignationsAssignDepartmentToEmployeeResponse> assignDepartmentToEmployeeWithHttpInfo(EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = assignDepartmentToEmployeeValidateBeforeCall(employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeDepartmentAssignationsAssignDepartmentToEmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignDepartmentToEmployeeAsync(EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest, final ApiCallback<EmployeeDepartmentAssignationsAssignDepartmentToEmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignDepartmentToEmployeeValidateBeforeCall(employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeDepartmentAssignationsAssignDepartmentToEmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignDepartmentToEmployeeRequestBuilder {
        private final UUID employeeId;
        private final UUID departmentId;

        private AssignDepartmentToEmployeeRequestBuilder(UUID employeeId, UUID departmentId) {
            this.employeeId = employeeId;
            this.departmentId = departmentId;
        }

        /**
         * Build call for assignDepartmentToEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest = buildBodyParams();
            return assignDepartmentToEmployeeCall(employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest, _callback);
        }

        private EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest buildBodyParams() {
            EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest = new EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest();
            employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest.employeeId(this.employeeId);
            employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest.departmentId(this.departmentId);
            return employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest;
        }

        /**
         * Execute assignDepartmentToEmployee request
         * @return EmployeeDepartmentAssignationsAssignDepartmentToEmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeDepartmentAssignationsAssignDepartmentToEmployeeResponse execute() throws ApiException {
            EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest = buildBodyParams();
            ApiResponse<EmployeeDepartmentAssignationsAssignDepartmentToEmployeeResponse> localVarResp = assignDepartmentToEmployeeWithHttpInfo(employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignDepartmentToEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeeDepartmentAssignationsAssignDepartmentToEmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeDepartmentAssignationsAssignDepartmentToEmployeeResponse> executeWithHttpInfo() throws ApiException {
            EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest = buildBodyParams();
            return assignDepartmentToEmployeeWithHttpInfo(employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest);
        }

        /**
         * Execute assignDepartmentToEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeDepartmentAssignationsAssignDepartmentToEmployeeResponse> _callback) throws ApiException {
            EmployeeDepartmentAssignationsAssignDepartmentToEmployeeRequest employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest = buildBodyParams();
            return assignDepartmentToEmployeeAsync(employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest, _callback);
        }
    }

    /**
     * Assign an employee to a department
     * 
     * @param employeeDepartmentAssignationsAssignDepartmentToEmployeeRequest Employee object needs to be assigned to Department object (required)
     * @return AssignDepartmentToEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public AssignDepartmentToEmployeeRequestBuilder assignDepartmentToEmployee(UUID employeeId, UUID departmentId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (departmentId == null) throw new IllegalArgumentException("\"departmentId\" is required but got null");
            

        return new AssignDepartmentToEmployeeRequestBuilder(employeeId, departmentId);
    }
    private okhttp3.Call listCall(UUID employeeId, UUID departmentId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v3/employee-department-assignations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (departmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departmentId", departmentId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(UUID employeeId, UUID departmentId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        return listCall(employeeId, departmentId, limit, page, _callback);

    }


    private ApiResponse<EmployeeDepartmentAssignationsListResponse> listWithHttpInfo(UUID employeeId, UUID departmentId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, departmentId, limit, page, null);
        Type localVarReturnType = new TypeToken<EmployeeDepartmentAssignationsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(UUID employeeId, UUID departmentId, Integer limit, Integer page, final ApiCallback<EmployeeDepartmentAssignationsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, departmentId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<EmployeeDepartmentAssignationsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private UUID employeeId;
        private UUID departmentId;
        private Integer limit;
        private Integer page;

        private ListRequestBuilder() {
        }

        /**
         * Set employeeId
         * @param employeeId Find Assignation by employeeId (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder employeeId(UUID employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Find Assignation by departmentId (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder departmentId(UUID departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit assignations (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(employeeId, departmentId, limit, page, _callback);
        }


        /**
         * Execute list request
         * @return EmployeeDepartmentAssignationsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeDepartmentAssignationsListResponse execute() throws ApiException {
            ApiResponse<EmployeeDepartmentAssignationsListResponse> localVarResp = listWithHttpInfo(employeeId, departmentId, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;EmployeeDepartmentAssignationsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeDepartmentAssignationsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(employeeId, departmentId, limit, page);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeDepartmentAssignationsListResponse> _callback) throws ApiException {
            return listAsync(employeeId, departmentId, limit, page, _callback);
        }
    }

    /**
     * List employee department assignation
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call unassignCall(EmployeeDepartmentAssignationsUnassignRequest employeeDepartmentAssignationsUnassignRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeDepartmentAssignationsUnassignRequest;

        // create path and map variables
        String localVarPath = "/core/v3/employee-department-assignations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignValidateBeforeCall(EmployeeDepartmentAssignationsUnassignRequest employeeDepartmentAssignationsUnassignRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeDepartmentAssignationsUnassignRequest' is set
        if (employeeDepartmentAssignationsUnassignRequest == null) {
            throw new ApiException("Missing the required parameter 'employeeDepartmentAssignationsUnassignRequest' when calling unassign(Async)");
        }

        return unassignCall(employeeDepartmentAssignationsUnassignRequest, _callback);

    }


    private ApiResponse<EmployeeDepartmentAssignationsUnassignResponse> unassignWithHttpInfo(EmployeeDepartmentAssignationsUnassignRequest employeeDepartmentAssignationsUnassignRequest) throws ApiException {
        okhttp3.Call localVarCall = unassignValidateBeforeCall(employeeDepartmentAssignationsUnassignRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeDepartmentAssignationsUnassignResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unassignAsync(EmployeeDepartmentAssignationsUnassignRequest employeeDepartmentAssignationsUnassignRequest, final ApiCallback<EmployeeDepartmentAssignationsUnassignResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignValidateBeforeCall(employeeDepartmentAssignationsUnassignRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeDepartmentAssignationsUnassignResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnassignRequestBuilder {
        private final UUID employeeId;
        private final UUID departmentId;

        private UnassignRequestBuilder(UUID employeeId, UUID departmentId) {
            this.employeeId = employeeId;
            this.departmentId = departmentId;
        }

        /**
         * Build call for unassign
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeDepartmentAssignationsUnassignRequest employeeDepartmentAssignationsUnassignRequest = buildBodyParams();
            return unassignCall(employeeDepartmentAssignationsUnassignRequest, _callback);
        }

        private EmployeeDepartmentAssignationsUnassignRequest buildBodyParams() {
            EmployeeDepartmentAssignationsUnassignRequest employeeDepartmentAssignationsUnassignRequest = new EmployeeDepartmentAssignationsUnassignRequest();
            employeeDepartmentAssignationsUnassignRequest.employeeId(this.employeeId);
            employeeDepartmentAssignationsUnassignRequest.departmentId(this.departmentId);
            return employeeDepartmentAssignationsUnassignRequest;
        }

        /**
         * Execute unassign request
         * @return EmployeeDepartmentAssignationsUnassignResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeDepartmentAssignationsUnassignResponse execute() throws ApiException {
            EmployeeDepartmentAssignationsUnassignRequest employeeDepartmentAssignationsUnassignRequest = buildBodyParams();
            ApiResponse<EmployeeDepartmentAssignationsUnassignResponse> localVarResp = unassignWithHttpInfo(employeeDepartmentAssignationsUnassignRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unassign request with HTTP info returned
         * @return ApiResponse&lt;EmployeeDepartmentAssignationsUnassignResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeDepartmentAssignationsUnassignResponse> executeWithHttpInfo() throws ApiException {
            EmployeeDepartmentAssignationsUnassignRequest employeeDepartmentAssignationsUnassignRequest = buildBodyParams();
            return unassignWithHttpInfo(employeeDepartmentAssignationsUnassignRequest);
        }

        /**
         * Execute unassign request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeDepartmentAssignationsUnassignResponse> _callback) throws ApiException {
            EmployeeDepartmentAssignationsUnassignRequest employeeDepartmentAssignationsUnassignRequest = buildBodyParams();
            return unassignAsync(employeeDepartmentAssignationsUnassignRequest, _callback);
        }
    }

    /**
     * Unassign employee from department
     * 
     * @param employeeDepartmentAssignationsUnassignRequest Employee object needs to be unassigned to Department object (required)
     * @return UnassignRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UnassignRequestBuilder unassign(UUID employeeId, UUID departmentId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (departmentId == null) throw new IllegalArgumentException("\"departmentId\" is required but got null");
            

        return new UnassignRequestBuilder(employeeId, departmentId);
    }
}
