/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeesCreateNewEmployeeRequest;
import com.konfigthis.client.model.EmployeesCreateNewEmployeeRequestCustomFieldsInner;
import com.konfigthis.client.model.EmployeesCreateNewEmployeeResponse;
import com.konfigthis.client.model.EmployeesGetByIdResponse;
import com.konfigthis.client.model.EmployeesListResponse;
import com.konfigthis.client.model.EmployeesRemoveByIdResponse;
import com.konfigthis.client.model.EmployeesUpdateByIdRequest;
import com.konfigthis.client.model.EmployeesUpdateByIdRequestCustomFieldsInner;
import com.konfigthis.client.model.EmployeesUpdateByIdResponse;
import java.time.LocalDate;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewEmployeeCall(EmployeesCreateNewEmployeeRequest employeesCreateNewEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesCreateNewEmployeeRequest;

        // create path and map variables
        String localVarPath = "/core/v3/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewEmployeeValidateBeforeCall(EmployeesCreateNewEmployeeRequest employeesCreateNewEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeesCreateNewEmployeeRequest' is set
        if (employeesCreateNewEmployeeRequest == null) {
            throw new ApiException("Missing the required parameter 'employeesCreateNewEmployeeRequest' when calling createNewEmployee(Async)");
        }

        return createNewEmployeeCall(employeesCreateNewEmployeeRequest, _callback);

    }


    private ApiResponse<EmployeesCreateNewEmployeeResponse> createNewEmployeeWithHttpInfo(EmployeesCreateNewEmployeeRequest employeesCreateNewEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewEmployeeValidateBeforeCall(employeesCreateNewEmployeeRequest, null);
        Type localVarReturnType = new TypeToken<EmployeesCreateNewEmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewEmployeeAsync(EmployeesCreateNewEmployeeRequest employeesCreateNewEmployeeRequest, final ApiCallback<EmployeesCreateNewEmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewEmployeeValidateBeforeCall(employeesCreateNewEmployeeRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeesCreateNewEmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewEmployeeRequestBuilder {
        private final UUID companyId;
        private final String firstName;
        private final String lastName;
        private final Boolean invitation;
        private final String status;
        private String description;
        private String gender;
        private String email;
        private UUID contractId;
        private Integer code;
        private Integer pin;
        private String nid;
        private String identityNumberType;
        private String ssn;
        private String phone;
        private LocalDate dateOfBirth;
        private List<EmployeesCreateNewEmployeeRequestCustomFieldsInner> customFields;
        private String nationality;
        private String maritalStatus;
        private String address;
        private String postalCode;
        private String emergencyPhone;
        private Integer childrenCount;
        private Integer disability;
        private String personalEmail;
        private String city;
        private String province;
        private String country;
        private String salaryRange;
        private String studyLevel;
        private String professionalCategoryCode;
        private String professionalCategoryDescription;
        private String bic;

        private CreateNewEmployeeRequestBuilder(UUID companyId, String firstName, String lastName, Boolean invitation, String status) {
            this.companyId = companyId;
            this.firstName = firstName;
            this.lastName = lastName;
            this.invitation = invitation;
            this.status = status;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set email
         * @param email The email for the employee access and notifications (required if invitation is true) (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set contractId
         * @param contractId The identifier of your internal employee contract (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder contractId(UUID contractId) {
            this.contractId = contractId;
            return this;
        }
        
        /**
         * Set code
         * @param code The code of the employee (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder code(Integer code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set pin
         * @param pin The pin of the employee (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder pin(Integer pin) {
            this.pin = pin;
            return this;
        }
        
        /**
         * Set nid
         * @param nid The National Identity Document of the employee (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder nid(String nid) {
            this.nid = nid;
            return this;
        }
        
        /**
         * Set identityNumberType
         * @param identityNumberType  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder identityNumberType(String identityNumberType) {
            this.identityNumberType = identityNumberType;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn The Social Security Number of the employee (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set phone
         * @param phone  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder dateOfBirth(LocalDate dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Custom Fields to fill (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder customFields(List<EmployeesCreateNewEmployeeRequestCustomFieldsInner> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set nationality
         * @param nationality  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder nationality(String nationality) {
            this.nationality = nationality;
            return this;
        }
        
        /**
         * Set maritalStatus
         * @param maritalStatus  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder maritalStatus(String maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set emergencyPhone
         * @param emergencyPhone  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder emergencyPhone(String emergencyPhone) {
            this.emergencyPhone = emergencyPhone;
            return this;
        }
        
        /**
         * Set childrenCount
         * @param childrenCount  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder childrenCount(Integer childrenCount) {
            this.childrenCount = childrenCount;
            return this;
        }
        
        /**
         * Set disability
         * @param disability  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder disability(Integer disability) {
            this.disability = disability;
            return this;
        }
        
        /**
         * Set personalEmail
         * @param personalEmail  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder personalEmail(String personalEmail) {
            this.personalEmail = personalEmail;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set province
         * @param province  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder province(String province) {
            this.province = province;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set salaryRange
         * @param salaryRange  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder salaryRange(String salaryRange) {
            this.salaryRange = salaryRange;
            return this;
        }
        
        /**
         * Set studyLevel
         * @param studyLevel  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder studyLevel(String studyLevel) {
            this.studyLevel = studyLevel;
            return this;
        }
        
        /**
         * Set professionalCategoryCode
         * @param professionalCategoryCode  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder professionalCategoryCode(String professionalCategoryCode) {
            this.professionalCategoryCode = professionalCategoryCode;
            return this;
        }
        
        /**
         * Set professionalCategoryDescription
         * @param professionalCategoryDescription  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder professionalCategoryDescription(String professionalCategoryDescription) {
            this.professionalCategoryDescription = professionalCategoryDescription;
            return this;
        }
        
        /**
         * Set bic
         * @param bic  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder bic(String bic) {
            this.bic = bic;
            return this;
        }
        
        /**
         * Build call for createNewEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesCreateNewEmployeeRequest employeesCreateNewEmployeeRequest = buildBodyParams();
            return createNewEmployeeCall(employeesCreateNewEmployeeRequest, _callback);
        }

        private EmployeesCreateNewEmployeeRequest buildBodyParams() {
            EmployeesCreateNewEmployeeRequest employeesCreateNewEmployeeRequest = new EmployeesCreateNewEmployeeRequest();
            employeesCreateNewEmployeeRequest.description(this.description);
            employeesCreateNewEmployeeRequest.companyId(this.companyId);
            employeesCreateNewEmployeeRequest.firstName(this.firstName);
            employeesCreateNewEmployeeRequest.lastName(this.lastName);
            employeesCreateNewEmployeeRequest.invitation(this.invitation);
            if (this.status != null)
            employeesCreateNewEmployeeRequest.status(EmployeesCreateNewEmployeeRequest.StatusEnum.fromValue(this.status));
            if (this.gender != null)
            employeesCreateNewEmployeeRequest.gender(EmployeesCreateNewEmployeeRequest.GenderEnum.fromValue(this.gender));
            employeesCreateNewEmployeeRequest.email(this.email);
            employeesCreateNewEmployeeRequest.contractId(this.contractId);
            employeesCreateNewEmployeeRequest.code(this.code);
            employeesCreateNewEmployeeRequest.pin(this.pin);
            employeesCreateNewEmployeeRequest.nid(this.nid);
            if (this.identityNumberType != null)
            employeesCreateNewEmployeeRequest.identityNumberType(EmployeesCreateNewEmployeeRequest.IdentityNumberTypeEnum.fromValue(this.identityNumberType));
            employeesCreateNewEmployeeRequest.ssn(this.ssn);
            employeesCreateNewEmployeeRequest.phone(this.phone);
            employeesCreateNewEmployeeRequest.dateOfBirth(this.dateOfBirth);
            employeesCreateNewEmployeeRequest.customFields(this.customFields);
            employeesCreateNewEmployeeRequest.nationality(this.nationality);
            employeesCreateNewEmployeeRequest.maritalStatus(this.maritalStatus);
            employeesCreateNewEmployeeRequest.address(this.address);
            employeesCreateNewEmployeeRequest.postalCode(this.postalCode);
            employeesCreateNewEmployeeRequest.emergencyPhone(this.emergencyPhone);
            employeesCreateNewEmployeeRequest.childrenCount(this.childrenCount);
            employeesCreateNewEmployeeRequest.disability(this.disability);
            employeesCreateNewEmployeeRequest.personalEmail(this.personalEmail);
            employeesCreateNewEmployeeRequest.city(this.city);
            employeesCreateNewEmployeeRequest.province(this.province);
            employeesCreateNewEmployeeRequest.country(this.country);
            employeesCreateNewEmployeeRequest.salaryRange(this.salaryRange);
            employeesCreateNewEmployeeRequest.studyLevel(this.studyLevel);
            employeesCreateNewEmployeeRequest.professionalCategoryCode(this.professionalCategoryCode);
            employeesCreateNewEmployeeRequest.professionalCategoryDescription(this.professionalCategoryDescription);
            employeesCreateNewEmployeeRequest.bic(this.bic);
            return employeesCreateNewEmployeeRequest;
        }

        /**
         * Execute createNewEmployee request
         * @return EmployeesCreateNewEmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesCreateNewEmployeeResponse execute() throws ApiException {
            EmployeesCreateNewEmployeeRequest employeesCreateNewEmployeeRequest = buildBodyParams();
            ApiResponse<EmployeesCreateNewEmployeeResponse> localVarResp = createNewEmployeeWithHttpInfo(employeesCreateNewEmployeeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeesCreateNewEmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesCreateNewEmployeeResponse> executeWithHttpInfo() throws ApiException {
            EmployeesCreateNewEmployeeRequest employeesCreateNewEmployeeRequest = buildBodyParams();
            return createNewEmployeeWithHttpInfo(employeesCreateNewEmployeeRequest);
        }

        /**
         * Execute createNewEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesCreateNewEmployeeResponse> _callback) throws ApiException {
            EmployeesCreateNewEmployeeRequest employeesCreateNewEmployeeRequest = buildBodyParams();
            return createNewEmployeeAsync(employeesCreateNewEmployeeRequest, _callback);
        }
    }

    /**
     * Create an employee
     * 
     * @param employeesCreateNewEmployeeRequest Employee object that needs to be created (required)
     * @return CreateNewEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewEmployeeRequestBuilder createNewEmployee(UUID companyId, String firstName, String lastName, Boolean invitation, String status) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (invitation == null) throw new IllegalArgumentException("\"invitation\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        return new CreateNewEmployeeRequestBuilder(companyId, firstName, lastName, invitation, status);
    }
    private okhttp3.Call getByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v3/employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<EmployeesGetByIdResponse> getByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmployeesGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(UUID id, final ApiCallback<EmployeesGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmployeesGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final UUID id;

        private GetByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return EmployeesGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesGetByIdResponse execute() throws ApiException {
            ApiResponse<EmployeesGetByIdResponse> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;EmployeesGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Get an employee
     * 
     * @param id Employee ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call listCall(Integer code, String dni, String email, List<UUID> departmentIds, List<UUID> officeIds, Integer limit, Integer page, String orderBy, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v3/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (dni != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dni", dni));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (departmentIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "departmentIds", departmentIds));
        }

        if (officeIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "officeIds", officeIds));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer code, String dni, String email, List<UUID> departmentIds, List<UUID> officeIds, Integer limit, Integer page, String orderBy, String status, final ApiCallback _callback) throws ApiException {
        return listCall(code, dni, email, departmentIds, officeIds, limit, page, orderBy, status, _callback);

    }


    private ApiResponse<EmployeesListResponse> listWithHttpInfo(Integer code, String dni, String email, List<UUID> departmentIds, List<UUID> officeIds, Integer limit, Integer page, String orderBy, String status) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(code, dni, email, departmentIds, officeIds, limit, page, orderBy, status, null);
        Type localVarReturnType = new TypeToken<EmployeesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer code, String dni, String email, List<UUID> departmentIds, List<UUID> officeIds, Integer limit, Integer page, String orderBy, String status, final ApiCallback<EmployeesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(code, dni, email, departmentIds, officeIds, limit, page, orderBy, status, _callback);
        Type localVarReturnType = new TypeToken<EmployeesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Integer code;
        private String dni;
        private String email;
        private List<UUID> departmentIds;
        private List<UUID> officeIds;
        private Integer limit;
        private Integer page;
        private String orderBy;
        private String status;

        private ListRequestBuilder() {
        }

        /**
         * Set code
         * @param code Find Employee by code (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder code(Integer code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set dni
         * @param dni Find Employee by dni (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder dni(String dni) {
            this.dni = dni;
            return this;
        }
        
        /**
         * Set email
         * @param email Find Employee by email (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set departmentIds
         * @param departmentIds Find Employee by department Ids (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder departmentIds(List<UUID> departmentIds) {
            this.departmentIds = departmentIds;
            return this;
        }
        
        /**
         * Set officeIds
         * @param officeIds Find Employee by office Ids (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder officeIds(List<UUID> officeIds) {
            this.officeIds = officeIds;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit employees (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy field1 asc, field2 desc (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Set status
         * @param status &lt;b&gt;Supported operators:&lt;/b&gt; in (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(code, dni, email, departmentIds, officeIds, limit, page, orderBy, status, _callback);
        }


        /**
         * Execute list request
         * @return EmployeesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesListResponse execute() throws ApiException {
            ApiResponse<EmployeesListResponse> localVarResp = listWithHttpInfo(code, dni, email, departmentIds, officeIds, limit, page, orderBy, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;EmployeesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(code, dni, email, departmentIds, officeIds, limit, page, orderBy, status);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesListResponse> _callback) throws ApiException {
            return listAsync(code, dni, email, departmentIds, officeIds, limit, page, orderBy, status, _callback);
        }
    }

    /**
     * List employees
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call removeByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v3/employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeById(Async)");
        }

        return removeByIdCall(id, _callback);

    }


    private ApiResponse<EmployeesRemoveByIdResponse> removeByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmployeesRemoveByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeByIdAsync(UUID id, final ApiCallback<EmployeesRemoveByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmployeesRemoveByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final UUID id;

        private RemoveByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(id, _callback);
        }


        /**
         * Execute removeById request
         * @return EmployeesRemoveByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesRemoveByIdResponse execute() throws ApiException {
            ApiResponse<EmployeesRemoveByIdResponse> localVarResp = removeByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;EmployeesRemoveByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesRemoveByIdResponse> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(id);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesRemoveByIdResponse> _callback) throws ApiException {
            return removeByIdAsync(id, _callback);
        }
    }

    /**
     * Delete an employee
     * 
     * @param id Employee ID (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveByIdRequestBuilder(id);
    }
    private okhttp3.Call updateByIdCall(UUID id, EmployeesUpdateByIdRequest employeesUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/core/v3/employees/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(UUID id, EmployeesUpdateByIdRequest employeesUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        // verify the required parameter 'employeesUpdateByIdRequest' is set
        if (employeesUpdateByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'employeesUpdateByIdRequest' when calling updateById(Async)");
        }

        return updateByIdCall(id, employeesUpdateByIdRequest, _callback);

    }


    private ApiResponse<EmployeesUpdateByIdResponse> updateByIdWithHttpInfo(UUID id, EmployeesUpdateByIdRequest employeesUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, employeesUpdateByIdRequest, null);
        Type localVarReturnType = new TypeToken<EmployeesUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(UUID id, EmployeesUpdateByIdRequest employeesUpdateByIdRequest, final ApiCallback<EmployeesUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, employeesUpdateByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeesUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final String status;
        private final UUID id;
        private String description;
        private String gender;
        private String email;
        private UUID contractId;
        private Integer code;
        private Integer pin;
        private String nid;
        private String identityNumberType;
        private String ssn;
        private String phone;
        private LocalDate dateOfBirth;
        private List<EmployeesUpdateByIdRequestCustomFieldsInner> customFields;
        private String nationality;
        private String maritalStatus;
        private String address;
        private String postalCode;
        private String emergencyPhone;
        private Integer childrenCount;
        private Integer disability;
        private String personalEmail;
        private String city;
        private String province;
        private String country;
        private String salaryRange;
        private String studyLevel;
        private String professionalCategoryCode;
        private String professionalCategoryDescription;
        private String bic;
        private String accountNumber;

        private UpdateByIdRequestBuilder(String firstName, String lastName, String status, UUID id) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.status = status;
            this.id = id;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder gender(String gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set email
         * @param email The email for the employee access and notifications (required if invitation is true) (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set contractId
         * @param contractId The identifier of your internal employee contract (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder contractId(UUID contractId) {
            this.contractId = contractId;
            return this;
        }
        
        /**
         * Set code
         * @param code The code of the employee (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder code(Integer code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set pin
         * @param pin The pin of the employee (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder pin(Integer pin) {
            this.pin = pin;
            return this;
        }
        
        /**
         * Set nid
         * @param nid The National Identity Document of the employee (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder nid(String nid) {
            this.nid = nid;
            return this;
        }
        
        /**
         * Set identityNumberType
         * @param identityNumberType  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder identityNumberType(String identityNumberType) {
            this.identityNumberType = identityNumberType;
            return this;
        }
        
        /**
         * Set ssn
         * @param ssn The Social Security Number of the employee (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder ssn(String ssn) {
            this.ssn = ssn;
            return this;
        }
        
        /**
         * Set phone
         * @param phone  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set dateOfBirth
         * @param dateOfBirth  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder dateOfBirth(LocalDate dateOfBirth) {
            this.dateOfBirth = dateOfBirth;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Custom Fields to fill (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder customFields(List<EmployeesUpdateByIdRequestCustomFieldsInner> customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Set nationality
         * @param nationality  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder nationality(String nationality) {
            this.nationality = nationality;
            return this;
        }
        
        /**
         * Set maritalStatus
         * @param maritalStatus  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder maritalStatus(String maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set emergencyPhone
         * @param emergencyPhone  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder emergencyPhone(String emergencyPhone) {
            this.emergencyPhone = emergencyPhone;
            return this;
        }
        
        /**
         * Set childrenCount
         * @param childrenCount  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder childrenCount(Integer childrenCount) {
            this.childrenCount = childrenCount;
            return this;
        }
        
        /**
         * Set disability
         * @param disability  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder disability(Integer disability) {
            this.disability = disability;
            return this;
        }
        
        /**
         * Set personalEmail
         * @param personalEmail  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder personalEmail(String personalEmail) {
            this.personalEmail = personalEmail;
            return this;
        }
        
        /**
         * Set city
         * @param city  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set province
         * @param province  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder province(String province) {
            this.province = province;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set salaryRange
         * @param salaryRange  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder salaryRange(String salaryRange) {
            this.salaryRange = salaryRange;
            return this;
        }
        
        /**
         * Set studyLevel
         * @param studyLevel  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder studyLevel(String studyLevel) {
            this.studyLevel = studyLevel;
            return this;
        }
        
        /**
         * Set professionalCategoryCode
         * @param professionalCategoryCode  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder professionalCategoryCode(String professionalCategoryCode) {
            this.professionalCategoryCode = professionalCategoryCode;
            return this;
        }
        
        /**
         * Set professionalCategoryDescription
         * @param professionalCategoryDescription  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder professionalCategoryDescription(String professionalCategoryDescription) {
            this.professionalCategoryDescription = professionalCategoryDescription;
            return this;
        }
        
        /**
         * Set bic
         * @param bic  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder bic(String bic) {
            this.bic = bic;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesUpdateByIdRequest employeesUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(id, employeesUpdateByIdRequest, _callback);
        }

        private EmployeesUpdateByIdRequest buildBodyParams() {
            EmployeesUpdateByIdRequest employeesUpdateByIdRequest = new EmployeesUpdateByIdRequest();
            employeesUpdateByIdRequest.description(this.description);
            employeesUpdateByIdRequest.firstName(this.firstName);
            employeesUpdateByIdRequest.lastName(this.lastName);
            if (this.status != null)
            employeesUpdateByIdRequest.status(EmployeesUpdateByIdRequest.StatusEnum.fromValue(this.status));
            if (this.gender != null)
            employeesUpdateByIdRequest.gender(EmployeesUpdateByIdRequest.GenderEnum.fromValue(this.gender));
            employeesUpdateByIdRequest.email(this.email);
            employeesUpdateByIdRequest.contractId(this.contractId);
            employeesUpdateByIdRequest.code(this.code);
            employeesUpdateByIdRequest.pin(this.pin);
            employeesUpdateByIdRequest.nid(this.nid);
            if (this.identityNumberType != null)
            employeesUpdateByIdRequest.identityNumberType(EmployeesUpdateByIdRequest.IdentityNumberTypeEnum.fromValue(this.identityNumberType));
            employeesUpdateByIdRequest.ssn(this.ssn);
            employeesUpdateByIdRequest.phone(this.phone);
            employeesUpdateByIdRequest.dateOfBirth(this.dateOfBirth);
            employeesUpdateByIdRequest.customFields(this.customFields);
            employeesUpdateByIdRequest.nationality(this.nationality);
            employeesUpdateByIdRequest.maritalStatus(this.maritalStatus);
            employeesUpdateByIdRequest.address(this.address);
            employeesUpdateByIdRequest.postalCode(this.postalCode);
            employeesUpdateByIdRequest.emergencyPhone(this.emergencyPhone);
            employeesUpdateByIdRequest.childrenCount(this.childrenCount);
            employeesUpdateByIdRequest.disability(this.disability);
            employeesUpdateByIdRequest.personalEmail(this.personalEmail);
            employeesUpdateByIdRequest.city(this.city);
            employeesUpdateByIdRequest.province(this.province);
            employeesUpdateByIdRequest.country(this.country);
            employeesUpdateByIdRequest.salaryRange(this.salaryRange);
            employeesUpdateByIdRequest.studyLevel(this.studyLevel);
            employeesUpdateByIdRequest.professionalCategoryCode(this.professionalCategoryCode);
            employeesUpdateByIdRequest.professionalCategoryDescription(this.professionalCategoryDescription);
            employeesUpdateByIdRequest.bic(this.bic);
            employeesUpdateByIdRequest.accountNumber(this.accountNumber);
            return employeesUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @return EmployeesUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesUpdateByIdResponse execute() throws ApiException {
            EmployeesUpdateByIdRequest employeesUpdateByIdRequest = buildBodyParams();
            ApiResponse<EmployeesUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(id, employeesUpdateByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;EmployeesUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            EmployeesUpdateByIdRequest employeesUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(id, employeesUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesUpdateByIdResponse> _callback) throws ApiException {
            EmployeesUpdateByIdRequest employeesUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(id, employeesUpdateByIdRequest, _callback);
        }
    }

    /**
     * Update an employee
     * 
     * @param id Employee ID (required)
     * @param employeesUpdateByIdRequest Employee object that needs to be updated (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String firstName, String lastName, String status, UUID id) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateByIdRequestBuilder(firstName, lastName, status, id);
    }
}
