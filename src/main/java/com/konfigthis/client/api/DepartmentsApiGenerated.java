/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DepartmentsCreateNewDepartmentRequest;
import com.konfigthis.client.model.DepartmentsCreateNewDepartmentResponse;
import com.konfigthis.client.model.DepartmentsListResponse;
import com.konfigthis.client.model.DepartmentsRemoveByIdResponse;
import com.konfigthis.client.model.DepartmentsUpdateByIdRequest;
import com.konfigthis.client.model.DepartmentsUpdateByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DepartmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DepartmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DepartmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDepartmentCall(DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentsCreateNewDepartmentRequest;

        // create path and map variables
        String localVarPath = "/core/v3/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDepartmentValidateBeforeCall(DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'departmentsCreateNewDepartmentRequest' is set
        if (departmentsCreateNewDepartmentRequest == null) {
            throw new ApiException("Missing the required parameter 'departmentsCreateNewDepartmentRequest' when calling createNewDepartment(Async)");
        }

        return createNewDepartmentCall(departmentsCreateNewDepartmentRequest, _callback);

    }


    private ApiResponse<DepartmentsCreateNewDepartmentResponse> createNewDepartmentWithHttpInfo(DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewDepartmentValidateBeforeCall(departmentsCreateNewDepartmentRequest, null);
        Type localVarReturnType = new TypeToken<DepartmentsCreateNewDepartmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDepartmentAsync(DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest, final ApiCallback<DepartmentsCreateNewDepartmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDepartmentValidateBeforeCall(departmentsCreateNewDepartmentRequest, _callback);
        Type localVarReturnType = new TypeToken<DepartmentsCreateNewDepartmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDepartmentRequestBuilder {
        private final UUID companyId;
        private final String name;

        private CreateNewDepartmentRequestBuilder(UUID companyId, String name) {
            this.companyId = companyId;
            this.name = name;
        }

        /**
         * Build call for createNewDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            return createNewDepartmentCall(departmentsCreateNewDepartmentRequest, _callback);
        }

        private DepartmentsCreateNewDepartmentRequest buildBodyParams() {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = new DepartmentsCreateNewDepartmentRequest();
            departmentsCreateNewDepartmentRequest.companyId(this.companyId);
            departmentsCreateNewDepartmentRequest.name(this.name);
            return departmentsCreateNewDepartmentRequest;
        }

        /**
         * Execute createNewDepartment request
         * @return DepartmentsCreateNewDepartmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsCreateNewDepartmentResponse execute() throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            ApiResponse<DepartmentsCreateNewDepartmentResponse> localVarResp = createNewDepartmentWithHttpInfo(departmentsCreateNewDepartmentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDepartment request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsCreateNewDepartmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsCreateNewDepartmentResponse> executeWithHttpInfo() throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            return createNewDepartmentWithHttpInfo(departmentsCreateNewDepartmentRequest);
        }

        /**
         * Execute createNewDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsCreateNewDepartmentResponse> _callback) throws ApiException {
            DepartmentsCreateNewDepartmentRequest departmentsCreateNewDepartmentRequest = buildBodyParams();
            return createNewDepartmentAsync(departmentsCreateNewDepartmentRequest, _callback);
        }
    }

    /**
     * Create a department
     * 
     * @param departmentsCreateNewDepartmentRequest Department object that needs to be created (required)
     * @return CreateNewDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDepartmentRequestBuilder createNewDepartment(UUID companyId, String name) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateNewDepartmentRequestBuilder(companyId, name);
    }
    private okhttp3.Call listCall(String name, Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v3/departments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String name, Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        return listCall(name, limit, page, orderBy, _callback);

    }


    private ApiResponse<DepartmentsListResponse> listWithHttpInfo(String name, Integer limit, Integer page, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(name, limit, page, orderBy, null);
        Type localVarReturnType = new TypeToken<DepartmentsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String name, Integer limit, Integer page, String orderBy, final ApiCallback<DepartmentsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(name, limit, page, orderBy, _callback);
        Type localVarReturnType = new TypeToken<DepartmentsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String name;
        private Integer limit;
        private Integer page;
        private String orderBy;

        private ListRequestBuilder() {
        }

        /**
         * Set name
         * @param name Find Department by name (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit departments (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy field1 asc, field2 desc (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(name, limit, page, orderBy, _callback);
        }


        /**
         * Execute list request
         * @return DepartmentsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsListResponse execute() throws ApiException {
            ApiResponse<DepartmentsListResponse> localVarResp = listWithHttpInfo(name, limit, page, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(name, limit, page, orderBy);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsListResponse> _callback) throws ApiException {
            return listAsync(name, limit, page, orderBy, _callback);
        }
    }

    /**
     * List departments
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call removeByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v3/departments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeById(Async)");
        }

        return removeByIdCall(id, _callback);

    }


    private ApiResponse<DepartmentsRemoveByIdResponse> removeByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DepartmentsRemoveByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeByIdAsync(UUID id, final ApiCallback<DepartmentsRemoveByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DepartmentsRemoveByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final UUID id;

        private RemoveByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(id, _callback);
        }


        /**
         * Execute removeById request
         * @return DepartmentsRemoveByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsRemoveByIdResponse execute() throws ApiException {
            ApiResponse<DepartmentsRemoveByIdResponse> localVarResp = removeByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsRemoveByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsRemoveByIdResponse> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(id);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsRemoveByIdResponse> _callback) throws ApiException {
            return removeByIdAsync(id, _callback);
        }
    }

    /**
     * Delete a department
     * 
     * @param id Department ID (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveByIdRequestBuilder(id);
    }
    private okhttp3.Call updateByIdCall(UUID id, DepartmentsUpdateByIdRequest departmentsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = departmentsUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/core/v3/departments/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(UUID id, DepartmentsUpdateByIdRequest departmentsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        // verify the required parameter 'departmentsUpdateByIdRequest' is set
        if (departmentsUpdateByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'departmentsUpdateByIdRequest' when calling updateById(Async)");
        }

        return updateByIdCall(id, departmentsUpdateByIdRequest, _callback);

    }


    private ApiResponse<DepartmentsUpdateByIdResponse> updateByIdWithHttpInfo(UUID id, DepartmentsUpdateByIdRequest departmentsUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, departmentsUpdateByIdRequest, null);
        Type localVarReturnType = new TypeToken<DepartmentsUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(UUID id, DepartmentsUpdateByIdRequest departmentsUpdateByIdRequest, final ApiCallback<DepartmentsUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, departmentsUpdateByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<DepartmentsUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String name;
        private final UUID id;

        private UpdateByIdRequestBuilder(String name, UUID id) {
            this.name = name;
            this.id = id;
        }

        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DepartmentsUpdateByIdRequest departmentsUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(id, departmentsUpdateByIdRequest, _callback);
        }

        private DepartmentsUpdateByIdRequest buildBodyParams() {
            DepartmentsUpdateByIdRequest departmentsUpdateByIdRequest = new DepartmentsUpdateByIdRequest();
            departmentsUpdateByIdRequest.name(this.name);
            return departmentsUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @return DepartmentsUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public DepartmentsUpdateByIdResponse execute() throws ApiException {
            DepartmentsUpdateByIdRequest departmentsUpdateByIdRequest = buildBodyParams();
            ApiResponse<DepartmentsUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(id, departmentsUpdateByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;DepartmentsUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DepartmentsUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            DepartmentsUpdateByIdRequest departmentsUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(id, departmentsUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DepartmentsUpdateByIdResponse> _callback) throws ApiException {
            DepartmentsUpdateByIdRequest departmentsUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(id, departmentsUpdateByIdRequest, _callback);
        }
    }

    /**
     * Update a department
     * 
     * @param id Department ID (required)
     * @param departmentsUpdateByIdRequest Department object that needs to be updated (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String name, UUID id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateByIdRequestBuilder(name, id);
    }
}
