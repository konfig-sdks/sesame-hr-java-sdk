/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomersCreateNewCustomerRequest;
import com.konfigthis.client.model.CustomersCreateNewCustomerResponse;
import com.konfigthis.client.model.CustomersListResponse;
import com.konfigthis.client.model.CustomersRemoveByIdResponse;
import com.konfigthis.client.model.CustomersUpdateCustomerRequest;
import com.konfigthis.client.model.CustomersUpdateCustomerResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCustomerCall(CustomersCreateNewCustomerRequest customersCreateNewCustomerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customersCreateNewCustomerRequest;

        // create path and map variables
        String localVarPath = "/project/v1/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCustomerValidateBeforeCall(CustomersCreateNewCustomerRequest customersCreateNewCustomerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customersCreateNewCustomerRequest' is set
        if (customersCreateNewCustomerRequest == null) {
            throw new ApiException("Missing the required parameter 'customersCreateNewCustomerRequest' when calling createNewCustomer(Async)");
        }

        return createNewCustomerCall(customersCreateNewCustomerRequest, _callback);

    }


    private ApiResponse<CustomersCreateNewCustomerResponse> createNewCustomerWithHttpInfo(CustomersCreateNewCustomerRequest customersCreateNewCustomerRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewCustomerValidateBeforeCall(customersCreateNewCustomerRequest, null);
        Type localVarReturnType = new TypeToken<CustomersCreateNewCustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewCustomerAsync(CustomersCreateNewCustomerRequest customersCreateNewCustomerRequest, final ApiCallback<CustomersCreateNewCustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCustomerValidateBeforeCall(customersCreateNewCustomerRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomersCreateNewCustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewCustomerRequestBuilder {
        private final UUID companyId;
        private final String customerName;
        private String description;
        private String firstName;
        private String lastName;
        private String email;
        private String phone;

        private CreateNewCustomerRequestBuilder(UUID companyId, String customerName) {
            this.companyId = companyId;
            this.customerName = customerName;
        }

        /**
         * Set description
         * @param description A description (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The first name of the contact person (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name of the contact person (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set email
         * @param email The email of the contact person (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set phone
         * @param phone The phone of the contact person (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Build call for createNewCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomersCreateNewCustomerRequest customersCreateNewCustomerRequest = buildBodyParams();
            return createNewCustomerCall(customersCreateNewCustomerRequest, _callback);
        }

        private CustomersCreateNewCustomerRequest buildBodyParams() {
            CustomersCreateNewCustomerRequest customersCreateNewCustomerRequest = new CustomersCreateNewCustomerRequest();
            customersCreateNewCustomerRequest.description(this.description);
            customersCreateNewCustomerRequest.companyId(this.companyId);
            customersCreateNewCustomerRequest.customerName(this.customerName);
            customersCreateNewCustomerRequest.firstName(this.firstName);
            customersCreateNewCustomerRequest.lastName(this.lastName);
            customersCreateNewCustomerRequest.email(this.email);
            customersCreateNewCustomerRequest.phone(this.phone);
            return customersCreateNewCustomerRequest;
        }

        /**
         * Execute createNewCustomer request
         * @return CustomersCreateNewCustomerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public CustomersCreateNewCustomerResponse execute() throws ApiException {
            CustomersCreateNewCustomerRequest customersCreateNewCustomerRequest = buildBodyParams();
            ApiResponse<CustomersCreateNewCustomerResponse> localVarResp = createNewCustomerWithHttpInfo(customersCreateNewCustomerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewCustomer request with HTTP info returned
         * @return ApiResponse&lt;CustomersCreateNewCustomerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomersCreateNewCustomerResponse> executeWithHttpInfo() throws ApiException {
            CustomersCreateNewCustomerRequest customersCreateNewCustomerRequest = buildBodyParams();
            return createNewCustomerWithHttpInfo(customersCreateNewCustomerRequest);
        }

        /**
         * Execute createNewCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomersCreateNewCustomerResponse> _callback) throws ApiException {
            CustomersCreateNewCustomerRequest customersCreateNewCustomerRequest = buildBodyParams();
            return createNewCustomerAsync(customersCreateNewCustomerRequest, _callback);
        }
    }

    /**
     * Create a customer
     * 
     * @param customersCreateNewCustomerRequest Customer object that needs to be updated (required)
     * @return CreateNewCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewCustomerRequestBuilder createNewCustomer(UUID companyId, String customerName) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (customerName == null) throw new IllegalArgumentException("\"customerName\" is required but got null");
            

        return new CreateNewCustomerRequestBuilder(companyId, customerName);
    }
    private okhttp3.Call listCall(Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/v1/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        return listCall(limit, page, orderBy, _callback);

    }


    private ApiResponse<CustomersListResponse> listWithHttpInfo(Integer limit, Integer page, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(limit, page, orderBy, null);
        Type localVarReturnType = new TypeToken<CustomersListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer limit, Integer page, String orderBy, final ApiCallback<CustomersListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(limit, page, orderBy, _callback);
        Type localVarReturnType = new TypeToken<CustomersListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Integer limit;
        private Integer page;
        private String orderBy;

        private ListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy field1 asc, field2 desc (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(limit, page, orderBy, _callback);
        }


        /**
         * Execute list request
         * @return CustomersListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public CustomersListResponse execute() throws ApiException {
            ApiResponse<CustomersListResponse> localVarResp = listWithHttpInfo(limit, page, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;CustomersListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomersListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(limit, page, orderBy);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomersListResponse> _callback) throws ApiException {
            return listAsync(limit, page, orderBy, _callback);
        }
    }

    /**
     * List customers
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call removeByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/v1/customers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeById(Async)");
        }

        return removeByIdCall(id, _callback);

    }


    private ApiResponse<CustomersRemoveByIdResponse> removeByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CustomersRemoveByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeByIdAsync(UUID id, final ApiCallback<CustomersRemoveByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CustomersRemoveByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final UUID id;

        private RemoveByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(id, _callback);
        }


        /**
         * Execute removeById request
         * @return CustomersRemoveByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public CustomersRemoveByIdResponse execute() throws ApiException {
            ApiResponse<CustomersRemoveByIdResponse> localVarResp = removeByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;CustomersRemoveByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomersRemoveByIdResponse> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(id);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomersRemoveByIdResponse> _callback) throws ApiException {
            return removeByIdAsync(id, _callback);
        }
    }

    /**
     * Delete a customer
     * 
     * @param id Customer ID (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveByIdRequestBuilder(id);
    }
    private okhttp3.Call updateCustomerCall(UUID id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customersUpdateCustomerRequest;

        // create path and map variables
        String localVarPath = "/project/v1/customers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerValidateBeforeCall(UUID id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCustomer(Async)");
        }

        // verify the required parameter 'customersUpdateCustomerRequest' is set
        if (customersUpdateCustomerRequest == null) {
            throw new ApiException("Missing the required parameter 'customersUpdateCustomerRequest' when calling updateCustomer(Async)");
        }

        return updateCustomerCall(id, customersUpdateCustomerRequest, _callback);

    }


    private ApiResponse<CustomersUpdateCustomerResponse> updateCustomerWithHttpInfo(UUID id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(id, customersUpdateCustomerRequest, null);
        Type localVarReturnType = new TypeToken<CustomersUpdateCustomerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomerAsync(UUID id, CustomersUpdateCustomerRequest customersUpdateCustomerRequest, final ApiCallback<CustomersUpdateCustomerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(id, customersUpdateCustomerRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomersUpdateCustomerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomerRequestBuilder {
        private final String customerName;
        private final UUID id;
        private String description;
        private String firstName;
        private String lastName;
        private String email;
        private String phone;

        private UpdateCustomerRequestBuilder(String customerName, UUID id) {
            this.customerName = customerName;
            this.id = id;
        }

        /**
         * Set description
         * @param description A description (optional)
         * @return UpdateCustomerRequestBuilder
         */
        public UpdateCustomerRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The first name of the contact person (optional)
         * @return UpdateCustomerRequestBuilder
         */
        public UpdateCustomerRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name of the contact person (optional)
         * @return UpdateCustomerRequestBuilder
         */
        public UpdateCustomerRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set email
         * @param email The email of the contact person (optional)
         * @return UpdateCustomerRequestBuilder
         */
        public UpdateCustomerRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set phone
         * @param phone The phone of the contact person (optional)
         * @return UpdateCustomerRequestBuilder
         */
        public UpdateCustomerRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Build call for updateCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomersUpdateCustomerRequest customersUpdateCustomerRequest = buildBodyParams();
            return updateCustomerCall(id, customersUpdateCustomerRequest, _callback);
        }

        private CustomersUpdateCustomerRequest buildBodyParams() {
            CustomersUpdateCustomerRequest customersUpdateCustomerRequest = new CustomersUpdateCustomerRequest();
            customersUpdateCustomerRequest.description(this.description);
            customersUpdateCustomerRequest.customerName(this.customerName);
            customersUpdateCustomerRequest.firstName(this.firstName);
            customersUpdateCustomerRequest.lastName(this.lastName);
            customersUpdateCustomerRequest.email(this.email);
            customersUpdateCustomerRequest.phone(this.phone);
            return customersUpdateCustomerRequest;
        }

        /**
         * Execute updateCustomer request
         * @return CustomersUpdateCustomerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public CustomersUpdateCustomerResponse execute() throws ApiException {
            CustomersUpdateCustomerRequest customersUpdateCustomerRequest = buildBodyParams();
            ApiResponse<CustomersUpdateCustomerResponse> localVarResp = updateCustomerWithHttpInfo(id, customersUpdateCustomerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomer request with HTTP info returned
         * @return ApiResponse&lt;CustomersUpdateCustomerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomersUpdateCustomerResponse> executeWithHttpInfo() throws ApiException {
            CustomersUpdateCustomerRequest customersUpdateCustomerRequest = buildBodyParams();
            return updateCustomerWithHttpInfo(id, customersUpdateCustomerRequest);
        }

        /**
         * Execute updateCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomersUpdateCustomerResponse> _callback) throws ApiException {
            CustomersUpdateCustomerRequest customersUpdateCustomerRequest = buildBodyParams();
            return updateCustomerAsync(id, customersUpdateCustomerRequest, _callback);
        }
    }

    /**
     * Update a customer
     * 
     * @param id Customer ID (required)
     * @param customersUpdateCustomerRequest Customer object that needs to be updated (required)
     * @return UpdateCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomerRequestBuilder updateCustomer(String customerName, UUID id) throws IllegalArgumentException {
        if (customerName == null) throw new IllegalArgumentException("\"customerName\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateCustomerRequestBuilder(customerName, id);
    }
}
