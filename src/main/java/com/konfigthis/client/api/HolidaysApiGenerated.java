/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.HolidaysAssignToEmployeeRequest;
import com.konfigthis.client.model.HolidaysAssignToEmployeeResponse;
import com.konfigthis.client.model.HolidaysGetByHolidayCalendarEmployeesResponse;
import com.konfigthis.client.model.HolidaysListResponse;
import com.konfigthis.client.model.HolidaysUnassignHolidayCalendarToEmployeeRequest;
import com.konfigthis.client.model.HolidaysUnassignHolidayCalendarToEmployeeResponse;
import java.time.LocalDate;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HolidaysApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HolidaysApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HolidaysApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignToEmployeeCall(UUID holidayCalendarId, HolidaysAssignToEmployeeRequest holidaysAssignToEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = holidaysAssignToEmployeeRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/holidays/{holidayCalendarId}/employees"
            .replace("{" + "holidayCalendarId" + "}", localVarApiClient.escapeString(holidayCalendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignToEmployeeValidateBeforeCall(UUID holidayCalendarId, HolidaysAssignToEmployeeRequest holidaysAssignToEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'holidayCalendarId' is set
        if (holidayCalendarId == null) {
            throw new ApiException("Missing the required parameter 'holidayCalendarId' when calling assignToEmployee(Async)");
        }

        return assignToEmployeeCall(holidayCalendarId, holidaysAssignToEmployeeRequest, _callback);

    }


    private ApiResponse<HolidaysAssignToEmployeeResponse> assignToEmployeeWithHttpInfo(UUID holidayCalendarId, HolidaysAssignToEmployeeRequest holidaysAssignToEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = assignToEmployeeValidateBeforeCall(holidayCalendarId, holidaysAssignToEmployeeRequest, null);
        Type localVarReturnType = new TypeToken<HolidaysAssignToEmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignToEmployeeAsync(UUID holidayCalendarId, HolidaysAssignToEmployeeRequest holidaysAssignToEmployeeRequest, final ApiCallback<HolidaysAssignToEmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignToEmployeeValidateBeforeCall(holidayCalendarId, holidaysAssignToEmployeeRequest, _callback);
        Type localVarReturnType = new TypeToken<HolidaysAssignToEmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignToEmployeeRequestBuilder {
        private final UUID holidayCalendarId;
        private List<UUID> employees;
        private LocalDate startDate;

        private AssignToEmployeeRequestBuilder(UUID holidayCalendarId) {
            this.holidayCalendarId = holidayCalendarId;
        }

        /**
         * Set employees
         * @param employees  (optional)
         * @return AssignToEmployeeRequestBuilder
         */
        public AssignToEmployeeRequestBuilder employees(List<UUID> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return AssignToEmployeeRequestBuilder
         */
        public AssignToEmployeeRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Build call for assignToEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HolidaysAssignToEmployeeRequest holidaysAssignToEmployeeRequest = buildBodyParams();
            return assignToEmployeeCall(holidayCalendarId, holidaysAssignToEmployeeRequest, _callback);
        }

        private HolidaysAssignToEmployeeRequest buildBodyParams() {
            HolidaysAssignToEmployeeRequest holidaysAssignToEmployeeRequest = new HolidaysAssignToEmployeeRequest();
            holidaysAssignToEmployeeRequest.employees(this.employees);
            holidaysAssignToEmployeeRequest.startDate(this.startDate);
            return holidaysAssignToEmployeeRequest;
        }

        /**
         * Execute assignToEmployee request
         * @return HolidaysAssignToEmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public HolidaysAssignToEmployeeResponse execute() throws ApiException {
            HolidaysAssignToEmployeeRequest holidaysAssignToEmployeeRequest = buildBodyParams();
            ApiResponse<HolidaysAssignToEmployeeResponse> localVarResp = assignToEmployeeWithHttpInfo(holidayCalendarId, holidaysAssignToEmployeeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignToEmployee request with HTTP info returned
         * @return ApiResponse&lt;HolidaysAssignToEmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidaysAssignToEmployeeResponse> executeWithHttpInfo() throws ApiException {
            HolidaysAssignToEmployeeRequest holidaysAssignToEmployeeRequest = buildBodyParams();
            return assignToEmployeeWithHttpInfo(holidayCalendarId, holidaysAssignToEmployeeRequest);
        }

        /**
         * Execute assignToEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidaysAssignToEmployeeResponse> _callback) throws ApiException {
            HolidaysAssignToEmployeeRequest holidaysAssignToEmployeeRequest = buildBodyParams();
            return assignToEmployeeAsync(holidayCalendarId, holidaysAssignToEmployeeRequest, _callback);
        }
    }

    /**
     * Assign Holiday Calendar To Employee
     * 
     * @param holidayCalendarId Holiday Calendar Id (required)
     * @return AssignToEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public AssignToEmployeeRequestBuilder assignToEmployee(UUID holidayCalendarId) throws IllegalArgumentException {
        if (holidayCalendarId == null) throw new IllegalArgumentException("\"holidayCalendarId\" is required but got null");
            

        return new AssignToEmployeeRequestBuilder(holidayCalendarId);
    }
    private okhttp3.Call getByHolidayCalendarEmployeesCall(UUID holidayCalendarId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/holidays/{holidayCalendarId}/employees"
            .replace("{" + "holidayCalendarId" + "}", localVarApiClient.escapeString(holidayCalendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByHolidayCalendarEmployeesValidateBeforeCall(UUID holidayCalendarId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'holidayCalendarId' is set
        if (holidayCalendarId == null) {
            throw new ApiException("Missing the required parameter 'holidayCalendarId' when calling getByHolidayCalendarEmployees(Async)");
        }

        return getByHolidayCalendarEmployeesCall(holidayCalendarId, limit, page, _callback);

    }


    private ApiResponse<HolidaysGetByHolidayCalendarEmployeesResponse> getByHolidayCalendarEmployeesWithHttpInfo(UUID holidayCalendarId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getByHolidayCalendarEmployeesValidateBeforeCall(holidayCalendarId, limit, page, null);
        Type localVarReturnType = new TypeToken<HolidaysGetByHolidayCalendarEmployeesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByHolidayCalendarEmployeesAsync(UUID holidayCalendarId, Integer limit, Integer page, final ApiCallback<HolidaysGetByHolidayCalendarEmployeesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByHolidayCalendarEmployeesValidateBeforeCall(holidayCalendarId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<HolidaysGetByHolidayCalendarEmployeesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByHolidayCalendarEmployeesRequestBuilder {
        private final UUID holidayCalendarId;
        private Integer limit;
        private Integer page;

        private GetByHolidayCalendarEmployeesRequestBuilder(UUID holidayCalendarId) {
            this.holidayCalendarId = holidayCalendarId;
        }

        /**
         * Set limit
         * @param limit Limit results (optional)
         * @return GetByHolidayCalendarEmployeesRequestBuilder
         */
        public GetByHolidayCalendarEmployeesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return GetByHolidayCalendarEmployeesRequestBuilder
         */
        public GetByHolidayCalendarEmployeesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getByHolidayCalendarEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByHolidayCalendarEmployeesCall(holidayCalendarId, limit, page, _callback);
        }


        /**
         * Execute getByHolidayCalendarEmployees request
         * @return HolidaysGetByHolidayCalendarEmployeesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public HolidaysGetByHolidayCalendarEmployeesResponse execute() throws ApiException {
            ApiResponse<HolidaysGetByHolidayCalendarEmployeesResponse> localVarResp = getByHolidayCalendarEmployeesWithHttpInfo(holidayCalendarId, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByHolidayCalendarEmployees request with HTTP info returned
         * @return ApiResponse&lt;HolidaysGetByHolidayCalendarEmployeesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidaysGetByHolidayCalendarEmployeesResponse> executeWithHttpInfo() throws ApiException {
            return getByHolidayCalendarEmployeesWithHttpInfo(holidayCalendarId, limit, page);
        }

        /**
         * Execute getByHolidayCalendarEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidaysGetByHolidayCalendarEmployeesResponse> _callback) throws ApiException {
            return getByHolidayCalendarEmployeesAsync(holidayCalendarId, limit, page, _callback);
        }
    }

    /**
     * Get Employees By Holiday Calendar
     * 
     * @param holidayCalendarId Holiday Calendar Id (required)
     * @return GetByHolidayCalendarEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public GetByHolidayCalendarEmployeesRequestBuilder getByHolidayCalendarEmployees(UUID holidayCalendarId) throws IllegalArgumentException {
        if (holidayCalendarId == null) throw new IllegalArgumentException("\"holidayCalendarId\" is required but got null");
            

        return new GetByHolidayCalendarEmployeesRequestBuilder(holidayCalendarId);
    }
    private okhttp3.Call listCall(UUID employeeId, Integer year, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/holidays";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(UUID employeeId, Integer year, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling list(Async)");
        }

        // verify the required parameter 'year' is set
        if (year == null) {
            throw new ApiException("Missing the required parameter 'year' when calling list(Async)");
        }

        return listCall(employeeId, year, limit, page, _callback);

    }


    private ApiResponse<HolidaysListResponse> listWithHttpInfo(UUID employeeId, Integer year, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, year, limit, page, null);
        Type localVarReturnType = new TypeToken<HolidaysListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(UUID employeeId, Integer year, Integer limit, Integer page, final ApiCallback<HolidaysListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, year, limit, page, _callback);
        Type localVarReturnType = new TypeToken<HolidaysListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final UUID employeeId;
        private final Integer year;
        private Integer limit;
        private Integer page;

        private ListRequestBuilder(UUID employeeId, Integer year) {
            this.employeeId = employeeId;
            this.year = year;
        }

        /**
         * Set limit
         * @param limit Limit results (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(employeeId, year, limit, page, _callback);
        }


        /**
         * Execute list request
         * @return HolidaysListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public HolidaysListResponse execute() throws ApiException {
            ApiResponse<HolidaysListResponse> localVarResp = listWithHttpInfo(employeeId, year, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;HolidaysListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidaysListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(employeeId, year, limit, page);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidaysListResponse> _callback) throws ApiException {
            return listAsync(employeeId, year, limit, page, _callback);
        }
    }

    /**
     * List Holidays
     * 
     * @param employeeId Employee ID (required)
     * @param year  (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(UUID employeeId, Integer year) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        return new ListRequestBuilder(employeeId, year);
    }
    private okhttp3.Call unassignHolidayCalendarToEmployeeCall(UUID holidayCalendarId, HolidaysUnassignHolidayCalendarToEmployeeRequest holidaysUnassignHolidayCalendarToEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = holidaysUnassignHolidayCalendarToEmployeeRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/holidays/{holidayCalendarId}/employees"
            .replace("{" + "holidayCalendarId" + "}", localVarApiClient.escapeString(holidayCalendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignHolidayCalendarToEmployeeValidateBeforeCall(UUID holidayCalendarId, HolidaysUnassignHolidayCalendarToEmployeeRequest holidaysUnassignHolidayCalendarToEmployeeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'holidayCalendarId' is set
        if (holidayCalendarId == null) {
            throw new ApiException("Missing the required parameter 'holidayCalendarId' when calling unassignHolidayCalendarToEmployee(Async)");
        }

        return unassignHolidayCalendarToEmployeeCall(holidayCalendarId, holidaysUnassignHolidayCalendarToEmployeeRequest, _callback);

    }


    private ApiResponse<HolidaysUnassignHolidayCalendarToEmployeeResponse> unassignHolidayCalendarToEmployeeWithHttpInfo(UUID holidayCalendarId, HolidaysUnassignHolidayCalendarToEmployeeRequest holidaysUnassignHolidayCalendarToEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = unassignHolidayCalendarToEmployeeValidateBeforeCall(holidayCalendarId, holidaysUnassignHolidayCalendarToEmployeeRequest, null);
        Type localVarReturnType = new TypeToken<HolidaysUnassignHolidayCalendarToEmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unassignHolidayCalendarToEmployeeAsync(UUID holidayCalendarId, HolidaysUnassignHolidayCalendarToEmployeeRequest holidaysUnassignHolidayCalendarToEmployeeRequest, final ApiCallback<HolidaysUnassignHolidayCalendarToEmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignHolidayCalendarToEmployeeValidateBeforeCall(holidayCalendarId, holidaysUnassignHolidayCalendarToEmployeeRequest, _callback);
        Type localVarReturnType = new TypeToken<HolidaysUnassignHolidayCalendarToEmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnassignHolidayCalendarToEmployeeRequestBuilder {
        private final UUID holidayCalendarId;
        private List<UUID> employees;

        private UnassignHolidayCalendarToEmployeeRequestBuilder(UUID holidayCalendarId) {
            this.holidayCalendarId = holidayCalendarId;
        }

        /**
         * Set employees
         * @param employees  (optional)
         * @return UnassignHolidayCalendarToEmployeeRequestBuilder
         */
        public UnassignHolidayCalendarToEmployeeRequestBuilder employees(List<UUID> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Build call for unassignHolidayCalendarToEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HolidaysUnassignHolidayCalendarToEmployeeRequest holidaysUnassignHolidayCalendarToEmployeeRequest = buildBodyParams();
            return unassignHolidayCalendarToEmployeeCall(holidayCalendarId, holidaysUnassignHolidayCalendarToEmployeeRequest, _callback);
        }

        private HolidaysUnassignHolidayCalendarToEmployeeRequest buildBodyParams() {
            HolidaysUnassignHolidayCalendarToEmployeeRequest holidaysUnassignHolidayCalendarToEmployeeRequest = new HolidaysUnassignHolidayCalendarToEmployeeRequest();
            holidaysUnassignHolidayCalendarToEmployeeRequest.employees(this.employees);
            return holidaysUnassignHolidayCalendarToEmployeeRequest;
        }

        /**
         * Execute unassignHolidayCalendarToEmployee request
         * @return HolidaysUnassignHolidayCalendarToEmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public HolidaysUnassignHolidayCalendarToEmployeeResponse execute() throws ApiException {
            HolidaysUnassignHolidayCalendarToEmployeeRequest holidaysUnassignHolidayCalendarToEmployeeRequest = buildBodyParams();
            ApiResponse<HolidaysUnassignHolidayCalendarToEmployeeResponse> localVarResp = unassignHolidayCalendarToEmployeeWithHttpInfo(holidayCalendarId, holidaysUnassignHolidayCalendarToEmployeeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unassignHolidayCalendarToEmployee request with HTTP info returned
         * @return ApiResponse&lt;HolidaysUnassignHolidayCalendarToEmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidaysUnassignHolidayCalendarToEmployeeResponse> executeWithHttpInfo() throws ApiException {
            HolidaysUnassignHolidayCalendarToEmployeeRequest holidaysUnassignHolidayCalendarToEmployeeRequest = buildBodyParams();
            return unassignHolidayCalendarToEmployeeWithHttpInfo(holidayCalendarId, holidaysUnassignHolidayCalendarToEmployeeRequest);
        }

        /**
         * Execute unassignHolidayCalendarToEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidaysUnassignHolidayCalendarToEmployeeResponse> _callback) throws ApiException {
            HolidaysUnassignHolidayCalendarToEmployeeRequest holidaysUnassignHolidayCalendarToEmployeeRequest = buildBodyParams();
            return unassignHolidayCalendarToEmployeeAsync(holidayCalendarId, holidaysUnassignHolidayCalendarToEmployeeRequest, _callback);
        }
    }

    /**
     * Unassign Holiday Calendar To Employee
     * 
     * @param holidayCalendarId Holiday Calendar Id (required)
     * @return UnassignHolidayCalendarToEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UnassignHolidayCalendarToEmployeeRequestBuilder unassignHolidayCalendarToEmployee(UUID holidayCalendarId) throws IllegalArgumentException {
        if (holidayCalendarId == null) throw new IllegalArgumentException("\"holidayCalendarId\" is required but got null");
            

        return new UnassignHolidayCalendarToEmployeeRequestBuilder(holidayCalendarId);
    }
}
