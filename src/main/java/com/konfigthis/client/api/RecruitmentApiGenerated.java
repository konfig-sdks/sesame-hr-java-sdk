/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.RecruitmentCreateCandidateRequest;
import com.konfigthis.client.model.RecruitmentCreateCandidateResponse;
import com.konfigthis.client.model.RecruitmentGetCandidateByIdResponse;
import com.konfigthis.client.model.RecruitmentGetCandidateStatusListResponse;
import com.konfigthis.client.model.RecruitmentGetVacancyResponse;
import com.konfigthis.client.model.RecruitmentListVacanciesResponse;
import com.konfigthis.client.model.RecruitmentUpdateCandidateRequest;
import com.konfigthis.client.model.RecruitmentUpdateCandidateResponse;
import com.konfigthis.client.model.RecruitmentUploadCandidateDocumentRequest;
import com.konfigthis.client.model.RecruitmentUploadCandidateDocumentResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RecruitmentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecruitmentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RecruitmentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCandidateCall(RecruitmentCreateCandidateRequest recruitmentCreateCandidateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recruitmentCreateCandidateRequest;

        // create path and map variables
        String localVarPath = "/recruitment/v1/candidates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCandidateValidateBeforeCall(RecruitmentCreateCandidateRequest recruitmentCreateCandidateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recruitmentCreateCandidateRequest' is set
        if (recruitmentCreateCandidateRequest == null) {
            throw new ApiException("Missing the required parameter 'recruitmentCreateCandidateRequest' when calling createCandidate(Async)");
        }

        return createCandidateCall(recruitmentCreateCandidateRequest, _callback);

    }


    private ApiResponse<RecruitmentCreateCandidateResponse> createCandidateWithHttpInfo(RecruitmentCreateCandidateRequest recruitmentCreateCandidateRequest) throws ApiException {
        okhttp3.Call localVarCall = createCandidateValidateBeforeCall(recruitmentCreateCandidateRequest, null);
        Type localVarReturnType = new TypeToken<RecruitmentCreateCandidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCandidateAsync(RecruitmentCreateCandidateRequest recruitmentCreateCandidateRequest, final ApiCallback<RecruitmentCreateCandidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCandidateValidateBeforeCall(recruitmentCreateCandidateRequest, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentCreateCandidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCandidateRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final String email;
        private final String phone;
        private final UUID vacancyId;
        private String linkedinURL;
        private String desiredSalary;
        private String startWorkDate;
        private String web;
        private String location;
        private UUID statusId;

        private CreateCandidateRequestBuilder(String firstName, String lastName, String email, String phone, UUID vacancyId) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
            this.phone = phone;
            this.vacancyId = vacancyId;
        }

        /**
         * Set linkedinURL
         * @param linkedinURL The LinkedIn URL of the candidate (optional)
         * @return CreateCandidateRequestBuilder
         */
        public CreateCandidateRequestBuilder linkedinURL(String linkedinURL) {
            this.linkedinURL = linkedinURL;
            return this;
        }
        
        /**
         * Set desiredSalary
         * @param desiredSalary The desired salary of the candidate (optional)
         * @return CreateCandidateRequestBuilder
         */
        public CreateCandidateRequestBuilder desiredSalary(String desiredSalary) {
            this.desiredSalary = desiredSalary;
            return this;
        }
        
        /**
         * Set startWorkDate
         * @param startWorkDate The start work date of the candidate (optional)
         * @return CreateCandidateRequestBuilder
         */
        public CreateCandidateRequestBuilder startWorkDate(String startWorkDate) {
            this.startWorkDate = startWorkDate;
            return this;
        }
        
        /**
         * Set web
         * @param web The web of the candidate (optional)
         * @return CreateCandidateRequestBuilder
         */
        public CreateCandidateRequestBuilder web(String web) {
            this.web = web;
            return this;
        }
        
        /**
         * Set location
         * @param location The location of the candidate (optional)
         * @return CreateCandidateRequestBuilder
         */
        public CreateCandidateRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set statusId
         * @param statusId The identifier of the status of the candidate (optional)
         * @return CreateCandidateRequestBuilder
         */
        public CreateCandidateRequestBuilder statusId(UUID statusId) {
            this.statusId = statusId;
            return this;
        }
        
        /**
         * Build call for createCandidate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecruitmentCreateCandidateRequest recruitmentCreateCandidateRequest = buildBodyParams();
            return createCandidateCall(recruitmentCreateCandidateRequest, _callback);
        }

        private RecruitmentCreateCandidateRequest buildBodyParams() {
            RecruitmentCreateCandidateRequest recruitmentCreateCandidateRequest = new RecruitmentCreateCandidateRequest();
            recruitmentCreateCandidateRequest.firstName(this.firstName);
            recruitmentCreateCandidateRequest.lastName(this.lastName);
            recruitmentCreateCandidateRequest.email(this.email);
            recruitmentCreateCandidateRequest.phone(this.phone);
            recruitmentCreateCandidateRequest.linkedinURL(this.linkedinURL);
            recruitmentCreateCandidateRequest.desiredSalary(this.desiredSalary);
            recruitmentCreateCandidateRequest.startWorkDate(this.startWorkDate);
            recruitmentCreateCandidateRequest.web(this.web);
            recruitmentCreateCandidateRequest.location(this.location);
            recruitmentCreateCandidateRequest.vacancyId(this.vacancyId);
            recruitmentCreateCandidateRequest.statusId(this.statusId);
            return recruitmentCreateCandidateRequest;
        }

        /**
         * Execute createCandidate request
         * @return RecruitmentCreateCandidateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentCreateCandidateResponse execute() throws ApiException {
            RecruitmentCreateCandidateRequest recruitmentCreateCandidateRequest = buildBodyParams();
            ApiResponse<RecruitmentCreateCandidateResponse> localVarResp = createCandidateWithHttpInfo(recruitmentCreateCandidateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCandidate request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentCreateCandidateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentCreateCandidateResponse> executeWithHttpInfo() throws ApiException {
            RecruitmentCreateCandidateRequest recruitmentCreateCandidateRequest = buildBodyParams();
            return createCandidateWithHttpInfo(recruitmentCreateCandidateRequest);
        }

        /**
         * Execute createCandidate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentCreateCandidateResponse> _callback) throws ApiException {
            RecruitmentCreateCandidateRequest recruitmentCreateCandidateRequest = buildBodyParams();
            return createCandidateAsync(recruitmentCreateCandidateRequest, _callback);
        }
    }

    /**
     * Create a candidate
     * 
     * @param recruitmentCreateCandidateRequest Candidate object that needs to be created (required)
     * @return CreateCandidateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateCandidateRequestBuilder createCandidate(String firstName, String lastName, String email, String phone, UUID vacancyId) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (phone == null) throw new IllegalArgumentException("\"phone\" is required but got null");
            

        if (vacancyId == null) throw new IllegalArgumentException("\"vacancyId\" is required but got null");
            

        return new CreateCandidateRequestBuilder(firstName, lastName, email, phone, vacancyId);
    }
    private okhttp3.Call getCandidateByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruitment/v1/candidates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCandidateByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCandidateById(Async)");
        }

        return getCandidateByIdCall(id, _callback);

    }


    private ApiResponse<RecruitmentGetCandidateByIdResponse> getCandidateByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getCandidateByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RecruitmentGetCandidateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCandidateByIdAsync(UUID id, final ApiCallback<RecruitmentGetCandidateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCandidateByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentGetCandidateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCandidateByIdRequestBuilder {
        private final UUID id;

        private GetCandidateByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for getCandidateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCandidateByIdCall(id, _callback);
        }


        /**
         * Execute getCandidateById request
         * @return RecruitmentGetCandidateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentGetCandidateByIdResponse execute() throws ApiException {
            ApiResponse<RecruitmentGetCandidateByIdResponse> localVarResp = getCandidateByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCandidateById request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentGetCandidateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentGetCandidateByIdResponse> executeWithHttpInfo() throws ApiException {
            return getCandidateByIdWithHttpInfo(id);
        }

        /**
         * Execute getCandidateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentGetCandidateByIdResponse> _callback) throws ApiException {
            return getCandidateByIdAsync(id, _callback);
        }
    }

    /**
     * Get a candidate
     * 
     * @param id Candidate ID (required)
     * @return GetCandidateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public GetCandidateByIdRequestBuilder getCandidateById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetCandidateByIdRequestBuilder(id);
    }
    private okhttp3.Call getCandidateStatusListCall(UUID vacancyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruitment/v1/candidate-status/{vacancyId}"
            .replace("{" + "vacancyId" + "}", localVarApiClient.escapeString(vacancyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCandidateStatusListValidateBeforeCall(UUID vacancyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vacancyId' is set
        if (vacancyId == null) {
            throw new ApiException("Missing the required parameter 'vacancyId' when calling getCandidateStatusList(Async)");
        }

        return getCandidateStatusListCall(vacancyId, _callback);

    }


    private ApiResponse<RecruitmentGetCandidateStatusListResponse> getCandidateStatusListWithHttpInfo(UUID vacancyId) throws ApiException {
        okhttp3.Call localVarCall = getCandidateStatusListValidateBeforeCall(vacancyId, null);
        Type localVarReturnType = new TypeToken<RecruitmentGetCandidateStatusListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCandidateStatusListAsync(UUID vacancyId, final ApiCallback<RecruitmentGetCandidateStatusListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCandidateStatusListValidateBeforeCall(vacancyId, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentGetCandidateStatusListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCandidateStatusListRequestBuilder {
        private final UUID vacancyId;

        private GetCandidateStatusListRequestBuilder(UUID vacancyId) {
            this.vacancyId = vacancyId;
        }

        /**
         * Build call for getCandidateStatusList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCandidateStatusListCall(vacancyId, _callback);
        }


        /**
         * Execute getCandidateStatusList request
         * @return RecruitmentGetCandidateStatusListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentGetCandidateStatusListResponse execute() throws ApiException {
            ApiResponse<RecruitmentGetCandidateStatusListResponse> localVarResp = getCandidateStatusListWithHttpInfo(vacancyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCandidateStatusList request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentGetCandidateStatusListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentGetCandidateStatusListResponse> executeWithHttpInfo() throws ApiException {
            return getCandidateStatusListWithHttpInfo(vacancyId);
        }

        /**
         * Execute getCandidateStatusList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentGetCandidateStatusListResponse> _callback) throws ApiException {
            return getCandidateStatusListAsync(vacancyId, _callback);
        }
    }

    /**
     * Get candidate status list
     * 
     * @param vacancyId Vacancy ID (required)
     * @return GetCandidateStatusListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public GetCandidateStatusListRequestBuilder getCandidateStatusList(UUID vacancyId) throws IllegalArgumentException {
        if (vacancyId == null) throw new IllegalArgumentException("\"vacancyId\" is required but got null");
            

        return new GetCandidateStatusListRequestBuilder(vacancyId);
    }
    private okhttp3.Call getVacancyCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruitment/v1/vacancies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVacancyValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVacancy(Async)");
        }

        return getVacancyCall(id, _callback);

    }


    private ApiResponse<RecruitmentGetVacancyResponse> getVacancyWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getVacancyValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RecruitmentGetVacancyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVacancyAsync(UUID id, final ApiCallback<RecruitmentGetVacancyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVacancyValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentGetVacancyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVacancyRequestBuilder {
        private final UUID id;

        private GetVacancyRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for getVacancy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVacancyCall(id, _callback);
        }


        /**
         * Execute getVacancy request
         * @return RecruitmentGetVacancyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentGetVacancyResponse execute() throws ApiException {
            ApiResponse<RecruitmentGetVacancyResponse> localVarResp = getVacancyWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVacancy request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentGetVacancyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentGetVacancyResponse> executeWithHttpInfo() throws ApiException {
            return getVacancyWithHttpInfo(id);
        }

        /**
         * Execute getVacancy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentGetVacancyResponse> _callback) throws ApiException {
            return getVacancyAsync(id, _callback);
        }
    }

    /**
     * Get a vacancy
     * 
     * @param id Vacancy ID (required)
     * @return GetVacancyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public GetVacancyRequestBuilder getVacancy(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetVacancyRequestBuilder(id);
    }
    private okhttp3.Call listVacanciesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recruitment/v1/vacancies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVacanciesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listVacanciesCall(_callback);

    }


    private ApiResponse<RecruitmentListVacanciesResponse> listVacanciesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listVacanciesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RecruitmentListVacanciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listVacanciesAsync(final ApiCallback<RecruitmentListVacanciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVacanciesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RecruitmentListVacanciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListVacanciesRequestBuilder {

        private ListVacanciesRequestBuilder() {
        }

        /**
         * Build call for listVacancies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listVacanciesCall(_callback);
        }


        /**
         * Execute listVacancies request
         * @return RecruitmentListVacanciesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentListVacanciesResponse execute() throws ApiException {
            ApiResponse<RecruitmentListVacanciesResponse> localVarResp = listVacanciesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listVacancies request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentListVacanciesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentListVacanciesResponse> executeWithHttpInfo() throws ApiException {
            return listVacanciesWithHttpInfo();
        }

        /**
         * Execute listVacancies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentListVacanciesResponse> _callback) throws ApiException {
            return listVacanciesAsync(_callback);
        }
    }

    /**
     * Get vacancies list
     * 
     * @return ListVacanciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
     </table>
     */
    public ListVacanciesRequestBuilder listVacancies() throws IllegalArgumentException {
        return new ListVacanciesRequestBuilder();
    }
    private okhttp3.Call updateCandidateCall(UUID id, RecruitmentUpdateCandidateRequest recruitmentUpdateCandidateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recruitmentUpdateCandidateRequest;

        // create path and map variables
        String localVarPath = "/recruitment/v1/candidates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCandidateValidateBeforeCall(UUID id, RecruitmentUpdateCandidateRequest recruitmentUpdateCandidateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCandidate(Async)");
        }

        // verify the required parameter 'recruitmentUpdateCandidateRequest' is set
        if (recruitmentUpdateCandidateRequest == null) {
            throw new ApiException("Missing the required parameter 'recruitmentUpdateCandidateRequest' when calling updateCandidate(Async)");
        }

        return updateCandidateCall(id, recruitmentUpdateCandidateRequest, _callback);

    }


    private ApiResponse<RecruitmentUpdateCandidateResponse> updateCandidateWithHttpInfo(UUID id, RecruitmentUpdateCandidateRequest recruitmentUpdateCandidateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCandidateValidateBeforeCall(id, recruitmentUpdateCandidateRequest, null);
        Type localVarReturnType = new TypeToken<RecruitmentUpdateCandidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCandidateAsync(UUID id, RecruitmentUpdateCandidateRequest recruitmentUpdateCandidateRequest, final ApiCallback<RecruitmentUpdateCandidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCandidateValidateBeforeCall(id, recruitmentUpdateCandidateRequest, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentUpdateCandidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCandidateRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final String email;
        private final String phone;
        private final UUID vacancyId;
        private final UUID id;
        private String linkedinURL;
        private String desiredSalary;
        private String startWorkDate;
        private String web;
        private String location;
        private UUID statusId;

        private UpdateCandidateRequestBuilder(String firstName, String lastName, String email, String phone, UUID vacancyId, UUID id) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
            this.phone = phone;
            this.vacancyId = vacancyId;
            this.id = id;
        }

        /**
         * Set linkedinURL
         * @param linkedinURL The LinkedIn URL of the candidate (optional)
         * @return UpdateCandidateRequestBuilder
         */
        public UpdateCandidateRequestBuilder linkedinURL(String linkedinURL) {
            this.linkedinURL = linkedinURL;
            return this;
        }
        
        /**
         * Set desiredSalary
         * @param desiredSalary The desired salary of the candidate (optional)
         * @return UpdateCandidateRequestBuilder
         */
        public UpdateCandidateRequestBuilder desiredSalary(String desiredSalary) {
            this.desiredSalary = desiredSalary;
            return this;
        }
        
        /**
         * Set startWorkDate
         * @param startWorkDate The start work date of the candidate (optional)
         * @return UpdateCandidateRequestBuilder
         */
        public UpdateCandidateRequestBuilder startWorkDate(String startWorkDate) {
            this.startWorkDate = startWorkDate;
            return this;
        }
        
        /**
         * Set web
         * @param web The web of the candidate (optional)
         * @return UpdateCandidateRequestBuilder
         */
        public UpdateCandidateRequestBuilder web(String web) {
            this.web = web;
            return this;
        }
        
        /**
         * Set location
         * @param location The location of the candidate (optional)
         * @return UpdateCandidateRequestBuilder
         */
        public UpdateCandidateRequestBuilder location(String location) {
            this.location = location;
            return this;
        }
        
        /**
         * Set statusId
         * @param statusId The identifier of the status of the candidate (optional)
         * @return UpdateCandidateRequestBuilder
         */
        public UpdateCandidateRequestBuilder statusId(UUID statusId) {
            this.statusId = statusId;
            return this;
        }
        
        /**
         * Build call for updateCandidate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecruitmentUpdateCandidateRequest recruitmentUpdateCandidateRequest = buildBodyParams();
            return updateCandidateCall(id, recruitmentUpdateCandidateRequest, _callback);
        }

        private RecruitmentUpdateCandidateRequest buildBodyParams() {
            RecruitmentUpdateCandidateRequest recruitmentUpdateCandidateRequest = new RecruitmentUpdateCandidateRequest();
            recruitmentUpdateCandidateRequest.firstName(this.firstName);
            recruitmentUpdateCandidateRequest.lastName(this.lastName);
            recruitmentUpdateCandidateRequest.email(this.email);
            recruitmentUpdateCandidateRequest.phone(this.phone);
            recruitmentUpdateCandidateRequest.linkedinURL(this.linkedinURL);
            recruitmentUpdateCandidateRequest.desiredSalary(this.desiredSalary);
            recruitmentUpdateCandidateRequest.startWorkDate(this.startWorkDate);
            recruitmentUpdateCandidateRequest.web(this.web);
            recruitmentUpdateCandidateRequest.location(this.location);
            recruitmentUpdateCandidateRequest.vacancyId(this.vacancyId);
            recruitmentUpdateCandidateRequest.statusId(this.statusId);
            return recruitmentUpdateCandidateRequest;
        }

        /**
         * Execute updateCandidate request
         * @return RecruitmentUpdateCandidateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentUpdateCandidateResponse execute() throws ApiException {
            RecruitmentUpdateCandidateRequest recruitmentUpdateCandidateRequest = buildBodyParams();
            ApiResponse<RecruitmentUpdateCandidateResponse> localVarResp = updateCandidateWithHttpInfo(id, recruitmentUpdateCandidateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCandidate request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentUpdateCandidateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentUpdateCandidateResponse> executeWithHttpInfo() throws ApiException {
            RecruitmentUpdateCandidateRequest recruitmentUpdateCandidateRequest = buildBodyParams();
            return updateCandidateWithHttpInfo(id, recruitmentUpdateCandidateRequest);
        }

        /**
         * Execute updateCandidate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentUpdateCandidateResponse> _callback) throws ApiException {
            RecruitmentUpdateCandidateRequest recruitmentUpdateCandidateRequest = buildBodyParams();
            return updateCandidateAsync(id, recruitmentUpdateCandidateRequest, _callback);
        }
    }

    /**
     * Update a candidate
     * 
     * @param id Candidate ID (required)
     * @param recruitmentUpdateCandidateRequest Candidate object that needs to be updated (required)
     * @return UpdateCandidateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCandidateRequestBuilder updateCandidate(String firstName, String lastName, String email, String phone, UUID vacancyId, UUID id) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (phone == null) throw new IllegalArgumentException("\"phone\" is required but got null");
            

        if (vacancyId == null) throw new IllegalArgumentException("\"vacancyId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateCandidateRequestBuilder(firstName, lastName, email, phone, vacancyId, id);
    }
    private okhttp3.Call uploadCandidateDocumentCall(UUID id, File document, RecruitmentUploadCandidateDocumentRequest recruitmentUploadCandidateDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recruitmentUploadCandidateDocumentRequest;

        // create path and map variables
        String localVarPath = "/recruitment/v1/candidates/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (document != null) {
            localVarFormParams.put("document", document);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadCandidateDocumentValidateBeforeCall(UUID id, File document, RecruitmentUploadCandidateDocumentRequest recruitmentUploadCandidateDocumentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadCandidateDocument(Async)");
        }

        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling uploadCandidateDocument(Async)");
        }

        // verify the required parameter 'recruitmentUploadCandidateDocumentRequest' is set
        if (recruitmentUploadCandidateDocumentRequest == null) {
            throw new ApiException("Missing the required parameter 'recruitmentUploadCandidateDocumentRequest' when calling uploadCandidateDocument(Async)");
        }

        return uploadCandidateDocumentCall(id, document, recruitmentUploadCandidateDocumentRequest, _callback);

    }


    private ApiResponse<RecruitmentUploadCandidateDocumentResponse> uploadCandidateDocumentWithHttpInfo(UUID id, File document, RecruitmentUploadCandidateDocumentRequest recruitmentUploadCandidateDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadCandidateDocumentValidateBeforeCall(id, document, recruitmentUploadCandidateDocumentRequest, null);
        Type localVarReturnType = new TypeToken<RecruitmentUploadCandidateDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadCandidateDocumentAsync(UUID id, File document, RecruitmentUploadCandidateDocumentRequest recruitmentUploadCandidateDocumentRequest, final ApiCallback<RecruitmentUploadCandidateDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadCandidateDocumentValidateBeforeCall(id, document, recruitmentUploadCandidateDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<RecruitmentUploadCandidateDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadCandidateDocumentRequestBuilder {
        private final UUID id;
        private final File document;

        private UploadCandidateDocumentRequestBuilder(UUID id, File document) {
            this.id = id;
            this.document = document;
        }

        /**
         * Build call for uploadCandidateDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecruitmentUploadCandidateDocumentRequest recruitmentUploadCandidateDocumentRequest = buildBodyParams();
            return uploadCandidateDocumentCall(id, document, recruitmentUploadCandidateDocumentRequest, _callback);
        }

        private RecruitmentUploadCandidateDocumentRequest buildBodyParams() {
            RecruitmentUploadCandidateDocumentRequest recruitmentUploadCandidateDocumentRequest = new RecruitmentUploadCandidateDocumentRequest();
            recruitmentUploadCandidateDocumentRequest.document(this.document);
            return recruitmentUploadCandidateDocumentRequest;
        }

        /**
         * Execute uploadCandidateDocument request
         * @return RecruitmentUploadCandidateDocumentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public RecruitmentUploadCandidateDocumentResponse execute() throws ApiException {
            RecruitmentUploadCandidateDocumentRequest recruitmentUploadCandidateDocumentRequest = buildBodyParams();
            ApiResponse<RecruitmentUploadCandidateDocumentResponse> localVarResp = uploadCandidateDocumentWithHttpInfo(id, document, recruitmentUploadCandidateDocumentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadCandidateDocument request with HTTP info returned
         * @return ApiResponse&lt;RecruitmentUploadCandidateDocumentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecruitmentUploadCandidateDocumentResponse> executeWithHttpInfo() throws ApiException {
            RecruitmentUploadCandidateDocumentRequest recruitmentUploadCandidateDocumentRequest = buildBodyParams();
            return uploadCandidateDocumentWithHttpInfo(id, document, recruitmentUploadCandidateDocumentRequest);
        }

        /**
         * Execute uploadCandidateDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecruitmentUploadCandidateDocumentResponse> _callback) throws ApiException {
            RecruitmentUploadCandidateDocumentRequest recruitmentUploadCandidateDocumentRequest = buildBodyParams();
            return uploadCandidateDocumentAsync(id, document, recruitmentUploadCandidateDocumentRequest, _callback);
        }
    }

    /**
     * Upload candidate document
     * 
     * @param id Candidate ID (required)
     * @param document Document to upload (required)
     * @param recruitmentUploadCandidateDocumentRequest Document to upload (required)
     * @return UploadCandidateDocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UploadCandidateDocumentRequestBuilder uploadCandidateDocument(UUID id, File document) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (document == null) throw new IllegalArgumentException("\"document\" is required but got null");
        return new UploadCandidateDocumentRequestBuilder(id, document);
    }
}
