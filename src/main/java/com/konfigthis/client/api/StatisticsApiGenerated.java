/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.StatisticsListWorkedAbsenceDaysByEmployeeResponse;
import com.konfigthis.client.model.StatisticsListWorkedHoursByEmployeeResponse;
import com.konfigthis.client.model.StatisticsListWorkedHoursByWeekDayResponse;
import com.konfigthis.client.model.StatisticsListWorkedNightHoursResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StatisticsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatisticsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listWorkedAbsenceDaysByEmployeeCall(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/reports/worked-absence-days";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeIdsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "employeeIds[in]", employeeIdsIn));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkedAbsenceDaysByEmployeeValidateBeforeCall(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling listWorkedAbsenceDaysByEmployee(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling listWorkedAbsenceDaysByEmployee(Async)");
        }

        return listWorkedAbsenceDaysByEmployeeCall(from, to, employeeIdsIn, limit, page, _callback);

    }


    private ApiResponse<StatisticsListWorkedAbsenceDaysByEmployeeResponse> listWorkedAbsenceDaysByEmployeeWithHttpInfo(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listWorkedAbsenceDaysByEmployeeValidateBeforeCall(from, to, employeeIdsIn, limit, page, null);
        Type localVarReturnType = new TypeToken<StatisticsListWorkedAbsenceDaysByEmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkedAbsenceDaysByEmployeeAsync(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Integer limit, Integer page, final ApiCallback<StatisticsListWorkedAbsenceDaysByEmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkedAbsenceDaysByEmployeeValidateBeforeCall(from, to, employeeIdsIn, limit, page, _callback);
        Type localVarReturnType = new TypeToken<StatisticsListWorkedAbsenceDaysByEmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkedAbsenceDaysByEmployeeRequestBuilder {
        private final LocalDate from;
        private final LocalDate to;
        private List<UUID> employeeIdsIn;
        private Integer limit;
        private Integer page;

        private ListWorkedAbsenceDaysByEmployeeRequestBuilder(LocalDate from, LocalDate to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set employeeIdsIn
         * @param employeeIdsIn Array of employee ids (optional)
         * @return ListWorkedAbsenceDaysByEmployeeRequestBuilder
         */
        public ListWorkedAbsenceDaysByEmployeeRequestBuilder employeeIdsIn(List<UUID> employeeIdsIn) {
            this.employeeIdsIn = employeeIdsIn;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit employees (optional)
         * @return ListWorkedAbsenceDaysByEmployeeRequestBuilder
         */
        public ListWorkedAbsenceDaysByEmployeeRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListWorkedAbsenceDaysByEmployeeRequestBuilder
         */
        public ListWorkedAbsenceDaysByEmployeeRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listWorkedAbsenceDaysByEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkedAbsenceDaysByEmployeeCall(from, to, employeeIdsIn, limit, page, _callback);
        }


        /**
         * Execute listWorkedAbsenceDaysByEmployee request
         * @return StatisticsListWorkedAbsenceDaysByEmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public StatisticsListWorkedAbsenceDaysByEmployeeResponse execute() throws ApiException {
            ApiResponse<StatisticsListWorkedAbsenceDaysByEmployeeResponse> localVarResp = listWorkedAbsenceDaysByEmployeeWithHttpInfo(from, to, employeeIdsIn, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkedAbsenceDaysByEmployee request with HTTP info returned
         * @return ApiResponse&lt;StatisticsListWorkedAbsenceDaysByEmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatisticsListWorkedAbsenceDaysByEmployeeResponse> executeWithHttpInfo() throws ApiException {
            return listWorkedAbsenceDaysByEmployeeWithHttpInfo(from, to, employeeIdsIn, limit, page);
        }

        /**
         * Execute listWorkedAbsenceDaysByEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatisticsListWorkedAbsenceDaysByEmployeeResponse> _callback) throws ApiException {
            return listWorkedAbsenceDaysByEmployeeAsync(from, to, employeeIdsIn, limit, page, _callback);
        }
    }

    /**
     * List Worked Absence Days By Employee
     * 
     * @param from Y-m-d (required)
     * @param to Y-m-d (required)
     * @return ListWorkedAbsenceDaysByEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkedAbsenceDaysByEmployeeRequestBuilder listWorkedAbsenceDaysByEmployee(LocalDate from, LocalDate to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new ListWorkedAbsenceDaysByEmployeeRequestBuilder(from, to);
    }
    private okhttp3.Call listWorkedHoursByEmployeeCall(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Boolean withChecks, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/reports/worked-hours";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeIdsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "employeeIds[in]", employeeIdsIn));
        }

        if (withChecks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withChecks", withChecks));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkedHoursByEmployeeValidateBeforeCall(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Boolean withChecks, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling listWorkedHoursByEmployee(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling listWorkedHoursByEmployee(Async)");
        }

        return listWorkedHoursByEmployeeCall(from, to, employeeIdsIn, withChecks, limit, page, _callback);

    }


    private ApiResponse<StatisticsListWorkedHoursByEmployeeResponse> listWorkedHoursByEmployeeWithHttpInfo(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Boolean withChecks, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listWorkedHoursByEmployeeValidateBeforeCall(from, to, employeeIdsIn, withChecks, limit, page, null);
        Type localVarReturnType = new TypeToken<StatisticsListWorkedHoursByEmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkedHoursByEmployeeAsync(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Boolean withChecks, Integer limit, Integer page, final ApiCallback<StatisticsListWorkedHoursByEmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkedHoursByEmployeeValidateBeforeCall(from, to, employeeIdsIn, withChecks, limit, page, _callback);
        Type localVarReturnType = new TypeToken<StatisticsListWorkedHoursByEmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkedHoursByEmployeeRequestBuilder {
        private final LocalDate from;
        private final LocalDate to;
        private List<UUID> employeeIdsIn;
        private Boolean withChecks;
        private Integer limit;
        private Integer page;

        private ListWorkedHoursByEmployeeRequestBuilder(LocalDate from, LocalDate to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set employeeIdsIn
         * @param employeeIdsIn Array of employee ids (optional)
         * @return ListWorkedHoursByEmployeeRequestBuilder
         */
        public ListWorkedHoursByEmployeeRequestBuilder employeeIdsIn(List<UUID> employeeIdsIn) {
            this.employeeIdsIn = employeeIdsIn;
            return this;
        }
        
        /**
         * Set withChecks
         * @param withChecks true or false (optional)
         * @return ListWorkedHoursByEmployeeRequestBuilder
         */
        public ListWorkedHoursByEmployeeRequestBuilder withChecks(Boolean withChecks) {
            this.withChecks = withChecks;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit employees (optional)
         * @return ListWorkedHoursByEmployeeRequestBuilder
         */
        public ListWorkedHoursByEmployeeRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListWorkedHoursByEmployeeRequestBuilder
         */
        public ListWorkedHoursByEmployeeRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listWorkedHoursByEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkedHoursByEmployeeCall(from, to, employeeIdsIn, withChecks, limit, page, _callback);
        }


        /**
         * Execute listWorkedHoursByEmployee request
         * @return StatisticsListWorkedHoursByEmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public StatisticsListWorkedHoursByEmployeeResponse execute() throws ApiException {
            ApiResponse<StatisticsListWorkedHoursByEmployeeResponse> localVarResp = listWorkedHoursByEmployeeWithHttpInfo(from, to, employeeIdsIn, withChecks, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkedHoursByEmployee request with HTTP info returned
         * @return ApiResponse&lt;StatisticsListWorkedHoursByEmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatisticsListWorkedHoursByEmployeeResponse> executeWithHttpInfo() throws ApiException {
            return listWorkedHoursByEmployeeWithHttpInfo(from, to, employeeIdsIn, withChecks, limit, page);
        }

        /**
         * Execute listWorkedHoursByEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatisticsListWorkedHoursByEmployeeResponse> _callback) throws ApiException {
            return listWorkedHoursByEmployeeAsync(from, to, employeeIdsIn, withChecks, limit, page, _callback);
        }
    }

    /**
     * List Worked Hours By Employee
     * 
     * @param from Y-m-d (required)
     * @param to Y-m-d (required)
     * @return ListWorkedHoursByEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkedHoursByEmployeeRequestBuilder listWorkedHoursByEmployee(LocalDate from, LocalDate to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new ListWorkedHoursByEmployeeRequestBuilder(from, to);
    }
    private okhttp3.Call listWorkedHoursByWeekDayCall(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/reports/worked-hours-by-week-day";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeIdsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "employeeIds[in]", employeeIdsIn));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkedHoursByWeekDayValidateBeforeCall(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling listWorkedHoursByWeekDay(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling listWorkedHoursByWeekDay(Async)");
        }

        return listWorkedHoursByWeekDayCall(from, to, employeeIdsIn, limit, page, _callback);

    }


    private ApiResponse<StatisticsListWorkedHoursByWeekDayResponse> listWorkedHoursByWeekDayWithHttpInfo(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listWorkedHoursByWeekDayValidateBeforeCall(from, to, employeeIdsIn, limit, page, null);
        Type localVarReturnType = new TypeToken<StatisticsListWorkedHoursByWeekDayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkedHoursByWeekDayAsync(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Integer limit, Integer page, final ApiCallback<StatisticsListWorkedHoursByWeekDayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkedHoursByWeekDayValidateBeforeCall(from, to, employeeIdsIn, limit, page, _callback);
        Type localVarReturnType = new TypeToken<StatisticsListWorkedHoursByWeekDayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkedHoursByWeekDayRequestBuilder {
        private final LocalDate from;
        private final LocalDate to;
        private List<UUID> employeeIdsIn;
        private Integer limit;
        private Integer page;

        private ListWorkedHoursByWeekDayRequestBuilder(LocalDate from, LocalDate to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set employeeIdsIn
         * @param employeeIdsIn Array of employee ids (optional)
         * @return ListWorkedHoursByWeekDayRequestBuilder
         */
        public ListWorkedHoursByWeekDayRequestBuilder employeeIdsIn(List<UUID> employeeIdsIn) {
            this.employeeIdsIn = employeeIdsIn;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit employees (optional)
         * @return ListWorkedHoursByWeekDayRequestBuilder
         */
        public ListWorkedHoursByWeekDayRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListWorkedHoursByWeekDayRequestBuilder
         */
        public ListWorkedHoursByWeekDayRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listWorkedHoursByWeekDay
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkedHoursByWeekDayCall(from, to, employeeIdsIn, limit, page, _callback);
        }


        /**
         * Execute listWorkedHoursByWeekDay request
         * @return StatisticsListWorkedHoursByWeekDayResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public StatisticsListWorkedHoursByWeekDayResponse execute() throws ApiException {
            ApiResponse<StatisticsListWorkedHoursByWeekDayResponse> localVarResp = listWorkedHoursByWeekDayWithHttpInfo(from, to, employeeIdsIn, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkedHoursByWeekDay request with HTTP info returned
         * @return ApiResponse&lt;StatisticsListWorkedHoursByWeekDayResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatisticsListWorkedHoursByWeekDayResponse> executeWithHttpInfo() throws ApiException {
            return listWorkedHoursByWeekDayWithHttpInfo(from, to, employeeIdsIn, limit, page);
        }

        /**
         * Execute listWorkedHoursByWeekDay request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatisticsListWorkedHoursByWeekDayResponse> _callback) throws ApiException {
            return listWorkedHoursByWeekDayAsync(from, to, employeeIdsIn, limit, page, _callback);
        }
    }

    /**
     * List Worked Hours By Employee and Week Day
     * 
     * @param from Y-m-d (required)
     * @param to Y-m-d (required)
     * @return ListWorkedHoursByWeekDayRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkedHoursByWeekDayRequestBuilder listWorkedHoursByWeekDay(LocalDate from, LocalDate to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new ListWorkedHoursByWeekDayRequestBuilder(from, to);
    }
    private okhttp3.Call listWorkedNightHoursCall(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Boolean withChecks, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/reports/worked-night-hours";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeIdsIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "employeeIds[in]", employeeIdsIn));
        }

        if (withChecks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withChecks", withChecks));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkedNightHoursValidateBeforeCall(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Boolean withChecks, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling listWorkedNightHours(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling listWorkedNightHours(Async)");
        }

        return listWorkedNightHoursCall(from, to, employeeIdsIn, withChecks, limit, page, _callback);

    }


    private ApiResponse<StatisticsListWorkedNightHoursResponse> listWorkedNightHoursWithHttpInfo(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Boolean withChecks, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listWorkedNightHoursValidateBeforeCall(from, to, employeeIdsIn, withChecks, limit, page, null);
        Type localVarReturnType = new TypeToken<StatisticsListWorkedNightHoursResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkedNightHoursAsync(LocalDate from, LocalDate to, List<UUID> employeeIdsIn, Boolean withChecks, Integer limit, Integer page, final ApiCallback<StatisticsListWorkedNightHoursResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkedNightHoursValidateBeforeCall(from, to, employeeIdsIn, withChecks, limit, page, _callback);
        Type localVarReturnType = new TypeToken<StatisticsListWorkedNightHoursResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkedNightHoursRequestBuilder {
        private final LocalDate from;
        private final LocalDate to;
        private List<UUID> employeeIdsIn;
        private Boolean withChecks;
        private Integer limit;
        private Integer page;

        private ListWorkedNightHoursRequestBuilder(LocalDate from, LocalDate to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set employeeIdsIn
         * @param employeeIdsIn Array of employee ids (optional)
         * @return ListWorkedNightHoursRequestBuilder
         */
        public ListWorkedNightHoursRequestBuilder employeeIdsIn(List<UUID> employeeIdsIn) {
            this.employeeIdsIn = employeeIdsIn;
            return this;
        }
        
        /**
         * Set withChecks
         * @param withChecks true or false (optional)
         * @return ListWorkedNightHoursRequestBuilder
         */
        public ListWorkedNightHoursRequestBuilder withChecks(Boolean withChecks) {
            this.withChecks = withChecks;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit employees (optional)
         * @return ListWorkedNightHoursRequestBuilder
         */
        public ListWorkedNightHoursRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListWorkedNightHoursRequestBuilder
         */
        public ListWorkedNightHoursRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listWorkedNightHours
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkedNightHoursCall(from, to, employeeIdsIn, withChecks, limit, page, _callback);
        }


        /**
         * Execute listWorkedNightHours request
         * @return StatisticsListWorkedNightHoursResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public StatisticsListWorkedNightHoursResponse execute() throws ApiException {
            ApiResponse<StatisticsListWorkedNightHoursResponse> localVarResp = listWorkedNightHoursWithHttpInfo(from, to, employeeIdsIn, withChecks, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkedNightHours request with HTTP info returned
         * @return ApiResponse&lt;StatisticsListWorkedNightHoursResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatisticsListWorkedNightHoursResponse> executeWithHttpInfo() throws ApiException {
            return listWorkedNightHoursWithHttpInfo(from, to, employeeIdsIn, withChecks, limit, page);
        }

        /**
         * Execute listWorkedNightHours request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatisticsListWorkedNightHoursResponse> _callback) throws ApiException {
            return listWorkedNightHoursAsync(from, to, employeeIdsIn, withChecks, limit, page, _callback);
        }
    }

    /**
     * List Worked Hours By Employee In Night Hours
     * 
     * @param from Y-m-d (required)
     * @param to Y-m-d (required)
     * @return ListWorkedNightHoursRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListWorkedNightHoursRequestBuilder listWorkedNightHours(LocalDate from, LocalDate to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new ListWorkedNightHoursRequestBuilder(from, to);
    }
}
