/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.HolidayCalendarsCreateNewCalendarRequest;
import com.konfigthis.client.model.HolidayCalendarsCreateNewCalendarRequestDaysOffInner;
import com.konfigthis.client.model.HolidayCalendarsCreateNewCalendarResponse;
import com.konfigthis.client.model.HolidayCalendarsGetByIdResponse;
import com.konfigthis.client.model.HolidayCalendarsListCalendarResponse;
import com.konfigthis.client.model.HolidayCalendarsRemoveByIdResponse;
import com.konfigthis.client.model.HolidayCalendarsUpdateByIdRequest;
import com.konfigthis.client.model.HolidayCalendarsUpdateByIdRequestDaysOffInner;
import com.konfigthis.client.model.HolidayCalendarsUpdateByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HolidayCalendarsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HolidayCalendarsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HolidayCalendarsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCalendarCall(HolidayCalendarsCreateNewCalendarRequest holidayCalendarsCreateNewCalendarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = holidayCalendarsCreateNewCalendarRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/holiday-calendar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCalendarValidateBeforeCall(HolidayCalendarsCreateNewCalendarRequest holidayCalendarsCreateNewCalendarRequest, final ApiCallback _callback) throws ApiException {
        return createNewCalendarCall(holidayCalendarsCreateNewCalendarRequest, _callback);

    }


    private ApiResponse<HolidayCalendarsCreateNewCalendarResponse> createNewCalendarWithHttpInfo(HolidayCalendarsCreateNewCalendarRequest holidayCalendarsCreateNewCalendarRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewCalendarValidateBeforeCall(holidayCalendarsCreateNewCalendarRequest, null);
        Type localVarReturnType = new TypeToken<HolidayCalendarsCreateNewCalendarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewCalendarAsync(HolidayCalendarsCreateNewCalendarRequest holidayCalendarsCreateNewCalendarRequest, final ApiCallback<HolidayCalendarsCreateNewCalendarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCalendarValidateBeforeCall(holidayCalendarsCreateNewCalendarRequest, _callback);
        Type localVarReturnType = new TypeToken<HolidayCalendarsCreateNewCalendarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewCalendarRequestBuilder {
        private final String name;
        private final List<HolidayCalendarsCreateNewCalendarRequestDaysOffInner> daysOff;

        private CreateNewCalendarRequestBuilder(String name, List<HolidayCalendarsCreateNewCalendarRequestDaysOffInner> daysOff) {
            this.name = name;
            this.daysOff = daysOff;
        }

        /**
         * Build call for createNewCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HolidayCalendarsCreateNewCalendarRequest holidayCalendarsCreateNewCalendarRequest = buildBodyParams();
            return createNewCalendarCall(holidayCalendarsCreateNewCalendarRequest, _callback);
        }

        private HolidayCalendarsCreateNewCalendarRequest buildBodyParams() {
            HolidayCalendarsCreateNewCalendarRequest holidayCalendarsCreateNewCalendarRequest = new HolidayCalendarsCreateNewCalendarRequest();
            holidayCalendarsCreateNewCalendarRequest.name(this.name);
            holidayCalendarsCreateNewCalendarRequest.daysOff(this.daysOff);
            return holidayCalendarsCreateNewCalendarRequest;
        }

        /**
         * Execute createNewCalendar request
         * @return HolidayCalendarsCreateNewCalendarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public HolidayCalendarsCreateNewCalendarResponse execute() throws ApiException {
            HolidayCalendarsCreateNewCalendarRequest holidayCalendarsCreateNewCalendarRequest = buildBodyParams();
            ApiResponse<HolidayCalendarsCreateNewCalendarResponse> localVarResp = createNewCalendarWithHttpInfo(holidayCalendarsCreateNewCalendarRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewCalendar request with HTTP info returned
         * @return ApiResponse&lt;HolidayCalendarsCreateNewCalendarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidayCalendarsCreateNewCalendarResponse> executeWithHttpInfo() throws ApiException {
            HolidayCalendarsCreateNewCalendarRequest holidayCalendarsCreateNewCalendarRequest = buildBodyParams();
            return createNewCalendarWithHttpInfo(holidayCalendarsCreateNewCalendarRequest);
        }

        /**
         * Execute createNewCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidayCalendarsCreateNewCalendarResponse> _callback) throws ApiException {
            HolidayCalendarsCreateNewCalendarRequest holidayCalendarsCreateNewCalendarRequest = buildBodyParams();
            return createNewCalendarAsync(holidayCalendarsCreateNewCalendarRequest, _callback);
        }
    }

    /**
     * Create Holidays Calendar
     * 
     * @return CreateNewCalendarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewCalendarRequestBuilder createNewCalendar(String name, List<HolidayCalendarsCreateNewCalendarRequestDaysOffInner> daysOff) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (daysOff == null) throw new IllegalArgumentException("\"daysOff\" is required but got null");
        return new CreateNewCalendarRequestBuilder(name, daysOff);
    }
    private okhttp3.Call getByIdCall(UUID holidayCalendarId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/holiday-calendar/{holidayCalendarId}"
            .replace("{" + "holidayCalendarId" + "}", localVarApiClient.escapeString(holidayCalendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(UUID holidayCalendarId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'holidayCalendarId' is set
        if (holidayCalendarId == null) {
            throw new ApiException("Missing the required parameter 'holidayCalendarId' when calling getById(Async)");
        }

        return getByIdCall(holidayCalendarId, limit, page, _callback);

    }


    private ApiResponse<HolidayCalendarsGetByIdResponse> getByIdWithHttpInfo(UUID holidayCalendarId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(holidayCalendarId, limit, page, null);
        Type localVarReturnType = new TypeToken<HolidayCalendarsGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(UUID holidayCalendarId, Integer limit, Integer page, final ApiCallback<HolidayCalendarsGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(holidayCalendarId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<HolidayCalendarsGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final UUID holidayCalendarId;
        private Integer limit;
        private Integer page;

        private GetByIdRequestBuilder(UUID holidayCalendarId) {
            this.holidayCalendarId = holidayCalendarId;
        }

        /**
         * Set limit
         * @param limit Limit results (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(holidayCalendarId, limit, page, _callback);
        }


        /**
         * Execute getById request
         * @return HolidayCalendarsGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public HolidayCalendarsGetByIdResponse execute() throws ApiException {
            ApiResponse<HolidayCalendarsGetByIdResponse> localVarResp = getByIdWithHttpInfo(holidayCalendarId, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;HolidayCalendarsGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidayCalendarsGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(holidayCalendarId, limit, page);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidayCalendarsGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(holidayCalendarId, limit, page, _callback);
        }
    }

    /**
     * List Holiday Calendar
     * 
     * @param holidayCalendarId Holiday Calendar Id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(UUID holidayCalendarId) throws IllegalArgumentException {
        if (holidayCalendarId == null) throw new IllegalArgumentException("\"holidayCalendarId\" is required but got null");
            

        return new GetByIdRequestBuilder(holidayCalendarId);
    }
    private okhttp3.Call listCalendarCall(Integer limit, Integer page, String nameContains, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/holiday-calendar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (nameContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name[contains]", nameContains));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCalendarValidateBeforeCall(Integer limit, Integer page, String nameContains, final ApiCallback _callback) throws ApiException {
        return listCalendarCall(limit, page, nameContains, _callback);

    }


    private ApiResponse<HolidayCalendarsListCalendarResponse> listCalendarWithHttpInfo(Integer limit, Integer page, String nameContains) throws ApiException {
        okhttp3.Call localVarCall = listCalendarValidateBeforeCall(limit, page, nameContains, null);
        Type localVarReturnType = new TypeToken<HolidayCalendarsListCalendarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCalendarAsync(Integer limit, Integer page, String nameContains, final ApiCallback<HolidayCalendarsListCalendarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCalendarValidateBeforeCall(limit, page, nameContains, _callback);
        Type localVarReturnType = new TypeToken<HolidayCalendarsListCalendarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCalendarRequestBuilder {
        private Integer limit;
        private Integer page;
        private String nameContains;

        private ListCalendarRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Limit results (optional, default to 20)
         * @return ListCalendarRequestBuilder
         */
        public ListCalendarRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListCalendarRequestBuilder
         */
        public ListCalendarRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set nameContains
         * @param nameContains Filter by name (optional)
         * @return ListCalendarRequestBuilder
         */
        public ListCalendarRequestBuilder nameContains(String nameContains) {
            this.nameContains = nameContains;
            return this;
        }
        
        /**
         * Build call for listCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCalendarCall(limit, page, nameContains, _callback);
        }


        /**
         * Execute listCalendar request
         * @return HolidayCalendarsListCalendarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public HolidayCalendarsListCalendarResponse execute() throws ApiException {
            ApiResponse<HolidayCalendarsListCalendarResponse> localVarResp = listCalendarWithHttpInfo(limit, page, nameContains);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCalendar request with HTTP info returned
         * @return ApiResponse&lt;HolidayCalendarsListCalendarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidayCalendarsListCalendarResponse> executeWithHttpInfo() throws ApiException {
            return listCalendarWithHttpInfo(limit, page, nameContains);
        }

        /**
         * Execute listCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidayCalendarsListCalendarResponse> _callback) throws ApiException {
            return listCalendarAsync(limit, page, nameContains, _callback);
        }
    }

    /**
     * List Holidays Calendar
     * 
     * @return ListCalendarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListCalendarRequestBuilder listCalendar() throws IllegalArgumentException {
        return new ListCalendarRequestBuilder();
    }
    private okhttp3.Call removeByIdCall(UUID holidayCalendarId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/holiday-calendar/{holidayCalendarId}"
            .replace("{" + "holidayCalendarId" + "}", localVarApiClient.escapeString(holidayCalendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(UUID holidayCalendarId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'holidayCalendarId' is set
        if (holidayCalendarId == null) {
            throw new ApiException("Missing the required parameter 'holidayCalendarId' when calling removeById(Async)");
        }

        return removeByIdCall(holidayCalendarId, _callback);

    }


    private ApiResponse<HolidayCalendarsRemoveByIdResponse> removeByIdWithHttpInfo(UUID holidayCalendarId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(holidayCalendarId, null);
        Type localVarReturnType = new TypeToken<HolidayCalendarsRemoveByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeByIdAsync(UUID holidayCalendarId, final ApiCallback<HolidayCalendarsRemoveByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(holidayCalendarId, _callback);
        Type localVarReturnType = new TypeToken<HolidayCalendarsRemoveByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final UUID holidayCalendarId;

        private RemoveByIdRequestBuilder(UUID holidayCalendarId) {
            this.holidayCalendarId = holidayCalendarId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(holidayCalendarId, _callback);
        }


        /**
         * Execute removeById request
         * @return HolidayCalendarsRemoveByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public HolidayCalendarsRemoveByIdResponse execute() throws ApiException {
            ApiResponse<HolidayCalendarsRemoveByIdResponse> localVarResp = removeByIdWithHttpInfo(holidayCalendarId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;HolidayCalendarsRemoveByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidayCalendarsRemoveByIdResponse> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(holidayCalendarId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidayCalendarsRemoveByIdResponse> _callback) throws ApiException {
            return removeByIdAsync(holidayCalendarId, _callback);
        }
    }

    /**
     * Delete Holidays Calendar
     * 
     * @param holidayCalendarId Holiday Calendar Id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(UUID holidayCalendarId) throws IllegalArgumentException {
        if (holidayCalendarId == null) throw new IllegalArgumentException("\"holidayCalendarId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(holidayCalendarId);
    }
    private okhttp3.Call updateByIdCall(UUID holidayCalendarId, HolidayCalendarsUpdateByIdRequest holidayCalendarsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = holidayCalendarsUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/holiday-calendar/{holidayCalendarId}"
            .replace("{" + "holidayCalendarId" + "}", localVarApiClient.escapeString(holidayCalendarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(UUID holidayCalendarId, HolidayCalendarsUpdateByIdRequest holidayCalendarsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'holidayCalendarId' is set
        if (holidayCalendarId == null) {
            throw new ApiException("Missing the required parameter 'holidayCalendarId' when calling updateById(Async)");
        }

        // verify the required parameter 'holidayCalendarsUpdateByIdRequest' is set
        if (holidayCalendarsUpdateByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'holidayCalendarsUpdateByIdRequest' when calling updateById(Async)");
        }

        return updateByIdCall(holidayCalendarId, holidayCalendarsUpdateByIdRequest, _callback);

    }


    private ApiResponse<HolidayCalendarsUpdateByIdResponse> updateByIdWithHttpInfo(UUID holidayCalendarId, HolidayCalendarsUpdateByIdRequest holidayCalendarsUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(holidayCalendarId, holidayCalendarsUpdateByIdRequest, null);
        Type localVarReturnType = new TypeToken<HolidayCalendarsUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(UUID holidayCalendarId, HolidayCalendarsUpdateByIdRequest holidayCalendarsUpdateByIdRequest, final ApiCallback<HolidayCalendarsUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(holidayCalendarId, holidayCalendarsUpdateByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<HolidayCalendarsUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String name;
        private final List<HolidayCalendarsUpdateByIdRequestDaysOffInner> daysOff;
        private final UUID holidayCalendarId;

        private UpdateByIdRequestBuilder(String name, List<HolidayCalendarsUpdateByIdRequestDaysOffInner> daysOff, UUID holidayCalendarId) {
            this.name = name;
            this.daysOff = daysOff;
            this.holidayCalendarId = holidayCalendarId;
        }

        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HolidayCalendarsUpdateByIdRequest holidayCalendarsUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(holidayCalendarId, holidayCalendarsUpdateByIdRequest, _callback);
        }

        private HolidayCalendarsUpdateByIdRequest buildBodyParams() {
            HolidayCalendarsUpdateByIdRequest holidayCalendarsUpdateByIdRequest = new HolidayCalendarsUpdateByIdRequest();
            holidayCalendarsUpdateByIdRequest.name(this.name);
            holidayCalendarsUpdateByIdRequest.daysOff(this.daysOff);
            return holidayCalendarsUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @return HolidayCalendarsUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public HolidayCalendarsUpdateByIdResponse execute() throws ApiException {
            HolidayCalendarsUpdateByIdRequest holidayCalendarsUpdateByIdRequest = buildBodyParams();
            ApiResponse<HolidayCalendarsUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(holidayCalendarId, holidayCalendarsUpdateByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;HolidayCalendarsUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HolidayCalendarsUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            HolidayCalendarsUpdateByIdRequest holidayCalendarsUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(holidayCalendarId, holidayCalendarsUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HolidayCalendarsUpdateByIdResponse> _callback) throws ApiException {
            HolidayCalendarsUpdateByIdRequest holidayCalendarsUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(holidayCalendarId, holidayCalendarsUpdateByIdRequest, _callback);
        }
    }

    /**
     * Update Holidays Calendar
     * 
     * @param holidayCalendarId Holiday Calendar Id (required)
     * @param holidayCalendarsUpdateByIdRequest Custom field object that needs to be updated (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String name, List<HolidayCalendarsUpdateByIdRequestDaysOffInner> daysOff, UUID holidayCalendarId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (daysOff == null) throw new IllegalArgumentException("\"daysOff\" is required but got null");
        if (holidayCalendarId == null) throw new IllegalArgumentException("\"holidayCalendarId\" is required but got null");
            

        return new UpdateByIdRequestBuilder(name, daysOff, holidayCalendarId);
    }
}
