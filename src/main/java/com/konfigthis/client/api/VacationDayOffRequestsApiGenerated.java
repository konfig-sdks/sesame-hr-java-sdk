/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import java.util.UUID;
import com.konfigthis.client.model.VacationCalendarsCreateNewCalendarRequestDaysOffInner;
import com.konfigthis.client.model.VacationDayOffRequestsAcceptRequestRequest;
import com.konfigthis.client.model.VacationDayOffRequestsAcceptRequestResponse;
import com.konfigthis.client.model.VacationDayOffRequestsCreateRequestRequest;
import com.konfigthis.client.model.VacationDayOffRequestsCreateRequestResponse;
import com.konfigthis.client.model.VacationDayOffRequestsDeleteByIdResponse;
import com.konfigthis.client.model.VacationDayOffRequestsListResponse;
import com.konfigthis.client.model.VacationDayOffRequestsRejectRequestRequest;
import com.konfigthis.client.model.VacationDayOffRequestsRejectRequestResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VacationDayOffRequestsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VacationDayOffRequestsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VacationDayOffRequestsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call acceptRequestCall(UUID id, VacationDayOffRequestsAcceptRequestRequest vacationDayOffRequestsAcceptRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vacationDayOffRequestsAcceptRequestRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/vacation-day-off-requests/{id}/accept"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptRequestValidateBeforeCall(UUID id, VacationDayOffRequestsAcceptRequestRequest vacationDayOffRequestsAcceptRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling acceptRequest(Async)");
        }

        return acceptRequestCall(id, vacationDayOffRequestsAcceptRequestRequest, _callback);

    }


    private ApiResponse<VacationDayOffRequestsAcceptRequestResponse> acceptRequestWithHttpInfo(UUID id, VacationDayOffRequestsAcceptRequestRequest vacationDayOffRequestsAcceptRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = acceptRequestValidateBeforeCall(id, vacationDayOffRequestsAcceptRequestRequest, null);
        Type localVarReturnType = new TypeToken<VacationDayOffRequestsAcceptRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call acceptRequestAsync(UUID id, VacationDayOffRequestsAcceptRequestRequest vacationDayOffRequestsAcceptRequestRequest, final ApiCallback<VacationDayOffRequestsAcceptRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptRequestValidateBeforeCall(id, vacationDayOffRequestsAcceptRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<VacationDayOffRequestsAcceptRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AcceptRequestRequestBuilder {
        private final UUID id;
        private UUID managerId;

        private AcceptRequestRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Set managerId
         * @param managerId  (optional)
         * @return AcceptRequestRequestBuilder
         */
        public AcceptRequestRequestBuilder managerId(UUID managerId) {
            this.managerId = managerId;
            return this;
        }
        
        /**
         * Build call for acceptRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VacationDayOffRequestsAcceptRequestRequest vacationDayOffRequestsAcceptRequestRequest = buildBodyParams();
            return acceptRequestCall(id, vacationDayOffRequestsAcceptRequestRequest, _callback);
        }

        private VacationDayOffRequestsAcceptRequestRequest buildBodyParams() {
            VacationDayOffRequestsAcceptRequestRequest vacationDayOffRequestsAcceptRequestRequest = new VacationDayOffRequestsAcceptRequestRequest();
            vacationDayOffRequestsAcceptRequestRequest.managerId(this.managerId);
            return vacationDayOffRequestsAcceptRequestRequest;
        }

        /**
         * Execute acceptRequest request
         * @return VacationDayOffRequestsAcceptRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public VacationDayOffRequestsAcceptRequestResponse execute() throws ApiException {
            VacationDayOffRequestsAcceptRequestRequest vacationDayOffRequestsAcceptRequestRequest = buildBodyParams();
            ApiResponse<VacationDayOffRequestsAcceptRequestResponse> localVarResp = acceptRequestWithHttpInfo(id, vacationDayOffRequestsAcceptRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute acceptRequest request with HTTP info returned
         * @return ApiResponse&lt;VacationDayOffRequestsAcceptRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VacationDayOffRequestsAcceptRequestResponse> executeWithHttpInfo() throws ApiException {
            VacationDayOffRequestsAcceptRequestRequest vacationDayOffRequestsAcceptRequestRequest = buildBodyParams();
            return acceptRequestWithHttpInfo(id, vacationDayOffRequestsAcceptRequestRequest);
        }

        /**
         * Execute acceptRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VacationDayOffRequestsAcceptRequestResponse> _callback) throws ApiException {
            VacationDayOffRequestsAcceptRequestRequest vacationDayOffRequestsAcceptRequestRequest = buildBodyParams();
            return acceptRequestAsync(id, vacationDayOffRequestsAcceptRequestRequest, _callback);
        }
    }

    /**
     * Accept Vacation Day Off Request
     * 
     * @param id Day Off Request Id (required)
     * @return AcceptRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public AcceptRequestRequestBuilder acceptRequest(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AcceptRequestRequestBuilder(id);
    }
    private okhttp3.Call createRequestCall(VacationDayOffRequestsCreateRequestRequest vacationDayOffRequestsCreateRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vacationDayOffRequestsCreateRequestRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/vacation-day-off-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRequestValidateBeforeCall(VacationDayOffRequestsCreateRequestRequest vacationDayOffRequestsCreateRequestRequest, final ApiCallback _callback) throws ApiException {
        return createRequestCall(vacationDayOffRequestsCreateRequestRequest, _callback);

    }


    private ApiResponse<VacationDayOffRequestsCreateRequestResponse> createRequestWithHttpInfo(VacationDayOffRequestsCreateRequestRequest vacationDayOffRequestsCreateRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = createRequestValidateBeforeCall(vacationDayOffRequestsCreateRequestRequest, null);
        Type localVarReturnType = new TypeToken<VacationDayOffRequestsCreateRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRequestAsync(VacationDayOffRequestsCreateRequestRequest vacationDayOffRequestsCreateRequestRequest, final ApiCallback<VacationDayOffRequestsCreateRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRequestValidateBeforeCall(vacationDayOffRequestsCreateRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<VacationDayOffRequestsCreateRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestRequestBuilder {
        private final UUID employeeId;
        private final UUID calendarId;
        private final String type;
        private final List<VacationCalendarsCreateNewCalendarRequestDaysOffInner> daysOff;
        private String comment;

        private CreateRequestRequestBuilder(UUID employeeId, UUID calendarId, String type, List<VacationCalendarsCreateNewCalendarRequestDaysOffInner> daysOff) {
            this.employeeId = employeeId;
            this.calendarId = calendarId;
            this.type = type;
            this.daysOff = daysOff;
        }

        /**
         * Set comment
         * @param comment  (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Build call for createRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VacationDayOffRequestsCreateRequestRequest vacationDayOffRequestsCreateRequestRequest = buildBodyParams();
            return createRequestCall(vacationDayOffRequestsCreateRequestRequest, _callback);
        }

        private VacationDayOffRequestsCreateRequestRequest buildBodyParams() {
            VacationDayOffRequestsCreateRequestRequest vacationDayOffRequestsCreateRequestRequest = new VacationDayOffRequestsCreateRequestRequest();
            vacationDayOffRequestsCreateRequestRequest.employeeId(this.employeeId);
            vacationDayOffRequestsCreateRequestRequest.calendarId(this.calendarId);
            if (this.type != null)
            vacationDayOffRequestsCreateRequestRequest.type(VacationDayOffRequestsCreateRequestRequest.TypeEnum.fromValue(this.type));
            vacationDayOffRequestsCreateRequestRequest.daysOff(this.daysOff);
            vacationDayOffRequestsCreateRequestRequest.comment(this.comment);
            return vacationDayOffRequestsCreateRequestRequest;
        }

        /**
         * Execute createRequest request
         * @return VacationDayOffRequestsCreateRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public VacationDayOffRequestsCreateRequestResponse execute() throws ApiException {
            VacationDayOffRequestsCreateRequestRequest vacationDayOffRequestsCreateRequestRequest = buildBodyParams();
            ApiResponse<VacationDayOffRequestsCreateRequestResponse> localVarResp = createRequestWithHttpInfo(vacationDayOffRequestsCreateRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRequest request with HTTP info returned
         * @return ApiResponse&lt;VacationDayOffRequestsCreateRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VacationDayOffRequestsCreateRequestResponse> executeWithHttpInfo() throws ApiException {
            VacationDayOffRequestsCreateRequestRequest vacationDayOffRequestsCreateRequestRequest = buildBodyParams();
            return createRequestWithHttpInfo(vacationDayOffRequestsCreateRequestRequest);
        }

        /**
         * Execute createRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VacationDayOffRequestsCreateRequestResponse> _callback) throws ApiException {
            VacationDayOffRequestsCreateRequestRequest vacationDayOffRequestsCreateRequestRequest = buildBodyParams();
            return createRequestAsync(vacationDayOffRequestsCreateRequestRequest, _callback);
        }
    }

    /**
     * Create Vacation Day Off Request
     * 
     * @return CreateRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestRequestBuilder createRequest(UUID employeeId, UUID calendarId, String type, List<VacationCalendarsCreateNewCalendarRequestDaysOffInner> daysOff) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (calendarId == null) throw new IllegalArgumentException("\"calendarId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (daysOff == null) throw new IllegalArgumentException("\"daysOff\" is required but got null");
        return new CreateRequestRequestBuilder(employeeId, calendarId, type, daysOff);
    }
    private okhttp3.Call deleteByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/vacation-day-off-requests/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteById(Async)");
        }

        return deleteByIdCall(id, _callback);

    }


    private ApiResponse<VacationDayOffRequestsDeleteByIdResponse> deleteByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VacationDayOffRequestsDeleteByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByIdAsync(UUID id, final ApiCallback<VacationDayOffRequestsDeleteByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VacationDayOffRequestsDeleteByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final UUID id;

        private DeleteByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(id, _callback);
        }


        /**
         * Execute deleteById request
         * @return VacationDayOffRequestsDeleteByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public VacationDayOffRequestsDeleteByIdResponse execute() throws ApiException {
            ApiResponse<VacationDayOffRequestsDeleteByIdResponse> localVarResp = deleteByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;VacationDayOffRequestsDeleteByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VacationDayOffRequestsDeleteByIdResponse> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VacationDayOffRequestsDeleteByIdResponse> _callback) throws ApiException {
            return deleteByIdAsync(id, _callback);
        }
    }

    /**
     * Delete Vacation Day Off Request
     * 
     * @param id Day Off Request Id (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteByIdRequestBuilder(id);
    }
    private okhttp3.Call listCall(UUID employeeId, UUID absencesValidator, LocalDate fromDayOff, LocalDate toDayOff, String status, Integer page, Integer limit, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/vacation-day-off-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (absencesValidator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("absencesValidator", absencesValidator));
        }

        if (fromDayOff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDayOff", fromDayOff));
        }

        if (toDayOff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDayOff", toDayOff));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(UUID employeeId, UUID absencesValidator, LocalDate fromDayOff, LocalDate toDayOff, String status, Integer page, Integer limit, String orderBy, final ApiCallback _callback) throws ApiException {
        return listCall(employeeId, absencesValidator, fromDayOff, toDayOff, status, page, limit, orderBy, _callback);

    }


    private ApiResponse<VacationDayOffRequestsListResponse> listWithHttpInfo(UUID employeeId, UUID absencesValidator, LocalDate fromDayOff, LocalDate toDayOff, String status, Integer page, Integer limit, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, absencesValidator, fromDayOff, toDayOff, status, page, limit, orderBy, null);
        Type localVarReturnType = new TypeToken<VacationDayOffRequestsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(UUID employeeId, UUID absencesValidator, LocalDate fromDayOff, LocalDate toDayOff, String status, Integer page, Integer limit, String orderBy, final ApiCallback<VacationDayOffRequestsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, absencesValidator, fromDayOff, toDayOff, status, page, limit, orderBy, _callback);
        Type localVarReturnType = new TypeToken<VacationDayOffRequestsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private UUID employeeId;
        private UUID absencesValidator;
        private LocalDate fromDayOff;
        private LocalDate toDayOff;
        private String status;
        private Integer page;
        private Integer limit;
        private String orderBy;

        private ListRequestBuilder() {
        }

        /**
         * Set employeeId
         * @param employeeId The id of the employee (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder employeeId(UUID employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set absencesValidator
         * @param absencesValidator The id of the manager (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder absencesValidator(UUID absencesValidator) {
            this.absencesValidator = absencesValidator;
            return this;
        }
        
        /**
         * Set fromDayOff
         * @param fromDayOff First day of search period (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder fromDayOff(LocalDate fromDayOff) {
            this.fromDayOff = fromDayOff;
            return this;
        }
        
        /**
         * Set toDayOff
         * @param toDayOff Last day of search period (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder toDayOff(LocalDate toDayOff) {
            this.toDayOff = toDayOff;
            return this;
        }
        
        /**
         * Set status
         * @param status Request status (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit vacation requests (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy field1 asc, field2 desc (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(employeeId, absencesValidator, fromDayOff, toDayOff, status, page, limit, orderBy, _callback);
        }


        /**
         * Execute list request
         * @return VacationDayOffRequestsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public VacationDayOffRequestsListResponse execute() throws ApiException {
            ApiResponse<VacationDayOffRequestsListResponse> localVarResp = listWithHttpInfo(employeeId, absencesValidator, fromDayOff, toDayOff, status, page, limit, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;VacationDayOffRequestsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VacationDayOffRequestsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(employeeId, absencesValidator, fromDayOff, toDayOff, status, page, limit, orderBy);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VacationDayOffRequestsListResponse> _callback) throws ApiException {
            return listAsync(employeeId, absencesValidator, fromDayOff, toDayOff, status, page, limit, orderBy, _callback);
        }
    }

    /**
     * List Vacation Day Off Requests
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call rejectRequestCall(UUID id, VacationDayOffRequestsRejectRequestRequest vacationDayOffRequestsRejectRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vacationDayOffRequestsRejectRequestRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/vacation-day-off-requests/{id}/reject"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectRequestValidateBeforeCall(UUID id, VacationDayOffRequestsRejectRequestRequest vacationDayOffRequestsRejectRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rejectRequest(Async)");
        }

        return rejectRequestCall(id, vacationDayOffRequestsRejectRequestRequest, _callback);

    }


    private ApiResponse<VacationDayOffRequestsRejectRequestResponse> rejectRequestWithHttpInfo(UUID id, VacationDayOffRequestsRejectRequestRequest vacationDayOffRequestsRejectRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = rejectRequestValidateBeforeCall(id, vacationDayOffRequestsRejectRequestRequest, null);
        Type localVarReturnType = new TypeToken<VacationDayOffRequestsRejectRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rejectRequestAsync(UUID id, VacationDayOffRequestsRejectRequestRequest vacationDayOffRequestsRejectRequestRequest, final ApiCallback<VacationDayOffRequestsRejectRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectRequestValidateBeforeCall(id, vacationDayOffRequestsRejectRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<VacationDayOffRequestsRejectRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RejectRequestRequestBuilder {
        private final UUID id;
        private String resolutionComment;
        private UUID managerId;

        private RejectRequestRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Set resolutionComment
         * @param resolutionComment  (optional)
         * @return RejectRequestRequestBuilder
         */
        public RejectRequestRequestBuilder resolutionComment(String resolutionComment) {
            this.resolutionComment = resolutionComment;
            return this;
        }
        
        /**
         * Set managerId
         * @param managerId  (optional)
         * @return RejectRequestRequestBuilder
         */
        public RejectRequestRequestBuilder managerId(UUID managerId) {
            this.managerId = managerId;
            return this;
        }
        
        /**
         * Build call for rejectRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VacationDayOffRequestsRejectRequestRequest vacationDayOffRequestsRejectRequestRequest = buildBodyParams();
            return rejectRequestCall(id, vacationDayOffRequestsRejectRequestRequest, _callback);
        }

        private VacationDayOffRequestsRejectRequestRequest buildBodyParams() {
            VacationDayOffRequestsRejectRequestRequest vacationDayOffRequestsRejectRequestRequest = new VacationDayOffRequestsRejectRequestRequest();
            vacationDayOffRequestsRejectRequestRequest.resolutionComment(this.resolutionComment);
            vacationDayOffRequestsRejectRequestRequest.managerId(this.managerId);
            return vacationDayOffRequestsRejectRequestRequest;
        }

        /**
         * Execute rejectRequest request
         * @return VacationDayOffRequestsRejectRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public VacationDayOffRequestsRejectRequestResponse execute() throws ApiException {
            VacationDayOffRequestsRejectRequestRequest vacationDayOffRequestsRejectRequestRequest = buildBodyParams();
            ApiResponse<VacationDayOffRequestsRejectRequestResponse> localVarResp = rejectRequestWithHttpInfo(id, vacationDayOffRequestsRejectRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rejectRequest request with HTTP info returned
         * @return ApiResponse&lt;VacationDayOffRequestsRejectRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VacationDayOffRequestsRejectRequestResponse> executeWithHttpInfo() throws ApiException {
            VacationDayOffRequestsRejectRequestRequest vacationDayOffRequestsRejectRequestRequest = buildBodyParams();
            return rejectRequestWithHttpInfo(id, vacationDayOffRequestsRejectRequestRequest);
        }

        /**
         * Execute rejectRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VacationDayOffRequestsRejectRequestResponse> _callback) throws ApiException {
            VacationDayOffRequestsRejectRequestRequest vacationDayOffRequestsRejectRequestRequest = buildBodyParams();
            return rejectRequestAsync(id, vacationDayOffRequestsRejectRequestRequest, _callback);
        }
    }

    /**
     * Reject Vacation Day Off Request
     * 
     * @param id Day Off Request Id (required)
     * @return RejectRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public RejectRequestRequestBuilder rejectRequest(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RejectRequestRequestBuilder(id);
    }
}
