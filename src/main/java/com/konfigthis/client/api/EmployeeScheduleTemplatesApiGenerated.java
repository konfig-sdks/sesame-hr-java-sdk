/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest;
import com.konfigthis.client.model.EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse;
import com.konfigthis.client.model.EmployeeScheduleTemplatesListTemplatesResponse;
import com.konfigthis.client.model.EmployeeScheduleTemplatesUnassignResponse;
import java.time.LocalDate;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeScheduleTemplatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeScheduleTemplatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeScheduleTemplatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEmployeeScheduleTemplateCall(EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/entity-schedule-templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmployeeScheduleTemplateValidateBeforeCall(EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest' is set
        if (employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest' when calling createEmployeeScheduleTemplate(Async)");
        }

        return createEmployeeScheduleTemplateCall(employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest, _callback);

    }


    private ApiResponse<EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse> createEmployeeScheduleTemplateWithHttpInfo(EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmployeeScheduleTemplateValidateBeforeCall(employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmployeeScheduleTemplateAsync(EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest, final ApiCallback<EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmployeeScheduleTemplateValidateBeforeCall(employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmployeeScheduleTemplateRequestBuilder {
        private final UUID employeeId;
        private final UUID scheduleTemplateId;
        private final LocalDate startDate;
        private LocalDate endDate;

        private CreateEmployeeScheduleTemplateRequestBuilder(UUID employeeId, UUID scheduleTemplateId, LocalDate startDate) {
            this.employeeId = employeeId;
            this.scheduleTemplateId = scheduleTemplateId;
            this.startDate = startDate;
        }

        /**
         * Set endDate
         * @param endDate End date (optional)
         * @return CreateEmployeeScheduleTemplateRequestBuilder
         */
        public CreateEmployeeScheduleTemplateRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Build call for createEmployeeScheduleTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee schedule template created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest = buildBodyParams();
            return createEmployeeScheduleTemplateCall(employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest, _callback);
        }

        private EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest buildBodyParams() {
            EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest = new EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest();
            employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest.employeeId(this.employeeId);
            employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest.scheduleTemplateId(this.scheduleTemplateId);
            employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest.startDate(this.startDate);
            employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest.endDate(this.endDate);
            return employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest;
        }

        /**
         * Execute createEmployeeScheduleTemplate request
         * @return EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee schedule template created </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse execute() throws ApiException {
            EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest = buildBodyParams();
            ApiResponse<EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse> localVarResp = createEmployeeScheduleTemplateWithHttpInfo(employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmployeeScheduleTemplate request with HTTP info returned
         * @return ApiResponse&lt;EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee schedule template created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest = buildBodyParams();
            return createEmployeeScheduleTemplateWithHttpInfo(employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest);
        }

        /**
         * Execute createEmployeeScheduleTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee schedule template created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateResponse> _callback) throws ApiException {
            EmployeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest = buildBodyParams();
            return createEmployeeScheduleTemplateAsync(employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest, _callback);
        }
    }

    /**
     * Create employee schedule template
     * Assign employee to schedule template
     * @param employeeScheduleTemplatesCreateEmployeeScheduleTemplateRequest Data to create a employee schedule template (required)
     * @return CreateEmployeeScheduleTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee schedule template created </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmployeeScheduleTemplateRequestBuilder createEmployeeScheduleTemplate(UUID employeeId, UUID scheduleTemplateId, LocalDate startDate) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (scheduleTemplateId == null) throw new IllegalArgumentException("\"scheduleTemplateId\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        return new CreateEmployeeScheduleTemplateRequestBuilder(employeeId, scheduleTemplateId, startDate);
    }
    private okhttp3.Call listTemplatesCall(UUID employeeId, LocalDate from, LocalDate to, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/employees/{employeeId}/schedule-templates"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTemplatesValidateBeforeCall(UUID employeeId, LocalDate from, LocalDate to, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listTemplates(Async)");
        }

        return listTemplatesCall(employeeId, from, to, limit, page, _callback);

    }


    private ApiResponse<EmployeeScheduleTemplatesListTemplatesResponse> listTemplatesWithHttpInfo(UUID employeeId, LocalDate from, LocalDate to, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(employeeId, from, to, limit, page, null);
        Type localVarReturnType = new TypeToken<EmployeeScheduleTemplatesListTemplatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTemplatesAsync(UUID employeeId, LocalDate from, LocalDate to, Integer limit, Integer page, final ApiCallback<EmployeeScheduleTemplatesListTemplatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTemplatesValidateBeforeCall(employeeId, from, to, limit, page, _callback);
        Type localVarReturnType = new TypeToken<EmployeeScheduleTemplatesListTemplatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTemplatesRequestBuilder {
        private final UUID employeeId;
        private LocalDate from;
        private LocalDate to;
        private Integer limit;
        private Integer page;

        private ListTemplatesRequestBuilder(UUID employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set from
         * @param from  (optional)
         * @return ListTemplatesRequestBuilder
         */
        public ListTemplatesRequestBuilder from(LocalDate from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to  (optional)
         * @return ListTemplatesRequestBuilder
         */
        public ListTemplatesRequestBuilder to(LocalDate to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit results (optional)
         * @return ListTemplatesRequestBuilder
         */
        public ListTemplatesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListTemplatesRequestBuilder
         */
        public ListTemplatesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee to schedule templates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTemplatesCall(employeeId, from, to, limit, page, _callback);
        }


        /**
         * Execute listTemplates request
         * @return EmployeeScheduleTemplatesListTemplatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee to schedule templates </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeScheduleTemplatesListTemplatesResponse execute() throws ApiException {
            ApiResponse<EmployeeScheduleTemplatesListTemplatesResponse> localVarResp = listTemplatesWithHttpInfo(employeeId, from, to, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTemplates request with HTTP info returned
         * @return ApiResponse&lt;EmployeeScheduleTemplatesListTemplatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee to schedule templates </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeScheduleTemplatesListTemplatesResponse> executeWithHttpInfo() throws ApiException {
            return listTemplatesWithHttpInfo(employeeId, from, to, limit, page);
        }

        /**
         * Execute listTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employee to schedule templates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeScheduleTemplatesListTemplatesResponse> _callback) throws ApiException {
            return listTemplatesAsync(employeeId, from, to, limit, page, _callback);
        }
    }

    /**
     * List employee schedule template
     * List employee schedule template
     * @param employeeId Employee ID (required)
     * @return ListTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of employee to schedule templates </td><td>  -  </td></tr>
     </table>
     */
    public ListTemplatesRequestBuilder listTemplates(UUID employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListTemplatesRequestBuilder(employeeId);
    }
    private okhttp3.Call unassignCall(UUID entityScheduleTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/entity-schedule-templates/{entityScheduleTemplateId}"
            .replace("{" + "entityScheduleTemplateId" + "}", localVarApiClient.escapeString(entityScheduleTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignValidateBeforeCall(UUID entityScheduleTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityScheduleTemplateId' is set
        if (entityScheduleTemplateId == null) {
            throw new ApiException("Missing the required parameter 'entityScheduleTemplateId' when calling unassign(Async)");
        }

        return unassignCall(entityScheduleTemplateId, _callback);

    }


    private ApiResponse<EmployeeScheduleTemplatesUnassignResponse> unassignWithHttpInfo(UUID entityScheduleTemplateId) throws ApiException {
        okhttp3.Call localVarCall = unassignValidateBeforeCall(entityScheduleTemplateId, null);
        Type localVarReturnType = new TypeToken<EmployeeScheduleTemplatesUnassignResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unassignAsync(UUID entityScheduleTemplateId, final ApiCallback<EmployeeScheduleTemplatesUnassignResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignValidateBeforeCall(entityScheduleTemplateId, _callback);
        Type localVarReturnType = new TypeToken<EmployeeScheduleTemplatesUnassignResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnassignRequestBuilder {
        private final UUID entityScheduleTemplateId;

        private UnassignRequestBuilder(UUID entityScheduleTemplateId) {
            this.entityScheduleTemplateId = entityScheduleTemplateId;
        }

        /**
         * Build call for unassign
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee schedule template deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unassignCall(entityScheduleTemplateId, _callback);
        }


        /**
         * Execute unassign request
         * @return EmployeeScheduleTemplatesUnassignResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee schedule template deleted </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeScheduleTemplatesUnassignResponse execute() throws ApiException {
            ApiResponse<EmployeeScheduleTemplatesUnassignResponse> localVarResp = unassignWithHttpInfo(entityScheduleTemplateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unassign request with HTTP info returned
         * @return ApiResponse&lt;EmployeeScheduleTemplatesUnassignResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee schedule template deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeScheduleTemplatesUnassignResponse> executeWithHttpInfo() throws ApiException {
            return unassignWithHttpInfo(entityScheduleTemplateId);
        }

        /**
         * Execute unassign request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee schedule template deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeScheduleTemplatesUnassignResponse> _callback) throws ApiException {
            return unassignAsync(entityScheduleTemplateId, _callback);
        }
    }

    /**
     * Delete employee schedule template
     * Unassign employee to schedule template
     * @param entityScheduleTemplateId Employee schedule template UUID (required)
     * @return UnassignRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee schedule template deleted </td><td>  -  </td></tr>
     </table>
     */
    public UnassignRequestBuilder unassign(UUID entityScheduleTemplateId) throws IllegalArgumentException {
        if (entityScheduleTemplateId == null) throw new IllegalArgumentException("\"entityScheduleTemplateId\" is required but got null");
            

        return new UnassignRequestBuilder(entityScheduleTemplateId);
    }
}
