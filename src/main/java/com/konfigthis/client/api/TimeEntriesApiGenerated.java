/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.TimeEntriesCreateNewEntryRequest;
import com.konfigthis.client.model.TimeEntriesCreateNewEntryRequestTimeEntryIn;
import com.konfigthis.client.model.TimeEntriesCreateNewEntryRequestTimeEntryOut;
import com.konfigthis.client.model.TimeEntriesCreateNewEntryResponse;
import com.konfigthis.client.model.TimeEntriesDeleteByIdResponse;
import com.konfigthis.client.model.TimeEntriesListResponse;
import com.konfigthis.client.model.TimeEntriesStartEntryRequest;
import com.konfigthis.client.model.TimeEntriesStartEntryResponse;
import com.konfigthis.client.model.TimeEntriesStopTimeEntryOutRequest;
import com.konfigthis.client.model.TimeEntriesStopTimeEntryOutRequestCoordinates;
import com.konfigthis.client.model.TimeEntriesStopTimeEntryOutResponse;
import com.konfigthis.client.model.TimeEntriesUpdateEntryRequest;
import com.konfigthis.client.model.TimeEntriesUpdateEntryRequestTimeEntryIn;
import com.konfigthis.client.model.TimeEntriesUpdateEntryRequestTimeEntryOut;
import com.konfigthis.client.model.TimeEntriesUpdateEntryResponse;
import java.util.UUID;
import com.konfigthis.client.model.WorkEntriesStartNewEntryRequestWorkEntryInCoordinates;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeEntriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeEntriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeEntriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewEntryCall(TimeEntriesCreateNewEntryRequest timeEntriesCreateNewEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeEntriesCreateNewEntryRequest;

        // create path and map variables
        String localVarPath = "/project/v1/time-entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewEntryValidateBeforeCall(TimeEntriesCreateNewEntryRequest timeEntriesCreateNewEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeEntriesCreateNewEntryRequest' is set
        if (timeEntriesCreateNewEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'timeEntriesCreateNewEntryRequest' when calling createNewEntry(Async)");
        }

        return createNewEntryCall(timeEntriesCreateNewEntryRequest, _callback);

    }


    private ApiResponse<TimeEntriesCreateNewEntryResponse> createNewEntryWithHttpInfo(TimeEntriesCreateNewEntryRequest timeEntriesCreateNewEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewEntryValidateBeforeCall(timeEntriesCreateNewEntryRequest, null);
        Type localVarReturnType = new TypeToken<TimeEntriesCreateNewEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewEntryAsync(TimeEntriesCreateNewEntryRequest timeEntriesCreateNewEntryRequest, final ApiCallback<TimeEntriesCreateNewEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewEntryValidateBeforeCall(timeEntriesCreateNewEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeEntriesCreateNewEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewEntryRequestBuilder {
        private final UUID employeeId;
        private final TimeEntriesCreateNewEntryRequestTimeEntryIn timeEntryIn;
        private UUID projectId;
        private List<UUID> tagIds;
        private String comment;
        private TimeEntriesCreateNewEntryRequestTimeEntryOut timeEntryOut;

        private CreateNewEntryRequestBuilder(UUID employeeId, TimeEntriesCreateNewEntryRequestTimeEntryIn timeEntryIn) {
            this.employeeId = employeeId;
            this.timeEntryIn = timeEntryIn;
        }

        /**
         * Set projectId
         * @param projectId  (optional)
         * @return CreateNewEntryRequestBuilder
         */
        public CreateNewEntryRequestBuilder projectId(UUID projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set tagIds
         * @param tagIds  (optional)
         * @return CreateNewEntryRequestBuilder
         */
        public CreateNewEntryRequestBuilder tagIds(List<UUID> tagIds) {
            this.tagIds = tagIds;
            return this;
        }
        
        /**
         * Set comment
         * @param comment  (optional)
         * @return CreateNewEntryRequestBuilder
         */
        public CreateNewEntryRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set timeEntryOut
         * @param timeEntryOut  (optional)
         * @return CreateNewEntryRequestBuilder
         */
        public CreateNewEntryRequestBuilder timeEntryOut(TimeEntriesCreateNewEntryRequestTimeEntryOut timeEntryOut) {
            this.timeEntryOut = timeEntryOut;
            return this;
        }
        
        /**
         * Build call for createNewEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeEntriesCreateNewEntryRequest timeEntriesCreateNewEntryRequest = buildBodyParams();
            return createNewEntryCall(timeEntriesCreateNewEntryRequest, _callback);
        }

        private TimeEntriesCreateNewEntryRequest buildBodyParams() {
            TimeEntriesCreateNewEntryRequest timeEntriesCreateNewEntryRequest = new TimeEntriesCreateNewEntryRequest();
            timeEntriesCreateNewEntryRequest.employeeId(this.employeeId);
            timeEntriesCreateNewEntryRequest.projectId(this.projectId);
            timeEntriesCreateNewEntryRequest.tagIds(this.tagIds);
            timeEntriesCreateNewEntryRequest.comment(this.comment);
            timeEntriesCreateNewEntryRequest.timeEntryIn(this.timeEntryIn);
            timeEntriesCreateNewEntryRequest.timeEntryOut(this.timeEntryOut);
            return timeEntriesCreateNewEntryRequest;
        }

        /**
         * Execute createNewEntry request
         * @return TimeEntriesCreateNewEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public TimeEntriesCreateNewEntryResponse execute() throws ApiException {
            TimeEntriesCreateNewEntryRequest timeEntriesCreateNewEntryRequest = buildBodyParams();
            ApiResponse<TimeEntriesCreateNewEntryResponse> localVarResp = createNewEntryWithHttpInfo(timeEntriesCreateNewEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewEntry request with HTTP info returned
         * @return ApiResponse&lt;TimeEntriesCreateNewEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeEntriesCreateNewEntryResponse> executeWithHttpInfo() throws ApiException {
            TimeEntriesCreateNewEntryRequest timeEntriesCreateNewEntryRequest = buildBodyParams();
            return createNewEntryWithHttpInfo(timeEntriesCreateNewEntryRequest);
        }

        /**
         * Execute createNewEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeEntriesCreateNewEntryResponse> _callback) throws ApiException {
            TimeEntriesCreateNewEntryRequest timeEntriesCreateNewEntryRequest = buildBodyParams();
            return createNewEntryAsync(timeEntriesCreateNewEntryRequest, _callback);
        }
    }

    /**
     * Create Time Entry
     * 
     * @param timeEntriesCreateNewEntryRequest Create a Time Entry (required)
     * @return CreateNewEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewEntryRequestBuilder createNewEntry(UUID employeeId, TimeEntriesCreateNewEntryRequestTimeEntryIn timeEntryIn) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (timeEntryIn == null) throw new IllegalArgumentException("\"timeEntryIn\" is required but got null");
        return new CreateNewEntryRequestBuilder(employeeId, timeEntryIn);
    }
    private okhttp3.Call deleteByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/v1/time-entries/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteById(Async)");
        }

        return deleteByIdCall(id, _callback);

    }


    private ApiResponse<TimeEntriesDeleteByIdResponse> deleteByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TimeEntriesDeleteByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByIdAsync(UUID id, final ApiCallback<TimeEntriesDeleteByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TimeEntriesDeleteByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final UUID id;

        private DeleteByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(id, _callback);
        }


        /**
         * Execute deleteById request
         * @return TimeEntriesDeleteByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public TimeEntriesDeleteByIdResponse execute() throws ApiException {
            ApiResponse<TimeEntriesDeleteByIdResponse> localVarResp = deleteByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;TimeEntriesDeleteByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeEntriesDeleteByIdResponse> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeEntriesDeleteByIdResponse> _callback) throws ApiException {
            return deleteByIdAsync(id, _callback);
        }
    }

    /**
     * Delete a Time Entry
     * 
     * @param id Time Entry ID (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteByIdRequestBuilder(id);
    }
    private okhttp3.Call listCall(UUID employeeId, LocalDate from, LocalDate to, String employeeStatus, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/v1/time-entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (employeeStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeStatus", employeeStatus));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(UUID employeeId, LocalDate from, LocalDate to, String employeeStatus, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        return listCall(employeeId, from, to, employeeStatus, limit, page, _callback);

    }


    private ApiResponse<TimeEntriesListResponse> listWithHttpInfo(UUID employeeId, LocalDate from, LocalDate to, String employeeStatus, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, from, to, employeeStatus, limit, page, null);
        Type localVarReturnType = new TypeToken<TimeEntriesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(UUID employeeId, LocalDate from, LocalDate to, String employeeStatus, Integer limit, Integer page, final ApiCallback<TimeEntriesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, from, to, employeeStatus, limit, page, _callback);
        Type localVarReturnType = new TypeToken<TimeEntriesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private UUID employeeId;
        private LocalDate from;
        private LocalDate to;
        private String employeeStatus;
        private Integer limit;
        private Integer page;

        private ListRequestBuilder() {
        }

        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder employeeId(UUID employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set from
         * @param from  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder from(LocalDate from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder to(LocalDate to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set employeeStatus
         * @param employeeStatus  (optional, default to active)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder employeeStatus(String employeeStatus) {
            this.employeeStatus = employeeStatus;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit results (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(employeeId, from, to, employeeStatus, limit, page, _callback);
        }


        /**
         * Execute list request
         * @return TimeEntriesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public TimeEntriesListResponse execute() throws ApiException {
            ApiResponse<TimeEntriesListResponse> localVarResp = listWithHttpInfo(employeeId, from, to, employeeStatus, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;TimeEntriesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeEntriesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(employeeId, from, to, employeeStatus, limit, page);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeEntriesListResponse> _callback) throws ApiException {
            return listAsync(employeeId, from, to, employeeStatus, limit, page, _callback);
        }
    }

    /**
     * List Time Entries
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call startEntryCall(TimeEntriesStartEntryRequest timeEntriesStartEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeEntriesStartEntryRequest;

        // create path and map variables
        String localVarPath = "/project/v1/time-entries/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startEntryValidateBeforeCall(TimeEntriesStartEntryRequest timeEntriesStartEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeEntriesStartEntryRequest' is set
        if (timeEntriesStartEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'timeEntriesStartEntryRequest' when calling startEntry(Async)");
        }

        return startEntryCall(timeEntriesStartEntryRequest, _callback);

    }


    private ApiResponse<TimeEntriesStartEntryResponse> startEntryWithHttpInfo(TimeEntriesStartEntryRequest timeEntriesStartEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = startEntryValidateBeforeCall(timeEntriesStartEntryRequest, null);
        Type localVarReturnType = new TypeToken<TimeEntriesStartEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startEntryAsync(TimeEntriesStartEntryRequest timeEntriesStartEntryRequest, final ApiCallback<TimeEntriesStartEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startEntryValidateBeforeCall(timeEntriesStartEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeEntriesStartEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartEntryRequestBuilder {
        private final UUID employeeId;
        private UUID projectId;
        private List<UUID> tagIds;
        private String comment;
        private WorkEntriesStartNewEntryRequestWorkEntryInCoordinates coordinates;

        private StartEntryRequestBuilder(UUID employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set projectId
         * @param projectId  (optional)
         * @return StartEntryRequestBuilder
         */
        public StartEntryRequestBuilder projectId(UUID projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set tagIds
         * @param tagIds  (optional)
         * @return StartEntryRequestBuilder
         */
        public StartEntryRequestBuilder tagIds(List<UUID> tagIds) {
            this.tagIds = tagIds;
            return this;
        }
        
        /**
         * Set comment
         * @param comment  (optional)
         * @return StartEntryRequestBuilder
         */
        public StartEntryRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set coordinates
         * @param coordinates  (optional)
         * @return StartEntryRequestBuilder
         */
        public StartEntryRequestBuilder coordinates(WorkEntriesStartNewEntryRequestWorkEntryInCoordinates coordinates) {
            this.coordinates = coordinates;
            return this;
        }
        
        /**
         * Build call for startEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeEntriesStartEntryRequest timeEntriesStartEntryRequest = buildBodyParams();
            return startEntryCall(timeEntriesStartEntryRequest, _callback);
        }

        private TimeEntriesStartEntryRequest buildBodyParams() {
            TimeEntriesStartEntryRequest timeEntriesStartEntryRequest = new TimeEntriesStartEntryRequest();
            timeEntriesStartEntryRequest.employeeId(this.employeeId);
            timeEntriesStartEntryRequest.projectId(this.projectId);
            timeEntriesStartEntryRequest.tagIds(this.tagIds);
            timeEntriesStartEntryRequest.comment(this.comment);
            timeEntriesStartEntryRequest.coordinates(this.coordinates);
            return timeEntriesStartEntryRequest;
        }

        /**
         * Execute startEntry request
         * @return TimeEntriesStartEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public TimeEntriesStartEntryResponse execute() throws ApiException {
            TimeEntriesStartEntryRequest timeEntriesStartEntryRequest = buildBodyParams();
            ApiResponse<TimeEntriesStartEntryResponse> localVarResp = startEntryWithHttpInfo(timeEntriesStartEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startEntry request with HTTP info returned
         * @return ApiResponse&lt;TimeEntriesStartEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeEntriesStartEntryResponse> executeWithHttpInfo() throws ApiException {
            TimeEntriesStartEntryRequest timeEntriesStartEntryRequest = buildBodyParams();
            return startEntryWithHttpInfo(timeEntriesStartEntryRequest);
        }

        /**
         * Execute startEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeEntriesStartEntryResponse> _callback) throws ApiException {
            TimeEntriesStartEntryRequest timeEntriesStartEntryRequest = buildBodyParams();
            return startEntryAsync(timeEntriesStartEntryRequest, _callback);
        }
    }

    /**
     * Time Entry In
     * 
     * @param timeEntriesStartEntryRequest Starts a Time Entry (required)
     * @return StartEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public StartEntryRequestBuilder startEntry(UUID employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new StartEntryRequestBuilder(employeeId);
    }
    private okhttp3.Call stopTimeEntryOutCall(TimeEntriesStopTimeEntryOutRequest timeEntriesStopTimeEntryOutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeEntriesStopTimeEntryOutRequest;

        // create path and map variables
        String localVarPath = "/project/v1/time-entries/stop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopTimeEntryOutValidateBeforeCall(TimeEntriesStopTimeEntryOutRequest timeEntriesStopTimeEntryOutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'timeEntriesStopTimeEntryOutRequest' is set
        if (timeEntriesStopTimeEntryOutRequest == null) {
            throw new ApiException("Missing the required parameter 'timeEntriesStopTimeEntryOutRequest' when calling stopTimeEntryOut(Async)");
        }

        return stopTimeEntryOutCall(timeEntriesStopTimeEntryOutRequest, _callback);

    }


    private ApiResponse<TimeEntriesStopTimeEntryOutResponse> stopTimeEntryOutWithHttpInfo(TimeEntriesStopTimeEntryOutRequest timeEntriesStopTimeEntryOutRequest) throws ApiException {
        okhttp3.Call localVarCall = stopTimeEntryOutValidateBeforeCall(timeEntriesStopTimeEntryOutRequest, null);
        Type localVarReturnType = new TypeToken<TimeEntriesStopTimeEntryOutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call stopTimeEntryOutAsync(TimeEntriesStopTimeEntryOutRequest timeEntriesStopTimeEntryOutRequest, final ApiCallback<TimeEntriesStopTimeEntryOutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopTimeEntryOutValidateBeforeCall(timeEntriesStopTimeEntryOutRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeEntriesStopTimeEntryOutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StopTimeEntryOutRequestBuilder {
        private TimeEntriesStopTimeEntryOutRequestCoordinates coordinates;

        private StopTimeEntryOutRequestBuilder() {
        }

        /**
         * Set coordinates
         * @param coordinates  (optional)
         * @return StopTimeEntryOutRequestBuilder
         */
        public StopTimeEntryOutRequestBuilder coordinates(TimeEntriesStopTimeEntryOutRequestCoordinates coordinates) {
            this.coordinates = coordinates;
            return this;
        }
        
        /**
         * Build call for stopTimeEntryOut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeEntriesStopTimeEntryOutRequest timeEntriesStopTimeEntryOutRequest = buildBodyParams();
            return stopTimeEntryOutCall(timeEntriesStopTimeEntryOutRequest, _callback);
        }

        private TimeEntriesStopTimeEntryOutRequest buildBodyParams() {
            TimeEntriesStopTimeEntryOutRequest timeEntriesStopTimeEntryOutRequest = new TimeEntriesStopTimeEntryOutRequest();
            timeEntriesStopTimeEntryOutRequest.coordinates(this.coordinates);
            return timeEntriesStopTimeEntryOutRequest;
        }

        /**
         * Execute stopTimeEntryOut request
         * @return TimeEntriesStopTimeEntryOutResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public TimeEntriesStopTimeEntryOutResponse execute() throws ApiException {
            TimeEntriesStopTimeEntryOutRequest timeEntriesStopTimeEntryOutRequest = buildBodyParams();
            ApiResponse<TimeEntriesStopTimeEntryOutResponse> localVarResp = stopTimeEntryOutWithHttpInfo(timeEntriesStopTimeEntryOutRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute stopTimeEntryOut request with HTTP info returned
         * @return ApiResponse&lt;TimeEntriesStopTimeEntryOutResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeEntriesStopTimeEntryOutResponse> executeWithHttpInfo() throws ApiException {
            TimeEntriesStopTimeEntryOutRequest timeEntriesStopTimeEntryOutRequest = buildBodyParams();
            return stopTimeEntryOutWithHttpInfo(timeEntriesStopTimeEntryOutRequest);
        }

        /**
         * Execute stopTimeEntryOut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeEntriesStopTimeEntryOutResponse> _callback) throws ApiException {
            TimeEntriesStopTimeEntryOutRequest timeEntriesStopTimeEntryOutRequest = buildBodyParams();
            return stopTimeEntryOutAsync(timeEntriesStopTimeEntryOutRequest, _callback);
        }
    }

    /**
     * Time Entry Out
     * 
     * @param timeEntriesStopTimeEntryOutRequest Close a Time Entry (required)
     * @return StopTimeEntryOutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public StopTimeEntryOutRequestBuilder stopTimeEntryOut() throws IllegalArgumentException {
        return new StopTimeEntryOutRequestBuilder();
    }
    private okhttp3.Call updateEntryCall(UUID id, TimeEntriesUpdateEntryRequest timeEntriesUpdateEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeEntriesUpdateEntryRequest;

        // create path and map variables
        String localVarPath = "/project/v1/time-entries/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEntryValidateBeforeCall(UUID id, TimeEntriesUpdateEntryRequest timeEntriesUpdateEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEntry(Async)");
        }

        // verify the required parameter 'timeEntriesUpdateEntryRequest' is set
        if (timeEntriesUpdateEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'timeEntriesUpdateEntryRequest' when calling updateEntry(Async)");
        }

        return updateEntryCall(id, timeEntriesUpdateEntryRequest, _callback);

    }


    private ApiResponse<TimeEntriesUpdateEntryResponse> updateEntryWithHttpInfo(UUID id, TimeEntriesUpdateEntryRequest timeEntriesUpdateEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEntryValidateBeforeCall(id, timeEntriesUpdateEntryRequest, null);
        Type localVarReturnType = new TypeToken<TimeEntriesUpdateEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEntryAsync(UUID id, TimeEntriesUpdateEntryRequest timeEntriesUpdateEntryRequest, final ApiCallback<TimeEntriesUpdateEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEntryValidateBeforeCall(id, timeEntriesUpdateEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeEntriesUpdateEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEntryRequestBuilder {
        private final TimeEntriesUpdateEntryRequestTimeEntryIn timeEntryIn;
        private final UUID id;
        private UUID projectId;
        private List<UUID> tagIds;
        private String comment;
        private TimeEntriesUpdateEntryRequestTimeEntryOut timeEntryOut;

        private UpdateEntryRequestBuilder(TimeEntriesUpdateEntryRequestTimeEntryIn timeEntryIn, UUID id) {
            this.timeEntryIn = timeEntryIn;
            this.id = id;
        }

        /**
         * Set projectId
         * @param projectId  (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder projectId(UUID projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set tagIds
         * @param tagIds  (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder tagIds(List<UUID> tagIds) {
            this.tagIds = tagIds;
            return this;
        }
        
        /**
         * Set comment
         * @param comment  (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set timeEntryOut
         * @param timeEntryOut  (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder timeEntryOut(TimeEntriesUpdateEntryRequestTimeEntryOut timeEntryOut) {
            this.timeEntryOut = timeEntryOut;
            return this;
        }
        
        /**
         * Build call for updateEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeEntriesUpdateEntryRequest timeEntriesUpdateEntryRequest = buildBodyParams();
            return updateEntryCall(id, timeEntriesUpdateEntryRequest, _callback);
        }

        private TimeEntriesUpdateEntryRequest buildBodyParams() {
            TimeEntriesUpdateEntryRequest timeEntriesUpdateEntryRequest = new TimeEntriesUpdateEntryRequest();
            timeEntriesUpdateEntryRequest.projectId(this.projectId);
            timeEntriesUpdateEntryRequest.tagIds(this.tagIds);
            timeEntriesUpdateEntryRequest.comment(this.comment);
            timeEntriesUpdateEntryRequest.timeEntryIn(this.timeEntryIn);
            timeEntriesUpdateEntryRequest.timeEntryOut(this.timeEntryOut);
            return timeEntriesUpdateEntryRequest;
        }

        /**
         * Execute updateEntry request
         * @return TimeEntriesUpdateEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public TimeEntriesUpdateEntryResponse execute() throws ApiException {
            TimeEntriesUpdateEntryRequest timeEntriesUpdateEntryRequest = buildBodyParams();
            ApiResponse<TimeEntriesUpdateEntryResponse> localVarResp = updateEntryWithHttpInfo(id, timeEntriesUpdateEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEntry request with HTTP info returned
         * @return ApiResponse&lt;TimeEntriesUpdateEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeEntriesUpdateEntryResponse> executeWithHttpInfo() throws ApiException {
            TimeEntriesUpdateEntryRequest timeEntriesUpdateEntryRequest = buildBodyParams();
            return updateEntryWithHttpInfo(id, timeEntriesUpdateEntryRequest);
        }

        /**
         * Execute updateEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeEntriesUpdateEntryResponse> _callback) throws ApiException {
            TimeEntriesUpdateEntryRequest timeEntriesUpdateEntryRequest = buildBodyParams();
            return updateEntryAsync(id, timeEntriesUpdateEntryRequest, _callback);
        }
    }

    /**
     * Update Time Entry
     * 
     * @param id Time Entry ID (required)
     * @param timeEntriesUpdateEntryRequest Update a Time Entry (required)
     * @return UpdateEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEntryRequestBuilder updateEntry(TimeEntriesUpdateEntryRequestTimeEntryIn timeEntryIn, UUID id) throws IllegalArgumentException {
        if (timeEntryIn == null) throw new IllegalArgumentException("\"timeEntryIn\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateEntryRequestBuilder(timeEntryIn, id);
    }
}
