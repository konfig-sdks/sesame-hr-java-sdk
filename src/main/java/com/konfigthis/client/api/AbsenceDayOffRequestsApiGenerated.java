/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AbsenceDayOffRequestsAcceptRequestRequest;
import com.konfigthis.client.model.AbsenceDayOffRequestsAcceptRequestResponse;
import com.konfigthis.client.model.AbsenceDayOffRequestsCreateDayOffRequestRequest;
import com.konfigthis.client.model.AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOffInner;
import com.konfigthis.client.model.AbsenceDayOffRequestsCreateDayOffRequestResponse;
import com.konfigthis.client.model.AbsenceDayOffRequestsDeleteRequestByIdResponse;
import com.konfigthis.client.model.AbsenceDayOffRequestsListDayOffRequestsResponse;
import com.konfigthis.client.model.AbsenceDayOffRequestsRejectRequestRequest;
import com.konfigthis.client.model.AbsenceDayOffRequestsRejectRequestResponse;
import java.time.LocalDate;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AbsenceDayOffRequestsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AbsenceDayOffRequestsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AbsenceDayOffRequestsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call acceptRequestCall(UUID id, AbsenceDayOffRequestsAcceptRequestRequest absenceDayOffRequestsAcceptRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = absenceDayOffRequestsAcceptRequestRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/absence-day-off-requests/{id}/accept"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptRequestValidateBeforeCall(UUID id, AbsenceDayOffRequestsAcceptRequestRequest absenceDayOffRequestsAcceptRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling acceptRequest(Async)");
        }

        return acceptRequestCall(id, absenceDayOffRequestsAcceptRequestRequest, _callback);

    }


    private ApiResponse<AbsenceDayOffRequestsAcceptRequestResponse> acceptRequestWithHttpInfo(UUID id, AbsenceDayOffRequestsAcceptRequestRequest absenceDayOffRequestsAcceptRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = acceptRequestValidateBeforeCall(id, absenceDayOffRequestsAcceptRequestRequest, null);
        Type localVarReturnType = new TypeToken<AbsenceDayOffRequestsAcceptRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call acceptRequestAsync(UUID id, AbsenceDayOffRequestsAcceptRequestRequest absenceDayOffRequestsAcceptRequestRequest, final ApiCallback<AbsenceDayOffRequestsAcceptRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptRequestValidateBeforeCall(id, absenceDayOffRequestsAcceptRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<AbsenceDayOffRequestsAcceptRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AcceptRequestRequestBuilder {
        private final UUID id;
        private UUID managerId;
        private String resolutionComment;

        private AcceptRequestRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Set managerId
         * @param managerId  (optional)
         * @return AcceptRequestRequestBuilder
         */
        public AcceptRequestRequestBuilder managerId(UUID managerId) {
            this.managerId = managerId;
            return this;
        }
        
        /**
         * Set resolutionComment
         * @param resolutionComment  (optional)
         * @return AcceptRequestRequestBuilder
         */
        public AcceptRequestRequestBuilder resolutionComment(String resolutionComment) {
            this.resolutionComment = resolutionComment;
            return this;
        }
        
        /**
         * Build call for acceptRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AbsenceDayOffRequestsAcceptRequestRequest absenceDayOffRequestsAcceptRequestRequest = buildBodyParams();
            return acceptRequestCall(id, absenceDayOffRequestsAcceptRequestRequest, _callback);
        }

        private AbsenceDayOffRequestsAcceptRequestRequest buildBodyParams() {
            AbsenceDayOffRequestsAcceptRequestRequest absenceDayOffRequestsAcceptRequestRequest = new AbsenceDayOffRequestsAcceptRequestRequest();
            absenceDayOffRequestsAcceptRequestRequest.managerId(this.managerId);
            absenceDayOffRequestsAcceptRequestRequest.resolutionComment(this.resolutionComment);
            return absenceDayOffRequestsAcceptRequestRequest;
        }

        /**
         * Execute acceptRequest request
         * @return AbsenceDayOffRequestsAcceptRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public AbsenceDayOffRequestsAcceptRequestResponse execute() throws ApiException {
            AbsenceDayOffRequestsAcceptRequestRequest absenceDayOffRequestsAcceptRequestRequest = buildBodyParams();
            ApiResponse<AbsenceDayOffRequestsAcceptRequestResponse> localVarResp = acceptRequestWithHttpInfo(id, absenceDayOffRequestsAcceptRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute acceptRequest request with HTTP info returned
         * @return ApiResponse&lt;AbsenceDayOffRequestsAcceptRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsenceDayOffRequestsAcceptRequestResponse> executeWithHttpInfo() throws ApiException {
            AbsenceDayOffRequestsAcceptRequestRequest absenceDayOffRequestsAcceptRequestRequest = buildBodyParams();
            return acceptRequestWithHttpInfo(id, absenceDayOffRequestsAcceptRequestRequest);
        }

        /**
         * Execute acceptRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsenceDayOffRequestsAcceptRequestResponse> _callback) throws ApiException {
            AbsenceDayOffRequestsAcceptRequestRequest absenceDayOffRequestsAcceptRequestRequest = buildBodyParams();
            return acceptRequestAsync(id, absenceDayOffRequestsAcceptRequestRequest, _callback);
        }
    }

    /**
     * Accept Absence Day Off Request
     * 
     * @param id Day Off Request Id (required)
     * @return AcceptRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public AcceptRequestRequestBuilder acceptRequest(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AcceptRequestRequestBuilder(id);
    }
    private okhttp3.Call createDayOffRequestCall(AbsenceDayOffRequestsCreateDayOffRequestRequest absenceDayOffRequestsCreateDayOffRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = absenceDayOffRequestsCreateDayOffRequestRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/absence-day-off-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDayOffRequestValidateBeforeCall(AbsenceDayOffRequestsCreateDayOffRequestRequest absenceDayOffRequestsCreateDayOffRequestRequest, final ApiCallback _callback) throws ApiException {
        return createDayOffRequestCall(absenceDayOffRequestsCreateDayOffRequestRequest, _callback);

    }


    private ApiResponse<AbsenceDayOffRequestsCreateDayOffRequestResponse> createDayOffRequestWithHttpInfo(AbsenceDayOffRequestsCreateDayOffRequestRequest absenceDayOffRequestsCreateDayOffRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = createDayOffRequestValidateBeforeCall(absenceDayOffRequestsCreateDayOffRequestRequest, null);
        Type localVarReturnType = new TypeToken<AbsenceDayOffRequestsCreateDayOffRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDayOffRequestAsync(AbsenceDayOffRequestsCreateDayOffRequestRequest absenceDayOffRequestsCreateDayOffRequestRequest, final ApiCallback<AbsenceDayOffRequestsCreateDayOffRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDayOffRequestValidateBeforeCall(absenceDayOffRequestsCreateDayOffRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<AbsenceDayOffRequestsCreateDayOffRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDayOffRequestRequestBuilder {
        private final UUID employeeId;
        private final String type;
        private final List<AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOffInner> daysOff;
        private UUID absenceTypeId;
        private String comment;

        private CreateDayOffRequestRequestBuilder(UUID employeeId, String type, List<AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOffInner> daysOff) {
            this.employeeId = employeeId;
            this.type = type;
            this.daysOff = daysOff;
        }

        /**
         * Set absenceTypeId
         * @param absenceTypeId  (optional)
         * @return CreateDayOffRequestRequestBuilder
         */
        public CreateDayOffRequestRequestBuilder absenceTypeId(UUID absenceTypeId) {
            this.absenceTypeId = absenceTypeId;
            return this;
        }
        
        /**
         * Set comment
         * @param comment  (optional)
         * @return CreateDayOffRequestRequestBuilder
         */
        public CreateDayOffRequestRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Build call for createDayOffRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AbsenceDayOffRequestsCreateDayOffRequestRequest absenceDayOffRequestsCreateDayOffRequestRequest = buildBodyParams();
            return createDayOffRequestCall(absenceDayOffRequestsCreateDayOffRequestRequest, _callback);
        }

        private AbsenceDayOffRequestsCreateDayOffRequestRequest buildBodyParams() {
            AbsenceDayOffRequestsCreateDayOffRequestRequest absenceDayOffRequestsCreateDayOffRequestRequest = new AbsenceDayOffRequestsCreateDayOffRequestRequest();
            absenceDayOffRequestsCreateDayOffRequestRequest.employeeId(this.employeeId);
            absenceDayOffRequestsCreateDayOffRequestRequest.absenceTypeId(this.absenceTypeId);
            if (this.type != null)
            absenceDayOffRequestsCreateDayOffRequestRequest.type(AbsenceDayOffRequestsCreateDayOffRequestRequest.TypeEnum.fromValue(this.type));
            absenceDayOffRequestsCreateDayOffRequestRequest.daysOff(this.daysOff);
            absenceDayOffRequestsCreateDayOffRequestRequest.comment(this.comment);
            return absenceDayOffRequestsCreateDayOffRequestRequest;
        }

        /**
         * Execute createDayOffRequest request
         * @return AbsenceDayOffRequestsCreateDayOffRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public AbsenceDayOffRequestsCreateDayOffRequestResponse execute() throws ApiException {
            AbsenceDayOffRequestsCreateDayOffRequestRequest absenceDayOffRequestsCreateDayOffRequestRequest = buildBodyParams();
            ApiResponse<AbsenceDayOffRequestsCreateDayOffRequestResponse> localVarResp = createDayOffRequestWithHttpInfo(absenceDayOffRequestsCreateDayOffRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDayOffRequest request with HTTP info returned
         * @return ApiResponse&lt;AbsenceDayOffRequestsCreateDayOffRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsenceDayOffRequestsCreateDayOffRequestResponse> executeWithHttpInfo() throws ApiException {
            AbsenceDayOffRequestsCreateDayOffRequestRequest absenceDayOffRequestsCreateDayOffRequestRequest = buildBodyParams();
            return createDayOffRequestWithHttpInfo(absenceDayOffRequestsCreateDayOffRequestRequest);
        }

        /**
         * Execute createDayOffRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsenceDayOffRequestsCreateDayOffRequestResponse> _callback) throws ApiException {
            AbsenceDayOffRequestsCreateDayOffRequestRequest absenceDayOffRequestsCreateDayOffRequestRequest = buildBodyParams();
            return createDayOffRequestAsync(absenceDayOffRequestsCreateDayOffRequestRequest, _callback);
        }
    }

    /**
     * Create Absence Day Off Request
     * 
     * @return CreateDayOffRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateDayOffRequestRequestBuilder createDayOffRequest(UUID employeeId, String type, List<AbsenceDayOffRequestsCreateDayOffRequestRequestDaysOffInner> daysOff) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (daysOff == null) throw new IllegalArgumentException("\"daysOff\" is required but got null");
        return new CreateDayOffRequestRequestBuilder(employeeId, type, daysOff);
    }
    private okhttp3.Call deleteRequestByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/absence-day-off-requests/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRequestByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRequestById(Async)");
        }

        return deleteRequestByIdCall(id, _callback);

    }


    private ApiResponse<AbsenceDayOffRequestsDeleteRequestByIdResponse> deleteRequestByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteRequestByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AbsenceDayOffRequestsDeleteRequestByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRequestByIdAsync(UUID id, final ApiCallback<AbsenceDayOffRequestsDeleteRequestByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRequestByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AbsenceDayOffRequestsDeleteRequestByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRequestByIdRequestBuilder {
        private final UUID id;

        private DeleteRequestByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteRequestById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRequestByIdCall(id, _callback);
        }


        /**
         * Execute deleteRequestById request
         * @return AbsenceDayOffRequestsDeleteRequestByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public AbsenceDayOffRequestsDeleteRequestByIdResponse execute() throws ApiException {
            ApiResponse<AbsenceDayOffRequestsDeleteRequestByIdResponse> localVarResp = deleteRequestByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteRequestById request with HTTP info returned
         * @return ApiResponse&lt;AbsenceDayOffRequestsDeleteRequestByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsenceDayOffRequestsDeleteRequestByIdResponse> executeWithHttpInfo() throws ApiException {
            return deleteRequestByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteRequestById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsenceDayOffRequestsDeleteRequestByIdResponse> _callback) throws ApiException {
            return deleteRequestByIdAsync(id, _callback);
        }
    }

    /**
     * Delete Absence Day Off Request
     * 
     * @param id Day Off Request Id (required)
     * @return DeleteRequestByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestByIdRequestBuilder deleteRequestById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteRequestByIdRequestBuilder(id);
    }
    private okhttp3.Call listDayOffRequestsCall(UUID employeeId, UUID absencesValidator, LocalDate fromDayOff, LocalDate toDayOff, String status, Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/absence-day-off-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (absencesValidator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("absencesValidator", absencesValidator));
        }

        if (fromDayOff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDayOff", fromDayOff));
        }

        if (toDayOff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDayOff", toDayOff));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDayOffRequestsValidateBeforeCall(UUID employeeId, UUID absencesValidator, LocalDate fromDayOff, LocalDate toDayOff, String status, Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        return listDayOffRequestsCall(employeeId, absencesValidator, fromDayOff, toDayOff, status, limit, page, orderBy, _callback);

    }


    private ApiResponse<AbsenceDayOffRequestsListDayOffRequestsResponse> listDayOffRequestsWithHttpInfo(UUID employeeId, UUID absencesValidator, LocalDate fromDayOff, LocalDate toDayOff, String status, Integer limit, Integer page, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = listDayOffRequestsValidateBeforeCall(employeeId, absencesValidator, fromDayOff, toDayOff, status, limit, page, orderBy, null);
        Type localVarReturnType = new TypeToken<AbsenceDayOffRequestsListDayOffRequestsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDayOffRequestsAsync(UUID employeeId, UUID absencesValidator, LocalDate fromDayOff, LocalDate toDayOff, String status, Integer limit, Integer page, String orderBy, final ApiCallback<AbsenceDayOffRequestsListDayOffRequestsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDayOffRequestsValidateBeforeCall(employeeId, absencesValidator, fromDayOff, toDayOff, status, limit, page, orderBy, _callback);
        Type localVarReturnType = new TypeToken<AbsenceDayOffRequestsListDayOffRequestsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDayOffRequestsRequestBuilder {
        private UUID employeeId;
        private UUID absencesValidator;
        private LocalDate fromDayOff;
        private LocalDate toDayOff;
        private String status;
        private Integer limit;
        private Integer page;
        private String orderBy;

        private ListDayOffRequestsRequestBuilder() {
        }

        /**
         * Set employeeId
         * @param employeeId The id of the employee (optional)
         * @return ListDayOffRequestsRequestBuilder
         */
        public ListDayOffRequestsRequestBuilder employeeId(UUID employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set absencesValidator
         * @param absencesValidator The id of the manager (optional)
         * @return ListDayOffRequestsRequestBuilder
         */
        public ListDayOffRequestsRequestBuilder absencesValidator(UUID absencesValidator) {
            this.absencesValidator = absencesValidator;
            return this;
        }
        
        /**
         * Set fromDayOff
         * @param fromDayOff First day of search period (optional)
         * @return ListDayOffRequestsRequestBuilder
         */
        public ListDayOffRequestsRequestBuilder fromDayOff(LocalDate fromDayOff) {
            this.fromDayOff = fromDayOff;
            return this;
        }
        
        /**
         * Set toDayOff
         * @param toDayOff Last day of search period (optional)
         * @return ListDayOffRequestsRequestBuilder
         */
        public ListDayOffRequestsRequestBuilder toDayOff(LocalDate toDayOff) {
            this.toDayOff = toDayOff;
            return this;
        }
        
        /**
         * Set status
         * @param status Request status (optional)
         * @return ListDayOffRequestsRequestBuilder
         */
        public ListDayOffRequestsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit day offs (optional)
         * @return ListDayOffRequestsRequestBuilder
         */
        public ListDayOffRequestsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListDayOffRequestsRequestBuilder
         */
        public ListDayOffRequestsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy field1 asc, field2 desc (optional)
         * @return ListDayOffRequestsRequestBuilder
         */
        public ListDayOffRequestsRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for listDayOffRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDayOffRequestsCall(employeeId, absencesValidator, fromDayOff, toDayOff, status, limit, page, orderBy, _callback);
        }


        /**
         * Execute listDayOffRequests request
         * @return AbsenceDayOffRequestsListDayOffRequestsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public AbsenceDayOffRequestsListDayOffRequestsResponse execute() throws ApiException {
            ApiResponse<AbsenceDayOffRequestsListDayOffRequestsResponse> localVarResp = listDayOffRequestsWithHttpInfo(employeeId, absencesValidator, fromDayOff, toDayOff, status, limit, page, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDayOffRequests request with HTTP info returned
         * @return ApiResponse&lt;AbsenceDayOffRequestsListDayOffRequestsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsenceDayOffRequestsListDayOffRequestsResponse> executeWithHttpInfo() throws ApiException {
            return listDayOffRequestsWithHttpInfo(employeeId, absencesValidator, fromDayOff, toDayOff, status, limit, page, orderBy);
        }

        /**
         * Execute listDayOffRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsenceDayOffRequestsListDayOffRequestsResponse> _callback) throws ApiException {
            return listDayOffRequestsAsync(employeeId, absencesValidator, fromDayOff, toDayOff, status, limit, page, orderBy, _callback);
        }
    }

    /**
     * List Absence Day Off Requests
     * 
     * @return ListDayOffRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListDayOffRequestsRequestBuilder listDayOffRequests() throws IllegalArgumentException {
        return new ListDayOffRequestsRequestBuilder();
    }
    private okhttp3.Call rejectRequestCall(UUID id, AbsenceDayOffRequestsRejectRequestRequest absenceDayOffRequestsRejectRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = absenceDayOffRequestsRejectRequestRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/absence-day-off-requests/{id}/reject"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectRequestValidateBeforeCall(UUID id, AbsenceDayOffRequestsRejectRequestRequest absenceDayOffRequestsRejectRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rejectRequest(Async)");
        }

        return rejectRequestCall(id, absenceDayOffRequestsRejectRequestRequest, _callback);

    }


    private ApiResponse<AbsenceDayOffRequestsRejectRequestResponse> rejectRequestWithHttpInfo(UUID id, AbsenceDayOffRequestsRejectRequestRequest absenceDayOffRequestsRejectRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = rejectRequestValidateBeforeCall(id, absenceDayOffRequestsRejectRequestRequest, null);
        Type localVarReturnType = new TypeToken<AbsenceDayOffRequestsRejectRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rejectRequestAsync(UUID id, AbsenceDayOffRequestsRejectRequestRequest absenceDayOffRequestsRejectRequestRequest, final ApiCallback<AbsenceDayOffRequestsRejectRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectRequestValidateBeforeCall(id, absenceDayOffRequestsRejectRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<AbsenceDayOffRequestsRejectRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RejectRequestRequestBuilder {
        private final UUID id;
        private String resolutionComment;
        private UUID managerId;

        private RejectRequestRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Set resolutionComment
         * @param resolutionComment  (optional)
         * @return RejectRequestRequestBuilder
         */
        public RejectRequestRequestBuilder resolutionComment(String resolutionComment) {
            this.resolutionComment = resolutionComment;
            return this;
        }
        
        /**
         * Set managerId
         * @param managerId  (optional)
         * @return RejectRequestRequestBuilder
         */
        public RejectRequestRequestBuilder managerId(UUID managerId) {
            this.managerId = managerId;
            return this;
        }
        
        /**
         * Build call for rejectRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AbsenceDayOffRequestsRejectRequestRequest absenceDayOffRequestsRejectRequestRequest = buildBodyParams();
            return rejectRequestCall(id, absenceDayOffRequestsRejectRequestRequest, _callback);
        }

        private AbsenceDayOffRequestsRejectRequestRequest buildBodyParams() {
            AbsenceDayOffRequestsRejectRequestRequest absenceDayOffRequestsRejectRequestRequest = new AbsenceDayOffRequestsRejectRequestRequest();
            absenceDayOffRequestsRejectRequestRequest.resolutionComment(this.resolutionComment);
            absenceDayOffRequestsRejectRequestRequest.managerId(this.managerId);
            return absenceDayOffRequestsRejectRequestRequest;
        }

        /**
         * Execute rejectRequest request
         * @return AbsenceDayOffRequestsRejectRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public AbsenceDayOffRequestsRejectRequestResponse execute() throws ApiException {
            AbsenceDayOffRequestsRejectRequestRequest absenceDayOffRequestsRejectRequestRequest = buildBodyParams();
            ApiResponse<AbsenceDayOffRequestsRejectRequestResponse> localVarResp = rejectRequestWithHttpInfo(id, absenceDayOffRequestsRejectRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rejectRequest request with HTTP info returned
         * @return ApiResponse&lt;AbsenceDayOffRequestsRejectRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsenceDayOffRequestsRejectRequestResponse> executeWithHttpInfo() throws ApiException {
            AbsenceDayOffRequestsRejectRequestRequest absenceDayOffRequestsRejectRequestRequest = buildBodyParams();
            return rejectRequestWithHttpInfo(id, absenceDayOffRequestsRejectRequestRequest);
        }

        /**
         * Execute rejectRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsenceDayOffRequestsRejectRequestResponse> _callback) throws ApiException {
            AbsenceDayOffRequestsRejectRequestRequest absenceDayOffRequestsRejectRequestRequest = buildBodyParams();
            return rejectRequestAsync(id, absenceDayOffRequestsRejectRequestRequest, _callback);
        }
    }

    /**
     * Reject Absence Day Off Request
     * 
     * @param id Day Off Request Id (required)
     * @return RejectRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public RejectRequestRequestBuilder rejectRequest(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RejectRequestRequestBuilder(id);
    }
}
