/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import java.util.UUID;
import com.konfigthis.client.model.WorkEntriesCreateNewEntryRequest;
import com.konfigthis.client.model.WorkEntriesCreateNewEntryRequestWorkEntryIn;
import com.konfigthis.client.model.WorkEntriesCreateNewEntryRequestWorkEntryOut;
import com.konfigthis.client.model.WorkEntriesCreateNewEntryResponse;
import com.konfigthis.client.model.WorkEntriesDeleteByIdResponse;
import com.konfigthis.client.model.WorkEntriesEndLastEntryRequest;
import com.konfigthis.client.model.WorkEntriesEndLastEntryResponse;
import com.konfigthis.client.model.WorkEntriesListResponse;
import com.konfigthis.client.model.WorkEntriesStartNewEntryRequest;
import com.konfigthis.client.model.WorkEntriesStartNewEntryRequestWorkEntryIn;
import com.konfigthis.client.model.WorkEntriesStartNewEntryResponse;
import com.konfigthis.client.model.WorkEntriesUpdateWorkEntryRequest;
import com.konfigthis.client.model.WorkEntriesUpdateWorkEntryRequestWorkEntryIn;
import com.konfigthis.client.model.WorkEntriesUpdateWorkEntryRequestWorkEntryOut;
import com.konfigthis.client.model.WorkEntriesUpdateWorkEntryResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkEntriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkEntriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkEntriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewEntryCall(WorkEntriesCreateNewEntryRequest workEntriesCreateNewEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workEntriesCreateNewEntryRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/work-entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewEntryValidateBeforeCall(WorkEntriesCreateNewEntryRequest workEntriesCreateNewEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workEntriesCreateNewEntryRequest' is set
        if (workEntriesCreateNewEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'workEntriesCreateNewEntryRequest' when calling createNewEntry(Async)");
        }

        return createNewEntryCall(workEntriesCreateNewEntryRequest, _callback);

    }


    private ApiResponse<WorkEntriesCreateNewEntryResponse> createNewEntryWithHttpInfo(WorkEntriesCreateNewEntryRequest workEntriesCreateNewEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewEntryValidateBeforeCall(workEntriesCreateNewEntryRequest, null);
        Type localVarReturnType = new TypeToken<WorkEntriesCreateNewEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewEntryAsync(WorkEntriesCreateNewEntryRequest workEntriesCreateNewEntryRequest, final ApiCallback<WorkEntriesCreateNewEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewEntryValidateBeforeCall(workEntriesCreateNewEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkEntriesCreateNewEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewEntryRequestBuilder {
        private final UUID employeeId;
        private final String workEntryType;
        private final WorkEntriesCreateNewEntryRequestWorkEntryIn workEntryIn;
        private UUID workBreakId;
        private UUID workCheckTypeId;
        private WorkEntriesCreateNewEntryRequestWorkEntryOut workEntryOut;

        private CreateNewEntryRequestBuilder(UUID employeeId, String workEntryType, WorkEntriesCreateNewEntryRequestWorkEntryIn workEntryIn) {
            this.employeeId = employeeId;
            this.workEntryType = workEntryType;
            this.workEntryIn = workEntryIn;
        }

        /**
         * Set workBreakId
         * @param workBreakId  (optional)
         * @return CreateNewEntryRequestBuilder
         */
        public CreateNewEntryRequestBuilder workBreakId(UUID workBreakId) {
            this.workBreakId = workBreakId;
            return this;
        }
        
        /**
         * Set workCheckTypeId
         * @param workCheckTypeId  (optional)
         * @return CreateNewEntryRequestBuilder
         */
        public CreateNewEntryRequestBuilder workCheckTypeId(UUID workCheckTypeId) {
            this.workCheckTypeId = workCheckTypeId;
            return this;
        }
        
        /**
         * Set workEntryOut
         * @param workEntryOut  (optional)
         * @return CreateNewEntryRequestBuilder
         */
        public CreateNewEntryRequestBuilder workEntryOut(WorkEntriesCreateNewEntryRequestWorkEntryOut workEntryOut) {
            this.workEntryOut = workEntryOut;
            return this;
        }
        
        /**
         * Build call for createNewEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkEntriesCreateNewEntryRequest workEntriesCreateNewEntryRequest = buildBodyParams();
            return createNewEntryCall(workEntriesCreateNewEntryRequest, _callback);
        }

        private WorkEntriesCreateNewEntryRequest buildBodyParams() {
            WorkEntriesCreateNewEntryRequest workEntriesCreateNewEntryRequest = new WorkEntriesCreateNewEntryRequest();
            workEntriesCreateNewEntryRequest.employeeId(this.employeeId);
            if (this.workEntryType != null)
            workEntriesCreateNewEntryRequest.workEntryType(WorkEntriesCreateNewEntryRequest.WorkEntryTypeEnum.fromValue(this.workEntryType));
            workEntriesCreateNewEntryRequest.workBreakId(this.workBreakId);
            workEntriesCreateNewEntryRequest.workCheckTypeId(this.workCheckTypeId);
            workEntriesCreateNewEntryRequest.workEntryIn(this.workEntryIn);
            workEntriesCreateNewEntryRequest.workEntryOut(this.workEntryOut);
            return workEntriesCreateNewEntryRequest;
        }

        /**
         * Execute createNewEntry request
         * @return WorkEntriesCreateNewEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public WorkEntriesCreateNewEntryResponse execute() throws ApiException {
            WorkEntriesCreateNewEntryRequest workEntriesCreateNewEntryRequest = buildBodyParams();
            ApiResponse<WorkEntriesCreateNewEntryResponse> localVarResp = createNewEntryWithHttpInfo(workEntriesCreateNewEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewEntry request with HTTP info returned
         * @return ApiResponse&lt;WorkEntriesCreateNewEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkEntriesCreateNewEntryResponse> executeWithHttpInfo() throws ApiException {
            WorkEntriesCreateNewEntryRequest workEntriesCreateNewEntryRequest = buildBodyParams();
            return createNewEntryWithHttpInfo(workEntriesCreateNewEntryRequest);
        }

        /**
         * Execute createNewEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkEntriesCreateNewEntryResponse> _callback) throws ApiException {
            WorkEntriesCreateNewEntryRequest workEntriesCreateNewEntryRequest = buildBodyParams();
            return createNewEntryAsync(workEntriesCreateNewEntryRequest, _callback);
        }
    }

    /**
     * Create Work Entry
     * 
     * @param workEntriesCreateNewEntryRequest Create a Work Entry (required)
     * @return CreateNewEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewEntryRequestBuilder createNewEntry(UUID employeeId, String workEntryType, WorkEntriesCreateNewEntryRequestWorkEntryIn workEntryIn) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (workEntryType == null) throw new IllegalArgumentException("\"workEntryType\" is required but got null");
            

        if (workEntryIn == null) throw new IllegalArgumentException("\"workEntryIn\" is required but got null");
        return new CreateNewEntryRequestBuilder(employeeId, workEntryType, workEntryIn);
    }
    private okhttp3.Call deleteByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/work-entries/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteById(Async)");
        }

        return deleteByIdCall(id, _callback);

    }


    private ApiResponse<WorkEntriesDeleteByIdResponse> deleteByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WorkEntriesDeleteByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByIdAsync(UUID id, final ApiCallback<WorkEntriesDeleteByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WorkEntriesDeleteByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByIdRequestBuilder {
        private final UUID id;

        private DeleteByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdCall(id, _callback);
        }


        /**
         * Execute deleteById request
         * @return WorkEntriesDeleteByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public WorkEntriesDeleteByIdResponse execute() throws ApiException {
            ApiResponse<WorkEntriesDeleteByIdResponse> localVarResp = deleteByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteById request with HTTP info returned
         * @return ApiResponse&lt;WorkEntriesDeleteByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkEntriesDeleteByIdResponse> executeWithHttpInfo() throws ApiException {
            return deleteByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkEntriesDeleteByIdResponse> _callback) throws ApiException {
            return deleteByIdAsync(id, _callback);
        }
    }

    /**
     * Delete Work Entry
     * 
     * @param id Work Entry ID (required)
     * @return DeleteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdRequestBuilder deleteById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteByIdRequestBuilder(id);
    }
    private okhttp3.Call endLastEntryCall(WorkEntriesEndLastEntryRequest workEntriesEndLastEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workEntriesEndLastEntryRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/work-entries/clock-out";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endLastEntryValidateBeforeCall(WorkEntriesEndLastEntryRequest workEntriesEndLastEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workEntriesEndLastEntryRequest' is set
        if (workEntriesEndLastEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'workEntriesEndLastEntryRequest' when calling endLastEntry(Async)");
        }

        return endLastEntryCall(workEntriesEndLastEntryRequest, _callback);

    }


    private ApiResponse<WorkEntriesEndLastEntryResponse> endLastEntryWithHttpInfo(WorkEntriesEndLastEntryRequest workEntriesEndLastEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = endLastEntryValidateBeforeCall(workEntriesEndLastEntryRequest, null);
        Type localVarReturnType = new TypeToken<WorkEntriesEndLastEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call endLastEntryAsync(WorkEntriesEndLastEntryRequest workEntriesEndLastEntryRequest, final ApiCallback<WorkEntriesEndLastEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = endLastEntryValidateBeforeCall(workEntriesEndLastEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkEntriesEndLastEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EndLastEntryRequestBuilder {
        private final UUID employeeId;
        private WorkEntriesStartNewEntryRequestWorkEntryIn workEntryOut;

        private EndLastEntryRequestBuilder(UUID employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set workEntryOut
         * @param workEntryOut  (optional)
         * @return EndLastEntryRequestBuilder
         */
        public EndLastEntryRequestBuilder workEntryOut(WorkEntriesStartNewEntryRequestWorkEntryIn workEntryOut) {
            this.workEntryOut = workEntryOut;
            return this;
        }
        
        /**
         * Build call for endLastEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkEntriesEndLastEntryRequest workEntriesEndLastEntryRequest = buildBodyParams();
            return endLastEntryCall(workEntriesEndLastEntryRequest, _callback);
        }

        private WorkEntriesEndLastEntryRequest buildBodyParams() {
            WorkEntriesEndLastEntryRequest workEntriesEndLastEntryRequest = new WorkEntriesEndLastEntryRequest();
            workEntriesEndLastEntryRequest.employeeId(this.employeeId);
            workEntriesEndLastEntryRequest.workEntryOut(this.workEntryOut);
            return workEntriesEndLastEntryRequest;
        }

        /**
         * Execute endLastEntry request
         * @return WorkEntriesEndLastEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public WorkEntriesEndLastEntryResponse execute() throws ApiException {
            WorkEntriesEndLastEntryRequest workEntriesEndLastEntryRequest = buildBodyParams();
            ApiResponse<WorkEntriesEndLastEntryResponse> localVarResp = endLastEntryWithHttpInfo(workEntriesEndLastEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute endLastEntry request with HTTP info returned
         * @return ApiResponse&lt;WorkEntriesEndLastEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkEntriesEndLastEntryResponse> executeWithHttpInfo() throws ApiException {
            WorkEntriesEndLastEntryRequest workEntriesEndLastEntryRequest = buildBodyParams();
            return endLastEntryWithHttpInfo(workEntriesEndLastEntryRequest);
        }

        /**
         * Execute endLastEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkEntriesEndLastEntryResponse> _callback) throws ApiException {
            WorkEntriesEndLastEntryRequest workEntriesEndLastEntryRequest = buildBodyParams();
            return endLastEntryAsync(workEntriesEndLastEntryRequest, _callback);
        }
    }

    /**
     * Ends the last work entry
     * 
     * @param workEntriesEndLastEntryRequest  (required)
     * @return EndLastEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public EndLastEntryRequestBuilder endLastEntry(UUID employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new EndLastEntryRequestBuilder(employeeId);
    }
    private okhttp3.Call listCall(UUID employeeId, LocalDate from, LocalDate to, String updatedAtGte, String updatedAtLte, String onlyReturn, Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/work-entries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (updatedAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[gte]", updatedAtGte));
        }

        if (updatedAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updatedAt[lte]", updatedAtLte));
        }

        if (onlyReturn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyReturn", onlyReturn));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(UUID employeeId, LocalDate from, LocalDate to, String updatedAtGte, String updatedAtLte, String onlyReturn, Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        return listCall(employeeId, from, to, updatedAtGte, updatedAtLte, onlyReturn, limit, page, orderBy, _callback);

    }


    private ApiResponse<WorkEntriesListResponse> listWithHttpInfo(UUID employeeId, LocalDate from, LocalDate to, String updatedAtGte, String updatedAtLte, String onlyReturn, Integer limit, Integer page, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, from, to, updatedAtGte, updatedAtLte, onlyReturn, limit, page, orderBy, null);
        Type localVarReturnType = new TypeToken<WorkEntriesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(UUID employeeId, LocalDate from, LocalDate to, String updatedAtGte, String updatedAtLte, String onlyReturn, Integer limit, Integer page, String orderBy, final ApiCallback<WorkEntriesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, from, to, updatedAtGte, updatedAtLte, onlyReturn, limit, page, orderBy, _callback);
        Type localVarReturnType = new TypeToken<WorkEntriesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private UUID employeeId;
        private LocalDate from;
        private LocalDate to;
        private String updatedAtGte;
        private String updatedAtLte;
        private String onlyReturn;
        private Integer limit;
        private Integer page;
        private String orderBy;

        private ListRequestBuilder() {
        }

        /**
         * Set employeeId
         * @param employeeId The id of the employee (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder employeeId(UUID employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set from
         * @param from Y-m-d (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder from(LocalDate from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set to
         * @param to Y-m-d (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder to(LocalDate to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set updatedAtGte
         * @param updatedAtGte UpdatedAt greater or equal (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder updatedAtGte(String updatedAtGte) {
            this.updatedAtGte = updatedAtGte;
            return this;
        }
        
        /**
         * Set updatedAtLte
         * @param updatedAtLte UpdatedAt lesser or equal (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder updatedAtLte(String updatedAtLte) {
            this.updatedAtLte = updatedAtLte;
            return this;
        }
        
        /**
         * Set onlyReturn
         * @param onlyReturn Return specific users (optional, default to not_deleted)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder onlyReturn(String onlyReturn) {
            this.onlyReturn = onlyReturn;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit work entries (optional, default to 20)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy field1 asc, field2 desc (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(employeeId, from, to, updatedAtGte, updatedAtLte, onlyReturn, limit, page, orderBy, _callback);
        }


        /**
         * Execute list request
         * @return WorkEntriesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public WorkEntriesListResponse execute() throws ApiException {
            ApiResponse<WorkEntriesListResponse> localVarResp = listWithHttpInfo(employeeId, from, to, updatedAtGte, updatedAtLte, onlyReturn, limit, page, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;WorkEntriesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkEntriesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(employeeId, from, to, updatedAtGte, updatedAtLte, onlyReturn, limit, page, orderBy);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkEntriesListResponse> _callback) throws ApiException {
            return listAsync(employeeId, from, to, updatedAtGte, updatedAtLte, onlyReturn, limit, page, orderBy, _callback);
        }
    }

    /**
     * List Company Work Entries
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call startNewEntryCall(WorkEntriesStartNewEntryRequest workEntriesStartNewEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workEntriesStartNewEntryRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/work-entries/clock-in";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startNewEntryValidateBeforeCall(WorkEntriesStartNewEntryRequest workEntriesStartNewEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workEntriesStartNewEntryRequest' is set
        if (workEntriesStartNewEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'workEntriesStartNewEntryRequest' when calling startNewEntry(Async)");
        }

        return startNewEntryCall(workEntriesStartNewEntryRequest, _callback);

    }


    private ApiResponse<WorkEntriesStartNewEntryResponse> startNewEntryWithHttpInfo(WorkEntriesStartNewEntryRequest workEntriesStartNewEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = startNewEntryValidateBeforeCall(workEntriesStartNewEntryRequest, null);
        Type localVarReturnType = new TypeToken<WorkEntriesStartNewEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startNewEntryAsync(WorkEntriesStartNewEntryRequest workEntriesStartNewEntryRequest, final ApiCallback<WorkEntriesStartNewEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startNewEntryValidateBeforeCall(workEntriesStartNewEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkEntriesStartNewEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartNewEntryRequestBuilder {
        private final UUID employeeId;
        private WorkEntriesStartNewEntryRequestWorkEntryIn workEntryIn;
        private UUID workCheckTypeId;
        private UUID workBreakId;

        private StartNewEntryRequestBuilder(UUID employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set workEntryIn
         * @param workEntryIn  (optional)
         * @return StartNewEntryRequestBuilder
         */
        public StartNewEntryRequestBuilder workEntryIn(WorkEntriesStartNewEntryRequestWorkEntryIn workEntryIn) {
            this.workEntryIn = workEntryIn;
            return this;
        }
        
        /**
         * Set workCheckTypeId
         * @param workCheckTypeId  (optional)
         * @return StartNewEntryRequestBuilder
         */
        public StartNewEntryRequestBuilder workCheckTypeId(UUID workCheckTypeId) {
            this.workCheckTypeId = workCheckTypeId;
            return this;
        }
        
        /**
         * Set workBreakId
         * @param workBreakId  (optional)
         * @return StartNewEntryRequestBuilder
         */
        public StartNewEntryRequestBuilder workBreakId(UUID workBreakId) {
            this.workBreakId = workBreakId;
            return this;
        }
        
        /**
         * Build call for startNewEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkEntriesStartNewEntryRequest workEntriesStartNewEntryRequest = buildBodyParams();
            return startNewEntryCall(workEntriesStartNewEntryRequest, _callback);
        }

        private WorkEntriesStartNewEntryRequest buildBodyParams() {
            WorkEntriesStartNewEntryRequest workEntriesStartNewEntryRequest = new WorkEntriesStartNewEntryRequest();
            workEntriesStartNewEntryRequest.employeeId(this.employeeId);
            workEntriesStartNewEntryRequest.workEntryIn(this.workEntryIn);
            workEntriesStartNewEntryRequest.workCheckTypeId(this.workCheckTypeId);
            workEntriesStartNewEntryRequest.workBreakId(this.workBreakId);
            return workEntriesStartNewEntryRequest;
        }

        /**
         * Execute startNewEntry request
         * @return WorkEntriesStartNewEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public WorkEntriesStartNewEntryResponse execute() throws ApiException {
            WorkEntriesStartNewEntryRequest workEntriesStartNewEntryRequest = buildBodyParams();
            ApiResponse<WorkEntriesStartNewEntryResponse> localVarResp = startNewEntryWithHttpInfo(workEntriesStartNewEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startNewEntry request with HTTP info returned
         * @return ApiResponse&lt;WorkEntriesStartNewEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkEntriesStartNewEntryResponse> executeWithHttpInfo() throws ApiException {
            WorkEntriesStartNewEntryRequest workEntriesStartNewEntryRequest = buildBodyParams();
            return startNewEntryWithHttpInfo(workEntriesStartNewEntryRequest);
        }

        /**
         * Execute startNewEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkEntriesStartNewEntryResponse> _callback) throws ApiException {
            WorkEntriesStartNewEntryRequest workEntriesStartNewEntryRequest = buildBodyParams();
            return startNewEntryAsync(workEntriesStartNewEntryRequest, _callback);
        }
    }

    /**
     * Starts a new work entry right now
     * 
     * @param workEntriesStartNewEntryRequest Starts a work entry (required)
     * @return StartNewEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public StartNewEntryRequestBuilder startNewEntry(UUID employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new StartNewEntryRequestBuilder(employeeId);
    }
    private okhttp3.Call updateWorkEntryCall(UUID id, WorkEntriesUpdateWorkEntryRequest workEntriesUpdateWorkEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workEntriesUpdateWorkEntryRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/work-entries/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkEntryValidateBeforeCall(UUID id, WorkEntriesUpdateWorkEntryRequest workEntriesUpdateWorkEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateWorkEntry(Async)");
        }

        // verify the required parameter 'workEntriesUpdateWorkEntryRequest' is set
        if (workEntriesUpdateWorkEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'workEntriesUpdateWorkEntryRequest' when calling updateWorkEntry(Async)");
        }

        return updateWorkEntryCall(id, workEntriesUpdateWorkEntryRequest, _callback);

    }


    private ApiResponse<WorkEntriesUpdateWorkEntryResponse> updateWorkEntryWithHttpInfo(UUID id, WorkEntriesUpdateWorkEntryRequest workEntriesUpdateWorkEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateWorkEntryValidateBeforeCall(id, workEntriesUpdateWorkEntryRequest, null);
        Type localVarReturnType = new TypeToken<WorkEntriesUpdateWorkEntryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWorkEntryAsync(UUID id, WorkEntriesUpdateWorkEntryRequest workEntriesUpdateWorkEntryRequest, final ApiCallback<WorkEntriesUpdateWorkEntryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkEntryValidateBeforeCall(id, workEntriesUpdateWorkEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<WorkEntriesUpdateWorkEntryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWorkEntryRequestBuilder {
        private final String workEntryType;
        private final WorkEntriesUpdateWorkEntryRequestWorkEntryIn workEntryIn;
        private final UUID id;
        private WorkEntriesUpdateWorkEntryRequestWorkEntryOut workEntryOut;

        private UpdateWorkEntryRequestBuilder(String workEntryType, WorkEntriesUpdateWorkEntryRequestWorkEntryIn workEntryIn, UUID id) {
            this.workEntryType = workEntryType;
            this.workEntryIn = workEntryIn;
            this.id = id;
        }

        /**
         * Set workEntryOut
         * @param workEntryOut  (optional)
         * @return UpdateWorkEntryRequestBuilder
         */
        public UpdateWorkEntryRequestBuilder workEntryOut(WorkEntriesUpdateWorkEntryRequestWorkEntryOut workEntryOut) {
            this.workEntryOut = workEntryOut;
            return this;
        }
        
        /**
         * Build call for updateWorkEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkEntriesUpdateWorkEntryRequest workEntriesUpdateWorkEntryRequest = buildBodyParams();
            return updateWorkEntryCall(id, workEntriesUpdateWorkEntryRequest, _callback);
        }

        private WorkEntriesUpdateWorkEntryRequest buildBodyParams() {
            WorkEntriesUpdateWorkEntryRequest workEntriesUpdateWorkEntryRequest = new WorkEntriesUpdateWorkEntryRequest();
            workEntriesUpdateWorkEntryRequest.workEntryType(this.workEntryType);
            workEntriesUpdateWorkEntryRequest.workEntryIn(this.workEntryIn);
            workEntriesUpdateWorkEntryRequest.workEntryOut(this.workEntryOut);
            return workEntriesUpdateWorkEntryRequest;
        }

        /**
         * Execute updateWorkEntry request
         * @return WorkEntriesUpdateWorkEntryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public WorkEntriesUpdateWorkEntryResponse execute() throws ApiException {
            WorkEntriesUpdateWorkEntryRequest workEntriesUpdateWorkEntryRequest = buildBodyParams();
            ApiResponse<WorkEntriesUpdateWorkEntryResponse> localVarResp = updateWorkEntryWithHttpInfo(id, workEntriesUpdateWorkEntryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWorkEntry request with HTTP info returned
         * @return ApiResponse&lt;WorkEntriesUpdateWorkEntryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkEntriesUpdateWorkEntryResponse> executeWithHttpInfo() throws ApiException {
            WorkEntriesUpdateWorkEntryRequest workEntriesUpdateWorkEntryRequest = buildBodyParams();
            return updateWorkEntryWithHttpInfo(id, workEntriesUpdateWorkEntryRequest);
        }

        /**
         * Execute updateWorkEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkEntriesUpdateWorkEntryResponse> _callback) throws ApiException {
            WorkEntriesUpdateWorkEntryRequest workEntriesUpdateWorkEntryRequest = buildBodyParams();
            return updateWorkEntryAsync(id, workEntriesUpdateWorkEntryRequest, _callback);
        }
    }

    /**
     * Update Work Entry
     * 
     * @param id Work Entry ID (required)
     * @param workEntriesUpdateWorkEntryRequest Update a Work Entry (required)
     * @return UpdateWorkEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWorkEntryRequestBuilder updateWorkEntry(String workEntryType, WorkEntriesUpdateWorkEntryRequestWorkEntryIn workEntryIn, UUID id) throws IllegalArgumentException {
        if (workEntryType == null) throw new IllegalArgumentException("\"workEntryType\" is required but got null");
            

        if (workEntryIn == null) throw new IllegalArgumentException("\"workEntryIn\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateWorkEntryRequestBuilder(workEntryType, workEntryIn, id);
    }
}
