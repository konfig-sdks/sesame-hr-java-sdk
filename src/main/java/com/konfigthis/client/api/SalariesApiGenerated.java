/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.SalariesCreateSalaryRequest;
import com.konfigthis.client.model.SalariesCreateSalaryResponse;
import com.konfigthis.client.model.SalariesDeleteSalaryResponse;
import com.konfigthis.client.model.SalariesListContributionGroupsResponse;
import com.konfigthis.client.model.SalariesListResponse;
import com.konfigthis.client.model.SalariesUpdateSalaryRequest;
import com.konfigthis.client.model.SalariesUpdateSalaryResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SalariesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SalariesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SalariesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSalaryCall(SalariesCreateSalaryRequest salariesCreateSalaryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = salariesCreateSalaryRequest;

        // create path and map variables
        String localVarPath = "/contract/v1/salaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSalaryValidateBeforeCall(SalariesCreateSalaryRequest salariesCreateSalaryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'salariesCreateSalaryRequest' is set
        if (salariesCreateSalaryRequest == null) {
            throw new ApiException("Missing the required parameter 'salariesCreateSalaryRequest' when calling createSalary(Async)");
        }

        return createSalaryCall(salariesCreateSalaryRequest, _callback);

    }


    private ApiResponse<SalariesCreateSalaryResponse> createSalaryWithHttpInfo(SalariesCreateSalaryRequest salariesCreateSalaryRequest) throws ApiException {
        okhttp3.Call localVarCall = createSalaryValidateBeforeCall(salariesCreateSalaryRequest, null);
        Type localVarReturnType = new TypeToken<SalariesCreateSalaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSalaryAsync(SalariesCreateSalaryRequest salariesCreateSalaryRequest, final ApiCallback<SalariesCreateSalaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSalaryValidateBeforeCall(salariesCreateSalaryRequest, _callback);
        Type localVarReturnType = new TypeToken<SalariesCreateSalaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSalaryRequestBuilder {
        private final UUID employeeId;
        private final String payPeriod;
        private final String currency;
        private final Float grossSalary;
        private final Integer payments;
        private final UUID contributionGroupId;
        private final LocalDate startDate;
        private LocalDate endDate;
        private String comments;

        private CreateSalaryRequestBuilder(UUID employeeId, String payPeriod, String currency, Float grossSalary, Integer payments, UUID contributionGroupId, LocalDate startDate) {
            this.employeeId = employeeId;
            this.payPeriod = payPeriod;
            this.currency = currency;
            this.grossSalary = grossSalary;
            this.payments = payments;
            this.contributionGroupId = contributionGroupId;
            this.startDate = startDate;
        }

        /**
         * Set endDate
         * @param endDate Salary end date (optional)
         * @return CreateSalaryRequestBuilder
         */
        public CreateSalaryRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set comments
         * @param comments Comments (optional)
         * @return CreateSalaryRequestBuilder
         */
        public CreateSalaryRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Build call for createSalary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SalariesCreateSalaryRequest salariesCreateSalaryRequest = buildBodyParams();
            return createSalaryCall(salariesCreateSalaryRequest, _callback);
        }

        private SalariesCreateSalaryRequest buildBodyParams() {
            SalariesCreateSalaryRequest salariesCreateSalaryRequest = new SalariesCreateSalaryRequest();
            salariesCreateSalaryRequest.employeeId(this.employeeId);
            if (this.payPeriod != null)
            salariesCreateSalaryRequest.payPeriod(SalariesCreateSalaryRequest.PayPeriodEnum.fromValue(this.payPeriod));
            salariesCreateSalaryRequest.currency(this.currency);
            salariesCreateSalaryRequest.grossSalary(this.grossSalary);
            salariesCreateSalaryRequest.payments(this.payments);
            salariesCreateSalaryRequest.contributionGroupId(this.contributionGroupId);
            salariesCreateSalaryRequest.startDate(this.startDate);
            salariesCreateSalaryRequest.endDate(this.endDate);
            salariesCreateSalaryRequest.comments(this.comments);
            return salariesCreateSalaryRequest;
        }

        /**
         * Execute createSalary request
         * @return SalariesCreateSalaryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public SalariesCreateSalaryResponse execute() throws ApiException {
            SalariesCreateSalaryRequest salariesCreateSalaryRequest = buildBodyParams();
            ApiResponse<SalariesCreateSalaryResponse> localVarResp = createSalaryWithHttpInfo(salariesCreateSalaryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSalary request with HTTP info returned
         * @return ApiResponse&lt;SalariesCreateSalaryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SalariesCreateSalaryResponse> executeWithHttpInfo() throws ApiException {
            SalariesCreateSalaryRequest salariesCreateSalaryRequest = buildBodyParams();
            return createSalaryWithHttpInfo(salariesCreateSalaryRequest);
        }

        /**
         * Execute createSalary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SalariesCreateSalaryResponse> _callback) throws ApiException {
            SalariesCreateSalaryRequest salariesCreateSalaryRequest = buildBodyParams();
            return createSalaryAsync(salariesCreateSalaryRequest, _callback);
        }
    }

    /**
     * Create Salary
     * 
     * @param salariesCreateSalaryRequest Salary object that needs to be created (required)
     * @return CreateSalaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public CreateSalaryRequestBuilder createSalary(UUID employeeId, String payPeriod, String currency, Float grossSalary, Integer payments, UUID contributionGroupId, LocalDate startDate) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (payPeriod == null) throw new IllegalArgumentException("\"payPeriod\" is required but got null");
            

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (grossSalary == null) throw new IllegalArgumentException("\"grossSalary\" is required but got null");
        if (payments == null) throw new IllegalArgumentException("\"payments\" is required but got null");
        if (contributionGroupId == null) throw new IllegalArgumentException("\"contributionGroupId\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        return new CreateSalaryRequestBuilder(employeeId, payPeriod, currency, grossSalary, payments, contributionGroupId, startDate);
    }
    private okhttp3.Call deleteSalaryCall(UUID salaryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/v1/salaries/{salaryId}"
            .replace("{" + "salaryId" + "}", localVarApiClient.escapeString(salaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSalaryValidateBeforeCall(UUID salaryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'salaryId' is set
        if (salaryId == null) {
            throw new ApiException("Missing the required parameter 'salaryId' when calling deleteSalary(Async)");
        }

        return deleteSalaryCall(salaryId, _callback);

    }


    private ApiResponse<SalariesDeleteSalaryResponse> deleteSalaryWithHttpInfo(UUID salaryId) throws ApiException {
        okhttp3.Call localVarCall = deleteSalaryValidateBeforeCall(salaryId, null);
        Type localVarReturnType = new TypeToken<SalariesDeleteSalaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteSalaryAsync(UUID salaryId, final ApiCallback<SalariesDeleteSalaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSalaryValidateBeforeCall(salaryId, _callback);
        Type localVarReturnType = new TypeToken<SalariesDeleteSalaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteSalaryRequestBuilder {
        private final UUID salaryId;

        private DeleteSalaryRequestBuilder(UUID salaryId) {
            this.salaryId = salaryId;
        }

        /**
         * Build call for deleteSalary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSalaryCall(salaryId, _callback);
        }


        /**
         * Execute deleteSalary request
         * @return SalariesDeleteSalaryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public SalariesDeleteSalaryResponse execute() throws ApiException {
            ApiResponse<SalariesDeleteSalaryResponse> localVarResp = deleteSalaryWithHttpInfo(salaryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteSalary request with HTTP info returned
         * @return ApiResponse&lt;SalariesDeleteSalaryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SalariesDeleteSalaryResponse> executeWithHttpInfo() throws ApiException {
            return deleteSalaryWithHttpInfo(salaryId);
        }

        /**
         * Execute deleteSalary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SalariesDeleteSalaryResponse> _callback) throws ApiException {
            return deleteSalaryAsync(salaryId, _callback);
        }
    }

    /**
     * Delete a salary
     * 
     * @param salaryId Salary ID (required)
     * @return DeleteSalaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSalaryRequestBuilder deleteSalary(UUID salaryId) throws IllegalArgumentException {
        if (salaryId == null) throw new IllegalArgumentException("\"salaryId\" is required but got null");
            

        return new DeleteSalaryRequestBuilder(salaryId);
    }
    private okhttp3.Call listCall(UUID employeeId, UUID salaryId, String payPeriod, Integer grossSalary, Integer payments, String contributionGroup, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/v1/salaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (salaryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salaryId", salaryId));
        }

        if (payPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payPeriod", payPeriod));
        }

        if (grossSalary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grossSalary", grossSalary));
        }

        if (payments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payments", payments));
        }

        if (contributionGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contributionGroup", contributionGroup));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(UUID employeeId, UUID salaryId, String payPeriod, Integer grossSalary, Integer payments, String contributionGroup, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling list(Async)");
        }

        return listCall(employeeId, salaryId, payPeriod, grossSalary, payments, contributionGroup, startDate, endDate, limit, page, _callback);

    }


    private ApiResponse<SalariesListResponse> listWithHttpInfo(UUID employeeId, UUID salaryId, String payPeriod, Integer grossSalary, Integer payments, String contributionGroup, LocalDate startDate, LocalDate endDate, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, salaryId, payPeriod, grossSalary, payments, contributionGroup, startDate, endDate, limit, page, null);
        Type localVarReturnType = new TypeToken<SalariesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(UUID employeeId, UUID salaryId, String payPeriod, Integer grossSalary, Integer payments, String contributionGroup, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback<SalariesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, salaryId, payPeriod, grossSalary, payments, contributionGroup, startDate, endDate, limit, page, _callback);
        Type localVarReturnType = new TypeToken<SalariesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final UUID employeeId;
        private UUID salaryId;
        private String payPeriod;
        private Integer grossSalary;
        private Integer payments;
        private String contributionGroup;
        private LocalDate startDate;
        private LocalDate endDate;
        private Integer limit;
        private Integer page;

        private ListRequestBuilder(UUID employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set salaryId
         * @param salaryId Salary ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder salaryId(UUID salaryId) {
            this.salaryId = salaryId;
            return this;
        }
        
        /**
         * Set payPeriod
         * @param payPeriod Pay Period (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder payPeriod(String payPeriod) {
            this.payPeriod = payPeriod;
            return this;
        }
        
        /**
         * Set grossSalary
         * @param grossSalary Gross Salary (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder grossSalary(Integer grossSalary) {
            this.grossSalary = grossSalary;
            return this;
        }
        
        /**
         * Set payments
         * @param payments Payments (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder payments(Integer payments) {
            this.payments = payments;
            return this;
        }
        
        /**
         * Set contributionGroup
         * @param contributionGroup Contribution Group (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder contributionGroup(String contributionGroup) {
            this.contributionGroup = contributionGroup;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Start Date (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate End Date (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit results (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(employeeId, salaryId, payPeriod, grossSalary, payments, contributionGroup, startDate, endDate, limit, page, _callback);
        }


        /**
         * Execute list request
         * @return SalariesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public SalariesListResponse execute() throws ApiException {
            ApiResponse<SalariesListResponse> localVarResp = listWithHttpInfo(employeeId, salaryId, payPeriod, grossSalary, payments, contributionGroup, startDate, endDate, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;SalariesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SalariesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(employeeId, salaryId, payPeriod, grossSalary, payments, contributionGroup, startDate, endDate, limit, page);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SalariesListResponse> _callback) throws ApiException {
            return listAsync(employeeId, salaryId, payPeriod, grossSalary, payments, contributionGroup, startDate, endDate, limit, page, _callback);
        }
    }

    /**
     * List Salaries
     * 
     * @param employeeId Employee ID (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(UUID employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListRequestBuilder(employeeId);
    }
    private okhttp3.Call listContributionGroupsCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/v1/contribution-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listContributionGroupsValidateBeforeCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        return listContributionGroupsCall(limit, page, _callback);

    }


    private ApiResponse<SalariesListContributionGroupsResponse> listContributionGroupsWithHttpInfo(Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listContributionGroupsValidateBeforeCall(limit, page, null);
        Type localVarReturnType = new TypeToken<SalariesListContributionGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listContributionGroupsAsync(Integer limit, Integer page, final ApiCallback<SalariesListContributionGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listContributionGroupsValidateBeforeCall(limit, page, _callback);
        Type localVarReturnType = new TypeToken<SalariesListContributionGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListContributionGroupsRequestBuilder {
        private Integer limit;
        private Integer page;

        private ListContributionGroupsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Limit results (optional)
         * @return ListContributionGroupsRequestBuilder
         */
        public ListContributionGroupsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListContributionGroupsRequestBuilder
         */
        public ListContributionGroupsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listContributionGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listContributionGroupsCall(limit, page, _callback);
        }


        /**
         * Execute listContributionGroups request
         * @return SalariesListContributionGroupsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public SalariesListContributionGroupsResponse execute() throws ApiException {
            ApiResponse<SalariesListContributionGroupsResponse> localVarResp = listContributionGroupsWithHttpInfo(limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listContributionGroups request with HTTP info returned
         * @return ApiResponse&lt;SalariesListContributionGroupsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SalariesListContributionGroupsResponse> executeWithHttpInfo() throws ApiException {
            return listContributionGroupsWithHttpInfo(limit, page);
        }

        /**
         * Execute listContributionGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SalariesListContributionGroupsResponse> _callback) throws ApiException {
            return listContributionGroupsAsync(limit, page, _callback);
        }
    }

    /**
     * List Contribution Groups
     * 
     * @return ListContributionGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListContributionGroupsRequestBuilder listContributionGroups() throws IllegalArgumentException {
        return new ListContributionGroupsRequestBuilder();
    }
    private okhttp3.Call updateSalaryCall(UUID salaryId, SalariesUpdateSalaryRequest salariesUpdateSalaryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = salariesUpdateSalaryRequest;

        // create path and map variables
        String localVarPath = "/contract/v1/salaries/{salaryId}"
            .replace("{" + "salaryId" + "}", localVarApiClient.escapeString(salaryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSalaryValidateBeforeCall(UUID salaryId, SalariesUpdateSalaryRequest salariesUpdateSalaryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'salaryId' is set
        if (salaryId == null) {
            throw new ApiException("Missing the required parameter 'salaryId' when calling updateSalary(Async)");
        }

        // verify the required parameter 'salariesUpdateSalaryRequest' is set
        if (salariesUpdateSalaryRequest == null) {
            throw new ApiException("Missing the required parameter 'salariesUpdateSalaryRequest' when calling updateSalary(Async)");
        }

        return updateSalaryCall(salaryId, salariesUpdateSalaryRequest, _callback);

    }


    private ApiResponse<SalariesUpdateSalaryResponse> updateSalaryWithHttpInfo(UUID salaryId, SalariesUpdateSalaryRequest salariesUpdateSalaryRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSalaryValidateBeforeCall(salaryId, salariesUpdateSalaryRequest, null);
        Type localVarReturnType = new TypeToken<SalariesUpdateSalaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSalaryAsync(UUID salaryId, SalariesUpdateSalaryRequest salariesUpdateSalaryRequest, final ApiCallback<SalariesUpdateSalaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSalaryValidateBeforeCall(salaryId, salariesUpdateSalaryRequest, _callback);
        Type localVarReturnType = new TypeToken<SalariesUpdateSalaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSalaryRequestBuilder {
        private final UUID salaryId;
        private LocalDate endDate;
        private String comments;

        private UpdateSalaryRequestBuilder(UUID salaryId) {
            this.salaryId = salaryId;
        }

        /**
         * Set endDate
         * @param endDate End date of salary (optional)
         * @return UpdateSalaryRequestBuilder
         */
        public UpdateSalaryRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set comments
         * @param comments Comments (optional)
         * @return UpdateSalaryRequestBuilder
         */
        public UpdateSalaryRequestBuilder comments(String comments) {
            this.comments = comments;
            return this;
        }
        
        /**
         * Build call for updateSalary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SalariesUpdateSalaryRequest salariesUpdateSalaryRequest = buildBodyParams();
            return updateSalaryCall(salaryId, salariesUpdateSalaryRequest, _callback);
        }

        private SalariesUpdateSalaryRequest buildBodyParams() {
            SalariesUpdateSalaryRequest salariesUpdateSalaryRequest = new SalariesUpdateSalaryRequest();
            salariesUpdateSalaryRequest.endDate(this.endDate);
            salariesUpdateSalaryRequest.comments(this.comments);
            return salariesUpdateSalaryRequest;
        }

        /**
         * Execute updateSalary request
         * @return SalariesUpdateSalaryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public SalariesUpdateSalaryResponse execute() throws ApiException {
            SalariesUpdateSalaryRequest salariesUpdateSalaryRequest = buildBodyParams();
            ApiResponse<SalariesUpdateSalaryResponse> localVarResp = updateSalaryWithHttpInfo(salaryId, salariesUpdateSalaryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSalary request with HTTP info returned
         * @return ApiResponse&lt;SalariesUpdateSalaryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SalariesUpdateSalaryResponse> executeWithHttpInfo() throws ApiException {
            SalariesUpdateSalaryRequest salariesUpdateSalaryRequest = buildBodyParams();
            return updateSalaryWithHttpInfo(salaryId, salariesUpdateSalaryRequest);
        }

        /**
         * Execute updateSalary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SalariesUpdateSalaryResponse> _callback) throws ApiException {
            SalariesUpdateSalaryRequest salariesUpdateSalaryRequest = buildBodyParams();
            return updateSalaryAsync(salaryId, salariesUpdateSalaryRequest, _callback);
        }
    }

    /**
     * Update a salary
     * 
     * @param salaryId Salary ID (required)
     * @param salariesUpdateSalaryRequest Salary object that needs to be updated (required)
     * @return UpdateSalaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSalaryRequestBuilder updateSalary(UUID salaryId) throws IllegalArgumentException {
        if (salaryId == null) throw new IllegalArgumentException("\"salaryId\" is required but got null");
            

        return new UpdateSalaryRequestBuilder(salaryId);
    }
}
