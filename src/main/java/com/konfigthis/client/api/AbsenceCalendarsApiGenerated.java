/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AbsenceCalendarsCreateCalendarRequest;
import com.konfigthis.client.model.AbsenceCalendarsCreateCalendarRequestDaysOffInner;
import com.konfigthis.client.model.AbsenceCalendarsCreateCalendarResponse;
import com.konfigthis.client.model.AbsenceCalendarsListResponse;
import com.konfigthis.client.model.AbsenceCalendarsUpdateByIdRequest;
import com.konfigthis.client.model.AbsenceCalendarsUpdateByIdRequestDaysOffInner;
import com.konfigthis.client.model.AbsenceCalendarsUpdateByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AbsenceCalendarsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AbsenceCalendarsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AbsenceCalendarsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCalendarCall(AbsenceCalendarsCreateCalendarRequest absenceCalendarsCreateCalendarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = absenceCalendarsCreateCalendarRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/absence-calendars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCalendarValidateBeforeCall(AbsenceCalendarsCreateCalendarRequest absenceCalendarsCreateCalendarRequest, final ApiCallback _callback) throws ApiException {
        return createCalendarCall(absenceCalendarsCreateCalendarRequest, _callback);

    }


    private ApiResponse<AbsenceCalendarsCreateCalendarResponse> createCalendarWithHttpInfo(AbsenceCalendarsCreateCalendarRequest absenceCalendarsCreateCalendarRequest) throws ApiException {
        okhttp3.Call localVarCall = createCalendarValidateBeforeCall(absenceCalendarsCreateCalendarRequest, null);
        Type localVarReturnType = new TypeToken<AbsenceCalendarsCreateCalendarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCalendarAsync(AbsenceCalendarsCreateCalendarRequest absenceCalendarsCreateCalendarRequest, final ApiCallback<AbsenceCalendarsCreateCalendarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCalendarValidateBeforeCall(absenceCalendarsCreateCalendarRequest, _callback);
        Type localVarReturnType = new TypeToken<AbsenceCalendarsCreateCalendarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCalendarRequestBuilder {
        private final UUID employeeId;
        private final UUID absenceTypeId;
        private final Integer year;
        private final List<AbsenceCalendarsCreateCalendarRequestDaysOffInner> daysOff;

        private CreateCalendarRequestBuilder(UUID employeeId, UUID absenceTypeId, Integer year, List<AbsenceCalendarsCreateCalendarRequestDaysOffInner> daysOff) {
            this.employeeId = employeeId;
            this.absenceTypeId = absenceTypeId;
            this.year = year;
            this.daysOff = daysOff;
        }

        /**
         * Build call for createCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AbsenceCalendarsCreateCalendarRequest absenceCalendarsCreateCalendarRequest = buildBodyParams();
            return createCalendarCall(absenceCalendarsCreateCalendarRequest, _callback);
        }

        private AbsenceCalendarsCreateCalendarRequest buildBodyParams() {
            AbsenceCalendarsCreateCalendarRequest absenceCalendarsCreateCalendarRequest = new AbsenceCalendarsCreateCalendarRequest();
            absenceCalendarsCreateCalendarRequest.employeeId(this.employeeId);
            absenceCalendarsCreateCalendarRequest.absenceTypeId(this.absenceTypeId);
            absenceCalendarsCreateCalendarRequest.year(this.year);
            absenceCalendarsCreateCalendarRequest.daysOff(this.daysOff);
            return absenceCalendarsCreateCalendarRequest;
        }

        /**
         * Execute createCalendar request
         * @return AbsenceCalendarsCreateCalendarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public AbsenceCalendarsCreateCalendarResponse execute() throws ApiException {
            AbsenceCalendarsCreateCalendarRequest absenceCalendarsCreateCalendarRequest = buildBodyParams();
            ApiResponse<AbsenceCalendarsCreateCalendarResponse> localVarResp = createCalendarWithHttpInfo(absenceCalendarsCreateCalendarRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCalendar request with HTTP info returned
         * @return ApiResponse&lt;AbsenceCalendarsCreateCalendarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsenceCalendarsCreateCalendarResponse> executeWithHttpInfo() throws ApiException {
            AbsenceCalendarsCreateCalendarRequest absenceCalendarsCreateCalendarRequest = buildBodyParams();
            return createCalendarWithHttpInfo(absenceCalendarsCreateCalendarRequest);
        }

        /**
         * Execute createCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsenceCalendarsCreateCalendarResponse> _callback) throws ApiException {
            AbsenceCalendarsCreateCalendarRequest absenceCalendarsCreateCalendarRequest = buildBodyParams();
            return createCalendarAsync(absenceCalendarsCreateCalendarRequest, _callback);
        }
    }

    /**
     * Create Absence Calendar
     * 
     * @return CreateCalendarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public CreateCalendarRequestBuilder createCalendar(UUID employeeId, UUID absenceTypeId, Integer year, List<AbsenceCalendarsCreateCalendarRequestDaysOffInner> daysOff) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (absenceTypeId == null) throw new IllegalArgumentException("\"absenceTypeId\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        if (daysOff == null) throw new IllegalArgumentException("\"daysOff\" is required but got null");
        return new CreateCalendarRequestBuilder(employeeId, absenceTypeId, year, daysOff);
    }
    private okhttp3.Call listCall(UUID employeeId, UUID type, List<Integer> yearIn, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/absence-calendars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (yearIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "year[in]", yearIn));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(UUID employeeId, UUID type, List<Integer> yearIn, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        return listCall(employeeId, type, yearIn, limit, page, _callback);

    }


    private ApiResponse<AbsenceCalendarsListResponse> listWithHttpInfo(UUID employeeId, UUID type, List<Integer> yearIn, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, type, yearIn, limit, page, null);
        Type localVarReturnType = new TypeToken<AbsenceCalendarsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(UUID employeeId, UUID type, List<Integer> yearIn, Integer limit, Integer page, final ApiCallback<AbsenceCalendarsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(employeeId, type, yearIn, limit, page, _callback);
        Type localVarReturnType = new TypeToken<AbsenceCalendarsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private UUID employeeId;
        private UUID type;
        private List<Integer> yearIn;
        private Integer limit;
        private Integer page;

        private ListRequestBuilder() {
        }

        /**
         * Set employeeId
         * @param employeeId Employee ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder employeeId(UUID employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set type
         * @param type Absence Type ID (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder type(UUID type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set yearIn
         * @param yearIn Year calendar (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder yearIn(List<Integer> yearIn) {
            this.yearIn = yearIn;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit results (optional, default to 20)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(employeeId, type, yearIn, limit, page, _callback);
        }


        /**
         * Execute list request
         * @return AbsenceCalendarsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public AbsenceCalendarsListResponse execute() throws ApiException {
            ApiResponse<AbsenceCalendarsListResponse> localVarResp = listWithHttpInfo(employeeId, type, yearIn, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;AbsenceCalendarsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsenceCalendarsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(employeeId, type, yearIn, limit, page);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsenceCalendarsListResponse> _callback) throws ApiException {
            return listAsync(employeeId, type, yearIn, limit, page, _callback);
        }
    }

    /**
     * List Absence Calendars
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateByIdCall(UUID id, AbsenceCalendarsUpdateByIdRequest absenceCalendarsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = absenceCalendarsUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/absence-calendars/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(UUID id, AbsenceCalendarsUpdateByIdRequest absenceCalendarsUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        return updateByIdCall(id, absenceCalendarsUpdateByIdRequest, _callback);

    }


    private ApiResponse<AbsenceCalendarsUpdateByIdResponse> updateByIdWithHttpInfo(UUID id, AbsenceCalendarsUpdateByIdRequest absenceCalendarsUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, absenceCalendarsUpdateByIdRequest, null);
        Type localVarReturnType = new TypeToken<AbsenceCalendarsUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(UUID id, AbsenceCalendarsUpdateByIdRequest absenceCalendarsUpdateByIdRequest, final ApiCallback<AbsenceCalendarsUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, absenceCalendarsUpdateByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<AbsenceCalendarsUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final List<AbsenceCalendarsUpdateByIdRequestDaysOffInner> daysOff;
        private final UUID id;

        private UpdateByIdRequestBuilder(List<AbsenceCalendarsUpdateByIdRequestDaysOffInner> daysOff, UUID id) {
            this.daysOff = daysOff;
            this.id = id;
        }

        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AbsenceCalendarsUpdateByIdRequest absenceCalendarsUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(id, absenceCalendarsUpdateByIdRequest, _callback);
        }

        private AbsenceCalendarsUpdateByIdRequest buildBodyParams() {
            AbsenceCalendarsUpdateByIdRequest absenceCalendarsUpdateByIdRequest = new AbsenceCalendarsUpdateByIdRequest();
            absenceCalendarsUpdateByIdRequest.daysOff(this.daysOff);
            return absenceCalendarsUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @return AbsenceCalendarsUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public AbsenceCalendarsUpdateByIdResponse execute() throws ApiException {
            AbsenceCalendarsUpdateByIdRequest absenceCalendarsUpdateByIdRequest = buildBodyParams();
            ApiResponse<AbsenceCalendarsUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(id, absenceCalendarsUpdateByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;AbsenceCalendarsUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsenceCalendarsUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            AbsenceCalendarsUpdateByIdRequest absenceCalendarsUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(id, absenceCalendarsUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsenceCalendarsUpdateByIdResponse> _callback) throws ApiException {
            AbsenceCalendarsUpdateByIdRequest absenceCalendarsUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(id, absenceCalendarsUpdateByIdRequest, _callback);
        }
    }

    /**
     * Update Absence Calendar
     * 
     * @param id Calendar ID (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(List<AbsenceCalendarsUpdateByIdRequestDaysOffInner> daysOff, UUID id) throws IllegalArgumentException {
        if (daysOff == null) throw new IllegalArgumentException("\"daysOff\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateByIdRequestBuilder(daysOff, id);
    }
}
