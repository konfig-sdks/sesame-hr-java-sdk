/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;
import com.konfigthis.client.model.VacationCalendarsCreateNewCalendarRequest;
import com.konfigthis.client.model.VacationCalendarsCreateNewCalendarRequestDaysOffInner;
import com.konfigthis.client.model.VacationCalendarsCreateNewCalendarResponse;
import com.konfigthis.client.model.VacationCalendarsListCalendarsResponse;
import com.konfigthis.client.model.VacationCalendarsUpdateCalendarRequest;
import com.konfigthis.client.model.VacationCalendarsUpdateCalendarRequestDaysOffInner;
import com.konfigthis.client.model.VacationCalendarsUpdateCalendarResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VacationCalendarsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VacationCalendarsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VacationCalendarsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCalendarCall(VacationCalendarsCreateNewCalendarRequest vacationCalendarsCreateNewCalendarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vacationCalendarsCreateNewCalendarRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/vacation-calendars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCalendarValidateBeforeCall(VacationCalendarsCreateNewCalendarRequest vacationCalendarsCreateNewCalendarRequest, final ApiCallback _callback) throws ApiException {
        return createNewCalendarCall(vacationCalendarsCreateNewCalendarRequest, _callback);

    }


    private ApiResponse<VacationCalendarsCreateNewCalendarResponse> createNewCalendarWithHttpInfo(VacationCalendarsCreateNewCalendarRequest vacationCalendarsCreateNewCalendarRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewCalendarValidateBeforeCall(vacationCalendarsCreateNewCalendarRequest, null);
        Type localVarReturnType = new TypeToken<VacationCalendarsCreateNewCalendarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewCalendarAsync(VacationCalendarsCreateNewCalendarRequest vacationCalendarsCreateNewCalendarRequest, final ApiCallback<VacationCalendarsCreateNewCalendarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCalendarValidateBeforeCall(vacationCalendarsCreateNewCalendarRequest, _callback);
        Type localVarReturnType = new TypeToken<VacationCalendarsCreateNewCalendarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewCalendarRequestBuilder {
        private final UUID employeeId;
        private final UUID vacationConfigurationId;
        private final Integer year;
        private final List<VacationCalendarsCreateNewCalendarRequestDaysOffInner> daysOff;

        private CreateNewCalendarRequestBuilder(UUID employeeId, UUID vacationConfigurationId, Integer year, List<VacationCalendarsCreateNewCalendarRequestDaysOffInner> daysOff) {
            this.employeeId = employeeId;
            this.vacationConfigurationId = vacationConfigurationId;
            this.year = year;
            this.daysOff = daysOff;
        }

        /**
         * Build call for createNewCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VacationCalendarsCreateNewCalendarRequest vacationCalendarsCreateNewCalendarRequest = buildBodyParams();
            return createNewCalendarCall(vacationCalendarsCreateNewCalendarRequest, _callback);
        }

        private VacationCalendarsCreateNewCalendarRequest buildBodyParams() {
            VacationCalendarsCreateNewCalendarRequest vacationCalendarsCreateNewCalendarRequest = new VacationCalendarsCreateNewCalendarRequest();
            vacationCalendarsCreateNewCalendarRequest.employeeId(this.employeeId);
            vacationCalendarsCreateNewCalendarRequest.vacationConfigurationId(this.vacationConfigurationId);
            vacationCalendarsCreateNewCalendarRequest.year(this.year);
            vacationCalendarsCreateNewCalendarRequest.daysOff(this.daysOff);
            return vacationCalendarsCreateNewCalendarRequest;
        }

        /**
         * Execute createNewCalendar request
         * @return VacationCalendarsCreateNewCalendarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public VacationCalendarsCreateNewCalendarResponse execute() throws ApiException {
            VacationCalendarsCreateNewCalendarRequest vacationCalendarsCreateNewCalendarRequest = buildBodyParams();
            ApiResponse<VacationCalendarsCreateNewCalendarResponse> localVarResp = createNewCalendarWithHttpInfo(vacationCalendarsCreateNewCalendarRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewCalendar request with HTTP info returned
         * @return ApiResponse&lt;VacationCalendarsCreateNewCalendarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VacationCalendarsCreateNewCalendarResponse> executeWithHttpInfo() throws ApiException {
            VacationCalendarsCreateNewCalendarRequest vacationCalendarsCreateNewCalendarRequest = buildBodyParams();
            return createNewCalendarWithHttpInfo(vacationCalendarsCreateNewCalendarRequest);
        }

        /**
         * Execute createNewCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VacationCalendarsCreateNewCalendarResponse> _callback) throws ApiException {
            VacationCalendarsCreateNewCalendarRequest vacationCalendarsCreateNewCalendarRequest = buildBodyParams();
            return createNewCalendarAsync(vacationCalendarsCreateNewCalendarRequest, _callback);
        }
    }

    /**
     * Create Vacation Calendar
     * 
     * @return CreateNewCalendarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewCalendarRequestBuilder createNewCalendar(UUID employeeId, UUID vacationConfigurationId, Integer year, List<VacationCalendarsCreateNewCalendarRequestDaysOffInner> daysOff) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (vacationConfigurationId == null) throw new IllegalArgumentException("\"vacationConfigurationId\" is required but got null");
            

        if (year == null) throw new IllegalArgumentException("\"year\" is required but got null");
        if (daysOff == null) throw new IllegalArgumentException("\"daysOff\" is required but got null");
        return new CreateNewCalendarRequestBuilder(employeeId, vacationConfigurationId, year, daysOff);
    }
    private okhttp3.Call listCalendarsCall(UUID employeeId, List<Integer> yearIn, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/schedule/v1/vacation-calendars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (yearIn != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "year[in]", yearIn));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCalendarsValidateBeforeCall(UUID employeeId, List<Integer> yearIn, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        return listCalendarsCall(employeeId, yearIn, limit, page, _callback);

    }


    private ApiResponse<VacationCalendarsListCalendarsResponse> listCalendarsWithHttpInfo(UUID employeeId, List<Integer> yearIn, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listCalendarsValidateBeforeCall(employeeId, yearIn, limit, page, null);
        Type localVarReturnType = new TypeToken<VacationCalendarsListCalendarsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCalendarsAsync(UUID employeeId, List<Integer> yearIn, Integer limit, Integer page, final ApiCallback<VacationCalendarsListCalendarsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCalendarsValidateBeforeCall(employeeId, yearIn, limit, page, _callback);
        Type localVarReturnType = new TypeToken<VacationCalendarsListCalendarsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCalendarsRequestBuilder {
        private UUID employeeId;
        private List<Integer> yearIn;
        private Integer limit;
        private Integer page;

        private ListCalendarsRequestBuilder() {
        }

        /**
         * Set employeeId
         * @param employeeId Employee ID (optional)
         * @return ListCalendarsRequestBuilder
         */
        public ListCalendarsRequestBuilder employeeId(UUID employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set yearIn
         * @param yearIn Year calendar (optional)
         * @return ListCalendarsRequestBuilder
         */
        public ListCalendarsRequestBuilder yearIn(List<Integer> yearIn) {
            this.yearIn = yearIn;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit results (optional, default to 20)
         * @return ListCalendarsRequestBuilder
         */
        public ListCalendarsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListCalendarsRequestBuilder
         */
        public ListCalendarsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listCalendars
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCalendarsCall(employeeId, yearIn, limit, page, _callback);
        }


        /**
         * Execute listCalendars request
         * @return VacationCalendarsListCalendarsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public VacationCalendarsListCalendarsResponse execute() throws ApiException {
            ApiResponse<VacationCalendarsListCalendarsResponse> localVarResp = listCalendarsWithHttpInfo(employeeId, yearIn, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCalendars request with HTTP info returned
         * @return ApiResponse&lt;VacationCalendarsListCalendarsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VacationCalendarsListCalendarsResponse> executeWithHttpInfo() throws ApiException {
            return listCalendarsWithHttpInfo(employeeId, yearIn, limit, page);
        }

        /**
         * Execute listCalendars request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VacationCalendarsListCalendarsResponse> _callback) throws ApiException {
            return listCalendarsAsync(employeeId, yearIn, limit, page, _callback);
        }
    }

    /**
     * List Vacation Calendars
     * 
     * @return ListCalendarsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public ListCalendarsRequestBuilder listCalendars() throws IllegalArgumentException {
        return new ListCalendarsRequestBuilder();
    }
    private okhttp3.Call updateCalendarCall(UUID id, VacationCalendarsUpdateCalendarRequest vacationCalendarsUpdateCalendarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vacationCalendarsUpdateCalendarRequest;

        // create path and map variables
        String localVarPath = "/schedule/v1/vacation-calendars/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCalendarValidateBeforeCall(UUID id, VacationCalendarsUpdateCalendarRequest vacationCalendarsUpdateCalendarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCalendar(Async)");
        }

        // verify the required parameter 'vacationCalendarsUpdateCalendarRequest' is set
        if (vacationCalendarsUpdateCalendarRequest == null) {
            throw new ApiException("Missing the required parameter 'vacationCalendarsUpdateCalendarRequest' when calling updateCalendar(Async)");
        }

        return updateCalendarCall(id, vacationCalendarsUpdateCalendarRequest, _callback);

    }


    private ApiResponse<VacationCalendarsUpdateCalendarResponse> updateCalendarWithHttpInfo(UUID id, VacationCalendarsUpdateCalendarRequest vacationCalendarsUpdateCalendarRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCalendarValidateBeforeCall(id, vacationCalendarsUpdateCalendarRequest, null);
        Type localVarReturnType = new TypeToken<VacationCalendarsUpdateCalendarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCalendarAsync(UUID id, VacationCalendarsUpdateCalendarRequest vacationCalendarsUpdateCalendarRequest, final ApiCallback<VacationCalendarsUpdateCalendarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCalendarValidateBeforeCall(id, vacationCalendarsUpdateCalendarRequest, _callback);
        Type localVarReturnType = new TypeToken<VacationCalendarsUpdateCalendarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCalendarRequestBuilder {
        private final UUID id;
        private List<VacationCalendarsUpdateCalendarRequestDaysOffInner> daysOff;
        private Integer maxDaysOff;

        private UpdateCalendarRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Set daysOff
         * @param daysOff array of VacationCalendarDayOff (optional)
         * @return UpdateCalendarRequestBuilder
         */
        public UpdateCalendarRequestBuilder daysOff(List<VacationCalendarsUpdateCalendarRequestDaysOffInner> daysOff) {
            this.daysOff = daysOff;
            return this;
        }
        
        /**
         * Set maxDaysOff
         * @param maxDaysOff This limit will have priority over the Vacation Configuration maxDaysOff limit (optional)
         * @return UpdateCalendarRequestBuilder
         */
        public UpdateCalendarRequestBuilder maxDaysOff(Integer maxDaysOff) {
            this.maxDaysOff = maxDaysOff;
            return this;
        }
        
        /**
         * Build call for updateCalendar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VacationCalendarsUpdateCalendarRequest vacationCalendarsUpdateCalendarRequest = buildBodyParams();
            return updateCalendarCall(id, vacationCalendarsUpdateCalendarRequest, _callback);
        }

        private VacationCalendarsUpdateCalendarRequest buildBodyParams() {
            VacationCalendarsUpdateCalendarRequest vacationCalendarsUpdateCalendarRequest = new VacationCalendarsUpdateCalendarRequest();
            vacationCalendarsUpdateCalendarRequest.daysOff(this.daysOff);
            vacationCalendarsUpdateCalendarRequest.maxDaysOff(this.maxDaysOff);
            return vacationCalendarsUpdateCalendarRequest;
        }

        /**
         * Execute updateCalendar request
         * @return VacationCalendarsUpdateCalendarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public VacationCalendarsUpdateCalendarResponse execute() throws ApiException {
            VacationCalendarsUpdateCalendarRequest vacationCalendarsUpdateCalendarRequest = buildBodyParams();
            ApiResponse<VacationCalendarsUpdateCalendarResponse> localVarResp = updateCalendarWithHttpInfo(id, vacationCalendarsUpdateCalendarRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCalendar request with HTTP info returned
         * @return ApiResponse&lt;VacationCalendarsUpdateCalendarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VacationCalendarsUpdateCalendarResponse> executeWithHttpInfo() throws ApiException {
            VacationCalendarsUpdateCalendarRequest vacationCalendarsUpdateCalendarRequest = buildBodyParams();
            return updateCalendarWithHttpInfo(id, vacationCalendarsUpdateCalendarRequest);
        }

        /**
         * Execute updateCalendar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VacationCalendarsUpdateCalendarResponse> _callback) throws ApiException {
            VacationCalendarsUpdateCalendarRequest vacationCalendarsUpdateCalendarRequest = buildBodyParams();
            return updateCalendarAsync(id, vacationCalendarsUpdateCalendarRequest, _callback);
        }
    }

    /**
     * Update Vacation Calendar
     * 
     * @param id Calendar ID (required)
     * @param vacationCalendarsUpdateCalendarRequest Vacation Calendar object that needs to be updated (required)
     * @return UpdateCalendarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCalendarRequestBuilder updateCalendar(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateCalendarRequestBuilder(id);
    }
}
