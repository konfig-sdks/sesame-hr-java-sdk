/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomFieldsCreateFieldRequest;
import com.konfigthis.client.model.CustomFieldsCreateFieldResponse;
import com.konfigthis.client.model.CustomFieldsDeleteFieldResponse;
import com.konfigthis.client.model.CustomFieldsListResponse;
import com.konfigthis.client.model.CustomFieldsUpdateFieldByIdRequest;
import com.konfigthis.client.model.CustomFieldsUpdateFieldByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomFieldsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomFieldsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomFieldsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFieldCall(CustomFieldsCreateFieldRequest customFieldsCreateFieldRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldsCreateFieldRequest;

        // create path and map variables
        String localVarPath = "/core/v3/custom-fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFieldValidateBeforeCall(CustomFieldsCreateFieldRequest customFieldsCreateFieldRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customFieldsCreateFieldRequest' is set
        if (customFieldsCreateFieldRequest == null) {
            throw new ApiException("Missing the required parameter 'customFieldsCreateFieldRequest' when calling createField(Async)");
        }

        return createFieldCall(customFieldsCreateFieldRequest, _callback);

    }


    private ApiResponse<CustomFieldsCreateFieldResponse> createFieldWithHttpInfo(CustomFieldsCreateFieldRequest customFieldsCreateFieldRequest) throws ApiException {
        okhttp3.Call localVarCall = createFieldValidateBeforeCall(customFieldsCreateFieldRequest, null);
        Type localVarReturnType = new TypeToken<CustomFieldsCreateFieldResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFieldAsync(CustomFieldsCreateFieldRequest customFieldsCreateFieldRequest, final ApiCallback<CustomFieldsCreateFieldResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFieldValidateBeforeCall(customFieldsCreateFieldRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsCreateFieldResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFieldRequestBuilder {
        private final UUID companyId;
        private final String name;
        private final String type;
        private String slug;

        private CreateFieldRequestBuilder(UUID companyId, String name, String type) {
            this.companyId = companyId;
            this.name = name;
            this.type = type;
        }

        /**
         * Set slug
         * @param slug  (optional)
         * @return CreateFieldRequestBuilder
         */
        public CreateFieldRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Build call for createField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldsCreateFieldRequest customFieldsCreateFieldRequest = buildBodyParams();
            return createFieldCall(customFieldsCreateFieldRequest, _callback);
        }

        private CustomFieldsCreateFieldRequest buildBodyParams() {
            CustomFieldsCreateFieldRequest customFieldsCreateFieldRequest = new CustomFieldsCreateFieldRequest();
            customFieldsCreateFieldRequest.companyId(this.companyId);
            customFieldsCreateFieldRequest.name(this.name);
            customFieldsCreateFieldRequest.slug(this.slug);
            if (this.type != null)
            customFieldsCreateFieldRequest.type(CustomFieldsCreateFieldRequest.TypeEnum.fromValue(this.type));
            return customFieldsCreateFieldRequest;
        }

        /**
         * Execute createField request
         * @return CustomFieldsCreateFieldResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsCreateFieldResponse execute() throws ApiException {
            CustomFieldsCreateFieldRequest customFieldsCreateFieldRequest = buildBodyParams();
            ApiResponse<CustomFieldsCreateFieldResponse> localVarResp = createFieldWithHttpInfo(customFieldsCreateFieldRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createField request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsCreateFieldResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsCreateFieldResponse> executeWithHttpInfo() throws ApiException {
            CustomFieldsCreateFieldRequest customFieldsCreateFieldRequest = buildBodyParams();
            return createFieldWithHttpInfo(customFieldsCreateFieldRequest);
        }

        /**
         * Execute createField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsCreateFieldResponse> _callback) throws ApiException {
            CustomFieldsCreateFieldRequest customFieldsCreateFieldRequest = buildBodyParams();
            return createFieldAsync(customFieldsCreateFieldRequest, _callback);
        }
    }

    /**
     * Create a custom field
     * 
     * @param customFieldsCreateFieldRequest Custom Field object that needs to be created (required)
     * @return CreateFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateFieldRequestBuilder createField(UUID companyId, String name, String type) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateFieldRequestBuilder(companyId, name, type);
    }
    private okhttp3.Call deleteFieldCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v3/custom-fields/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteField(Async)");
        }

        return deleteFieldCall(id, _callback);

    }


    private ApiResponse<CustomFieldsDeleteFieldResponse> deleteFieldWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CustomFieldsDeleteFieldResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFieldAsync(UUID id, final ApiCallback<CustomFieldsDeleteFieldResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsDeleteFieldResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteFieldRequestBuilder {
        private final UUID id;

        private DeleteFieldRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFieldCall(id, _callback);
        }


        /**
         * Execute deleteField request
         * @return CustomFieldsDeleteFieldResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsDeleteFieldResponse execute() throws ApiException {
            ApiResponse<CustomFieldsDeleteFieldResponse> localVarResp = deleteFieldWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteField request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsDeleteFieldResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsDeleteFieldResponse> executeWithHttpInfo() throws ApiException {
            return deleteFieldWithHttpInfo(id);
        }

        /**
         * Execute deleteField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsDeleteFieldResponse> _callback) throws ApiException {
            return deleteFieldAsync(id, _callback);
        }
    }

    /**
     * Delete a custom field
     * 
     * @param id Custom field ID (required)
     * @return DeleteFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFieldRequestBuilder deleteField(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteFieldRequestBuilder(id);
    }
    private okhttp3.Call listCall(Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v3/custom-fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        return listCall(limit, page, orderBy, _callback);

    }


    private ApiResponse<CustomFieldsListResponse> listWithHttpInfo(Integer limit, Integer page, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(limit, page, orderBy, null);
        Type localVarReturnType = new TypeToken<CustomFieldsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer limit, Integer page, String orderBy, final ApiCallback<CustomFieldsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(limit, page, orderBy, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Integer limit;
        private Integer page;
        private String orderBy;

        private ListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Limit custom fields (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy field1 asc, field2 desc (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(limit, page, orderBy, _callback);
        }


        /**
         * Execute list request
         * @return CustomFieldsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsListResponse execute() throws ApiException {
            ApiResponse<CustomFieldsListResponse> localVarResp = listWithHttpInfo(limit, page, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(limit, page, orderBy);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsListResponse> _callback) throws ApiException {
            return listAsync(limit, page, orderBy, _callback);
        }
    }

    /**
     * List custom fields
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateFieldByIdCall(UUID id, CustomFieldsUpdateFieldByIdRequest customFieldsUpdateFieldByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customFieldsUpdateFieldByIdRequest;

        // create path and map variables
        String localVarPath = "/core/v3/custom-fields/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldByIdValidateBeforeCall(UUID id, CustomFieldsUpdateFieldByIdRequest customFieldsUpdateFieldByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFieldById(Async)");
        }

        // verify the required parameter 'customFieldsUpdateFieldByIdRequest' is set
        if (customFieldsUpdateFieldByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'customFieldsUpdateFieldByIdRequest' when calling updateFieldById(Async)");
        }

        return updateFieldByIdCall(id, customFieldsUpdateFieldByIdRequest, _callback);

    }


    private ApiResponse<CustomFieldsUpdateFieldByIdResponse> updateFieldByIdWithHttpInfo(UUID id, CustomFieldsUpdateFieldByIdRequest customFieldsUpdateFieldByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFieldByIdValidateBeforeCall(id, customFieldsUpdateFieldByIdRequest, null);
        Type localVarReturnType = new TypeToken<CustomFieldsUpdateFieldByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFieldByIdAsync(UUID id, CustomFieldsUpdateFieldByIdRequest customFieldsUpdateFieldByIdRequest, final ApiCallback<CustomFieldsUpdateFieldByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldByIdValidateBeforeCall(id, customFieldsUpdateFieldByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomFieldsUpdateFieldByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFieldByIdRequestBuilder {
        private final String name;
        private final UUID id;
        private String slug;

        private UpdateFieldByIdRequestBuilder(String name, UUID id) {
            this.name = name;
            this.id = id;
        }

        /**
         * Set slug
         * @param slug  (optional)
         * @return UpdateFieldByIdRequestBuilder
         */
        public UpdateFieldByIdRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Build call for updateFieldById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomFieldsUpdateFieldByIdRequest customFieldsUpdateFieldByIdRequest = buildBodyParams();
            return updateFieldByIdCall(id, customFieldsUpdateFieldByIdRequest, _callback);
        }

        private CustomFieldsUpdateFieldByIdRequest buildBodyParams() {
            CustomFieldsUpdateFieldByIdRequest customFieldsUpdateFieldByIdRequest = new CustomFieldsUpdateFieldByIdRequest();
            customFieldsUpdateFieldByIdRequest.name(this.name);
            customFieldsUpdateFieldByIdRequest.slug(this.slug);
            return customFieldsUpdateFieldByIdRequest;
        }

        /**
         * Execute updateFieldById request
         * @return CustomFieldsUpdateFieldByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public CustomFieldsUpdateFieldByIdResponse execute() throws ApiException {
            CustomFieldsUpdateFieldByIdRequest customFieldsUpdateFieldByIdRequest = buildBodyParams();
            ApiResponse<CustomFieldsUpdateFieldByIdResponse> localVarResp = updateFieldByIdWithHttpInfo(id, customFieldsUpdateFieldByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFieldById request with HTTP info returned
         * @return ApiResponse&lt;CustomFieldsUpdateFieldByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomFieldsUpdateFieldByIdResponse> executeWithHttpInfo() throws ApiException {
            CustomFieldsUpdateFieldByIdRequest customFieldsUpdateFieldByIdRequest = buildBodyParams();
            return updateFieldByIdWithHttpInfo(id, customFieldsUpdateFieldByIdRequest);
        }

        /**
         * Execute updateFieldById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomFieldsUpdateFieldByIdResponse> _callback) throws ApiException {
            CustomFieldsUpdateFieldByIdRequest customFieldsUpdateFieldByIdRequest = buildBodyParams();
            return updateFieldByIdAsync(id, customFieldsUpdateFieldByIdRequest, _callback);
        }
    }

    /**
     * Update a custom field
     * 
     * @param id Custom field ID (required)
     * @param customFieldsUpdateFieldByIdRequest Custom field object that needs to be updated (required)
     * @return UpdateFieldByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFieldByIdRequestBuilder updateFieldById(String name, UUID id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateFieldByIdRequestBuilder(name, id);
    }
}
