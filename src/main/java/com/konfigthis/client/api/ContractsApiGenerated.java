/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContractsCreateNewContractRequest;
import com.konfigthis.client.model.ContractsCreateNewContractResponse;
import com.konfigthis.client.model.ContractsDeleteContractResponse;
import com.konfigthis.client.model.ContractsGetByEmployeeIdResponse;
import com.konfigthis.client.model.ContractsGetCurrentContractByEmployeeIdResponse;
import com.konfigthis.client.model.ContractsUpdateContractRequest;
import com.konfigthis.client.model.ContractsUpdateContractResponse;
import java.time.LocalDate;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContractsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContractsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContractsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewContractCall(ContractsCreateNewContractRequest contractsCreateNewContractRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractsCreateNewContractRequest;

        // create path and map variables
        String localVarPath = "/contract/v1/contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewContractValidateBeforeCall(ContractsCreateNewContractRequest contractsCreateNewContractRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractsCreateNewContractRequest' is set
        if (contractsCreateNewContractRequest == null) {
            throw new ApiException("Missing the required parameter 'contractsCreateNewContractRequest' when calling createNewContract(Async)");
        }

        return createNewContractCall(contractsCreateNewContractRequest, _callback);

    }


    private ApiResponse<ContractsCreateNewContractResponse> createNewContractWithHttpInfo(ContractsCreateNewContractRequest contractsCreateNewContractRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewContractValidateBeforeCall(contractsCreateNewContractRequest, null);
        Type localVarReturnType = new TypeToken<ContractsCreateNewContractResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewContractAsync(ContractsCreateNewContractRequest contractsCreateNewContractRequest, final ApiCallback<ContractsCreateNewContractResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewContractValidateBeforeCall(contractsCreateNewContractRequest, _callback);
        Type localVarReturnType = new TypeToken<ContractsCreateNewContractResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewContractRequestBuilder {
        private final UUID employeeId;
        private final LocalDate startAt;
        private final String code;
        private LocalDate endAt;
        private String comment;

        private CreateNewContractRequestBuilder(UUID employeeId, LocalDate startAt, String code) {
            this.employeeId = employeeId;
            this.startAt = startAt;
            this.code = code;
        }

        /**
         * Set endAt
         * @param endAt end date of contract (optional)
         * @return CreateNewContractRequestBuilder
         */
        public CreateNewContractRequestBuilder endAt(LocalDate endAt) {
            this.endAt = endAt;
            return this;
        }
        
        /**
         * Set comment
         * @param comment Comments (optional)
         * @return CreateNewContractRequestBuilder
         */
        public CreateNewContractRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Build call for createNewContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractsCreateNewContractRequest contractsCreateNewContractRequest = buildBodyParams();
            return createNewContractCall(contractsCreateNewContractRequest, _callback);
        }

        private ContractsCreateNewContractRequest buildBodyParams() {
            ContractsCreateNewContractRequest contractsCreateNewContractRequest = new ContractsCreateNewContractRequest();
            contractsCreateNewContractRequest.employeeId(this.employeeId);
            contractsCreateNewContractRequest.startAt(this.startAt);
            contractsCreateNewContractRequest.endAt(this.endAt);
            contractsCreateNewContractRequest.code(this.code);
            contractsCreateNewContractRequest.comment(this.comment);
            return contractsCreateNewContractRequest;
        }

        /**
         * Execute createNewContract request
         * @return ContractsCreateNewContractResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ContractsCreateNewContractResponse execute() throws ApiException {
            ContractsCreateNewContractRequest contractsCreateNewContractRequest = buildBodyParams();
            ApiResponse<ContractsCreateNewContractResponse> localVarResp = createNewContractWithHttpInfo(contractsCreateNewContractRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewContract request with HTTP info returned
         * @return ApiResponse&lt;ContractsCreateNewContractResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractsCreateNewContractResponse> executeWithHttpInfo() throws ApiException {
            ContractsCreateNewContractRequest contractsCreateNewContractRequest = buildBodyParams();
            return createNewContractWithHttpInfo(contractsCreateNewContractRequest);
        }

        /**
         * Execute createNewContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractsCreateNewContractResponse> _callback) throws ApiException {
            ContractsCreateNewContractRequest contractsCreateNewContractRequest = buildBodyParams();
            return createNewContractAsync(contractsCreateNewContractRequest, _callback);
        }
    }

    /**
     * Create a contract
     * 
     * @param contractsCreateNewContractRequest Contract object that needs to be created (required)
     * @return CreateNewContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewContractRequestBuilder createNewContract(UUID employeeId, LocalDate startAt, String code) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (startAt == null) throw new IllegalArgumentException("\"startAt\" is required but got null");
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        return new CreateNewContractRequestBuilder(employeeId, startAt, code);
    }
    private okhttp3.Call deleteContractCall(UUID contractId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/v1/contracts/{contractId}"
            .replace("{" + "contractId" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContractValidateBeforeCall(UUID contractId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling deleteContract(Async)");
        }

        return deleteContractCall(contractId, _callback);

    }


    private ApiResponse<ContractsDeleteContractResponse> deleteContractWithHttpInfo(UUID contractId) throws ApiException {
        okhttp3.Call localVarCall = deleteContractValidateBeforeCall(contractId, null);
        Type localVarReturnType = new TypeToken<ContractsDeleteContractResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteContractAsync(UUID contractId, final ApiCallback<ContractsDeleteContractResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContractValidateBeforeCall(contractId, _callback);
        Type localVarReturnType = new TypeToken<ContractsDeleteContractResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteContractRequestBuilder {
        private final UUID contractId;

        private DeleteContractRequestBuilder(UUID contractId) {
            this.contractId = contractId;
        }

        /**
         * Build call for deleteContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteContractCall(contractId, _callback);
        }


        /**
         * Execute deleteContract request
         * @return ContractsDeleteContractResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ContractsDeleteContractResponse execute() throws ApiException {
            ApiResponse<ContractsDeleteContractResponse> localVarResp = deleteContractWithHttpInfo(contractId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteContract request with HTTP info returned
         * @return ApiResponse&lt;ContractsDeleteContractResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractsDeleteContractResponse> executeWithHttpInfo() throws ApiException {
            return deleteContractWithHttpInfo(contractId);
        }

        /**
         * Execute deleteContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractsDeleteContractResponse> _callback) throws ApiException {
            return deleteContractAsync(contractId, _callback);
        }
    }

    /**
     * Delete a contract
     * 
     * @param contractId Contract ID (required)
     * @return DeleteContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public DeleteContractRequestBuilder deleteContract(UUID contractId) throws IllegalArgumentException {
        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new DeleteContractRequestBuilder(contractId);
    }
    private okhttp3.Call getByEmployeeIdCall(UUID employeeId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/v1/contracts/{employeeId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdValidateBeforeCall(UUID employeeId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeId(Async)");
        }

        return getByEmployeeIdCall(employeeId, limit, page, _callback);

    }


    private ApiResponse<ContractsGetByEmployeeIdResponse> getByEmployeeIdWithHttpInfo(UUID employeeId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, limit, page, null);
        Type localVarReturnType = new TypeToken<ContractsGetByEmployeeIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdAsync(UUID employeeId, Integer limit, Integer page, final ApiCallback<ContractsGetByEmployeeIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<ContractsGetByEmployeeIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdRequestBuilder {
        private final UUID employeeId;
        private Integer limit;
        private Integer page;

        private GetByEmployeeIdRequestBuilder(UUID employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set limit
         * @param limit Limit results (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdCall(employeeId, limit, page, _callback);
        }


        /**
         * Execute getByEmployeeId request
         * @return ContractsGetByEmployeeIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ContractsGetByEmployeeIdResponse execute() throws ApiException {
            ApiResponse<ContractsGetByEmployeeIdResponse> localVarResp = getByEmployeeIdWithHttpInfo(employeeId, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;ContractsGetByEmployeeIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractsGetByEmployeeIdResponse> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdWithHttpInfo(employeeId, limit, page);
        }

        /**
         * Execute getByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractsGetByEmployeeIdResponse> _callback) throws ApiException {
            return getByEmployeeIdAsync(employeeId, limit, page, _callback);
        }
    }

    /**
     * Get contracts by employee
     * 
     * @param employeeId Employee ID (required)
     * @return GetByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Objects </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdRequestBuilder getByEmployeeId(UUID employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeIdRequestBuilder(employeeId);
    }
    private okhttp3.Call getCurrentContractByEmployeeIdCall(UUID employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contract/v1/contracts/{employeeId}/current-contract"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentContractByEmployeeIdValidateBeforeCall(UUID employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getCurrentContractByEmployeeId(Async)");
        }

        return getCurrentContractByEmployeeIdCall(employeeId, _callback);

    }


    private ApiResponse<ContractsGetCurrentContractByEmployeeIdResponse> getCurrentContractByEmployeeIdWithHttpInfo(UUID employeeId) throws ApiException {
        okhttp3.Call localVarCall = getCurrentContractByEmployeeIdValidateBeforeCall(employeeId, null);
        Type localVarReturnType = new TypeToken<ContractsGetCurrentContractByEmployeeIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentContractByEmployeeIdAsync(UUID employeeId, final ApiCallback<ContractsGetCurrentContractByEmployeeIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentContractByEmployeeIdValidateBeforeCall(employeeId, _callback);
        Type localVarReturnType = new TypeToken<ContractsGetCurrentContractByEmployeeIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentContractByEmployeeIdRequestBuilder {
        private final UUID employeeId;

        private GetCurrentContractByEmployeeIdRequestBuilder(UUID employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Build call for getCurrentContractByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentContractByEmployeeIdCall(employeeId, _callback);
        }


        /**
         * Execute getCurrentContractByEmployeeId request
         * @return ContractsGetCurrentContractByEmployeeIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ContractsGetCurrentContractByEmployeeIdResponse execute() throws ApiException {
            ApiResponse<ContractsGetCurrentContractByEmployeeIdResponse> localVarResp = getCurrentContractByEmployeeIdWithHttpInfo(employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentContractByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;ContractsGetCurrentContractByEmployeeIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractsGetCurrentContractByEmployeeIdResponse> executeWithHttpInfo() throws ApiException {
            return getCurrentContractByEmployeeIdWithHttpInfo(employeeId);
        }

        /**
         * Execute getCurrentContractByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractsGetCurrentContractByEmployeeIdResponse> _callback) throws ApiException {
            return getCurrentContractByEmployeeIdAsync(employeeId, _callback);
        }
    }

    /**
     * Get current contract by employeeId
     * 
     * @param employeeId Employee ID (required)
     * @return GetCurrentContractByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentContractByEmployeeIdRequestBuilder getCurrentContractByEmployeeId(UUID employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetCurrentContractByEmployeeIdRequestBuilder(employeeId);
    }
    private okhttp3.Call updateContractCall(UUID contractId, ContractsUpdateContractRequest contractsUpdateContractRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contractsUpdateContractRequest;

        // create path and map variables
        String localVarPath = "/contract/v1/contracts/{contractId}"
            .replace("{" + "contractId" + "}", localVarApiClient.escapeString(contractId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContractValidateBeforeCall(UUID contractId, ContractsUpdateContractRequest contractsUpdateContractRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractId' is set
        if (contractId == null) {
            throw new ApiException("Missing the required parameter 'contractId' when calling updateContract(Async)");
        }

        // verify the required parameter 'contractsUpdateContractRequest' is set
        if (contractsUpdateContractRequest == null) {
            throw new ApiException("Missing the required parameter 'contractsUpdateContractRequest' when calling updateContract(Async)");
        }

        return updateContractCall(contractId, contractsUpdateContractRequest, _callback);

    }


    private ApiResponse<ContractsUpdateContractResponse> updateContractWithHttpInfo(UUID contractId, ContractsUpdateContractRequest contractsUpdateContractRequest) throws ApiException {
        okhttp3.Call localVarCall = updateContractValidateBeforeCall(contractId, contractsUpdateContractRequest, null);
        Type localVarReturnType = new TypeToken<ContractsUpdateContractResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateContractAsync(UUID contractId, ContractsUpdateContractRequest contractsUpdateContractRequest, final ApiCallback<ContractsUpdateContractResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContractValidateBeforeCall(contractId, contractsUpdateContractRequest, _callback);
        Type localVarReturnType = new TypeToken<ContractsUpdateContractResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateContractRequestBuilder {
        private final LocalDate startAt;
        private final String code;
        private final UUID contractId;
        private LocalDate endAt;
        private String comment;

        private UpdateContractRequestBuilder(LocalDate startAt, String code, UUID contractId) {
            this.startAt = startAt;
            this.code = code;
            this.contractId = contractId;
        }

        /**
         * Set endAt
         * @param endAt end date of contract (optional)
         * @return UpdateContractRequestBuilder
         */
        public UpdateContractRequestBuilder endAt(LocalDate endAt) {
            this.endAt = endAt;
            return this;
        }
        
        /**
         * Set comment
         * @param comment Comments (optional)
         * @return UpdateContractRequestBuilder
         */
        public UpdateContractRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Build call for updateContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContractsUpdateContractRequest contractsUpdateContractRequest = buildBodyParams();
            return updateContractCall(contractId, contractsUpdateContractRequest, _callback);
        }

        private ContractsUpdateContractRequest buildBodyParams() {
            ContractsUpdateContractRequest contractsUpdateContractRequest = new ContractsUpdateContractRequest();
            contractsUpdateContractRequest.startAt(this.startAt);
            contractsUpdateContractRequest.endAt(this.endAt);
            contractsUpdateContractRequest.code(this.code);
            contractsUpdateContractRequest.comment(this.comment);
            return contractsUpdateContractRequest;
        }

        /**
         * Execute updateContract request
         * @return ContractsUpdateContractResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ContractsUpdateContractResponse execute() throws ApiException {
            ContractsUpdateContractRequest contractsUpdateContractRequest = buildBodyParams();
            ApiResponse<ContractsUpdateContractResponse> localVarResp = updateContractWithHttpInfo(contractId, contractsUpdateContractRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateContract request with HTTP info returned
         * @return ApiResponse&lt;ContractsUpdateContractResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContractsUpdateContractResponse> executeWithHttpInfo() throws ApiException {
            ContractsUpdateContractRequest contractsUpdateContractRequest = buildBodyParams();
            return updateContractWithHttpInfo(contractId, contractsUpdateContractRequest);
        }

        /**
         * Execute updateContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContractsUpdateContractResponse> _callback) throws ApiException {
            ContractsUpdateContractRequest contractsUpdateContractRequest = buildBodyParams();
            return updateContractAsync(contractId, contractsUpdateContractRequest, _callback);
        }
    }

    /**
     * Update a contract
     * 
     * @param contractId Contract ID (required)
     * @param contractsUpdateContractRequest Contract object that needs to be updated (required)
     * @return UpdateContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContractRequestBuilder updateContract(LocalDate startAt, String code, UUID contractId) throws IllegalArgumentException {
        if (startAt == null) throw new IllegalArgumentException("\"startAt\" is required but got null");
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        if (contractId == null) throw new IllegalArgumentException("\"contractId\" is required but got null");
            

        return new UpdateContractRequestBuilder(startAt, code, contractId);
    }
}
