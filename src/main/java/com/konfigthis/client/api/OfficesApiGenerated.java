/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OfficesCreateOfficeRequest;
import com.konfigthis.client.model.OfficesCreateOfficeRequestCoordinates;
import com.konfigthis.client.model.OfficesCreateOfficeResponse;
import com.konfigthis.client.model.OfficesGetAllResponse;
import com.konfigthis.client.model.OfficesRemoveByIdResponse;
import com.konfigthis.client.model.OfficesUpdateByIdRequest;
import com.konfigthis.client.model.OfficesUpdateByIdResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OfficesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OfficesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OfficesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOfficeCall(OfficesCreateOfficeRequest officesCreateOfficeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = officesCreateOfficeRequest;

        // create path and map variables
        String localVarPath = "/core/v3/offices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOfficeValidateBeforeCall(OfficesCreateOfficeRequest officesCreateOfficeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'officesCreateOfficeRequest' is set
        if (officesCreateOfficeRequest == null) {
            throw new ApiException("Missing the required parameter 'officesCreateOfficeRequest' when calling createOffice(Async)");
        }

        return createOfficeCall(officesCreateOfficeRequest, _callback);

    }


    private ApiResponse<OfficesCreateOfficeResponse> createOfficeWithHttpInfo(OfficesCreateOfficeRequest officesCreateOfficeRequest) throws ApiException {
        okhttp3.Call localVarCall = createOfficeValidateBeforeCall(officesCreateOfficeRequest, null);
        Type localVarReturnType = new TypeToken<OfficesCreateOfficeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOfficeAsync(OfficesCreateOfficeRequest officesCreateOfficeRequest, final ApiCallback<OfficesCreateOfficeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOfficeValidateBeforeCall(officesCreateOfficeRequest, _callback);
        Type localVarReturnType = new TypeToken<OfficesCreateOfficeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOfficeRequestBuilder {
        private final UUID companyId;
        private final String name;
        private String description;
        private String address;
        private OfficesCreateOfficeRequestCoordinates coordinates;
        private Integer radio;

        private CreateOfficeRequestBuilder(UUID companyId, String name) {
            this.companyId = companyId;
            this.name = name;
        }

        /**
         * Set description
         * @param description The description of the office (optional)
         * @return CreateOfficeRequestBuilder
         */
        public CreateOfficeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set address
         * @param address The address of the office (optional)
         * @return CreateOfficeRequestBuilder
         */
        public CreateOfficeRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set coordinates
         * @param coordinates  (optional)
         * @return CreateOfficeRequestBuilder
         */
        public CreateOfficeRequestBuilder coordinates(OfficesCreateOfficeRequestCoordinates coordinates) {
            this.coordinates = coordinates;
            return this;
        }
        
        /**
         * Set radio
         * @param radio The radio of the office (optional)
         * @return CreateOfficeRequestBuilder
         */
        public CreateOfficeRequestBuilder radio(Integer radio) {
            this.radio = radio;
            return this;
        }
        
        /**
         * Build call for createOffice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OfficesCreateOfficeRequest officesCreateOfficeRequest = buildBodyParams();
            return createOfficeCall(officesCreateOfficeRequest, _callback);
        }

        private OfficesCreateOfficeRequest buildBodyParams() {
            OfficesCreateOfficeRequest officesCreateOfficeRequest = new OfficesCreateOfficeRequest();
            officesCreateOfficeRequest.description(this.description);
            officesCreateOfficeRequest.companyId(this.companyId);
            officesCreateOfficeRequest.name(this.name);
            officesCreateOfficeRequest.address(this.address);
            officesCreateOfficeRequest.coordinates(this.coordinates);
            officesCreateOfficeRequest.radio(this.radio);
            return officesCreateOfficeRequest;
        }

        /**
         * Execute createOffice request
         * @return OfficesCreateOfficeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public OfficesCreateOfficeResponse execute() throws ApiException {
            OfficesCreateOfficeRequest officesCreateOfficeRequest = buildBodyParams();
            ApiResponse<OfficesCreateOfficeResponse> localVarResp = createOfficeWithHttpInfo(officesCreateOfficeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOffice request with HTTP info returned
         * @return ApiResponse&lt;OfficesCreateOfficeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficesCreateOfficeResponse> executeWithHttpInfo() throws ApiException {
            OfficesCreateOfficeRequest officesCreateOfficeRequest = buildBodyParams();
            return createOfficeWithHttpInfo(officesCreateOfficeRequest);
        }

        /**
         * Execute createOffice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficesCreateOfficeResponse> _callback) throws ApiException {
            OfficesCreateOfficeRequest officesCreateOfficeRequest = buildBodyParams();
            return createOfficeAsync(officesCreateOfficeRequest, _callback);
        }
    }

    /**
     * Create a office
     * 
     * @param officesCreateOfficeRequest Office object that needs to be created (required)
     * @return CreateOfficeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public CreateOfficeRequestBuilder createOffice(UUID companyId, String name) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateOfficeRequestBuilder(companyId, name);
    }
    private okhttp3.Call getAllCall(String name, Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v3/offices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String name, Integer limit, Integer page, String orderBy, final ApiCallback _callback) throws ApiException {
        return getAllCall(name, limit, page, orderBy, _callback);

    }


    private ApiResponse<OfficesGetAllResponse> getAllWithHttpInfo(String name, Integer limit, Integer page, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(name, limit, page, orderBy, null);
        Type localVarReturnType = new TypeToken<OfficesGetAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String name, Integer limit, Integer page, String orderBy, final ApiCallback<OfficesGetAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(name, limit, page, orderBy, _callback);
        Type localVarReturnType = new TypeToken<OfficesGetAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private String name;
        private Integer limit;
        private Integer page;
        private String orderBy;

        private GetAllRequestBuilder() {
        }

        /**
         * Set name
         * @param name Find office by name (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit offices (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set orderBy
         * @param orderBy field1 asc, field2 desc (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder orderBy(String orderBy) {
            this.orderBy = orderBy;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(name, limit, page, orderBy, _callback);
        }


        /**
         * Execute getAll request
         * @return OfficesGetAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public OfficesGetAllResponse execute() throws ApiException {
            ApiResponse<OfficesGetAllResponse> localVarResp = getAllWithHttpInfo(name, limit, page, orderBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;OfficesGetAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficesGetAllResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(name, limit, page, orderBy);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficesGetAllResponse> _callback) throws ApiException {
            return getAllAsync(name, limit, page, orderBy, _callback);
        }
    }

    /**
     * List offices
     * 
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of objects </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call removeByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v3/offices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeById(Async)");
        }

        return removeByIdCall(id, _callback);

    }


    private ApiResponse<OfficesRemoveByIdResponse> removeByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OfficesRemoveByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeByIdAsync(UUID id, final ApiCallback<OfficesRemoveByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OfficesRemoveByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final UUID id;

        private RemoveByIdRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(id, _callback);
        }


        /**
         * Execute removeById request
         * @return OfficesRemoveByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public OfficesRemoveByIdResponse execute() throws ApiException {
            ApiResponse<OfficesRemoveByIdResponse> localVarResp = removeByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;OfficesRemoveByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficesRemoveByIdResponse> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(id);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficesRemoveByIdResponse> _callback) throws ApiException {
            return removeByIdAsync(id, _callback);
        }
    }

    /**
     * Delete an office
     * 
     * @param id Office ID (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveByIdRequestBuilder(id);
    }
    private okhttp3.Call updateByIdCall(UUID id, OfficesUpdateByIdRequest officesUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = officesUpdateByIdRequest;

        // create path and map variables
        String localVarPath = "/core/v3/offices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(UUID id, OfficesUpdateByIdRequest officesUpdateByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        // verify the required parameter 'officesUpdateByIdRequest' is set
        if (officesUpdateByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'officesUpdateByIdRequest' when calling updateById(Async)");
        }

        return updateByIdCall(id, officesUpdateByIdRequest, _callback);

    }


    private ApiResponse<OfficesUpdateByIdResponse> updateByIdWithHttpInfo(UUID id, OfficesUpdateByIdRequest officesUpdateByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, officesUpdateByIdRequest, null);
        Type localVarReturnType = new TypeToken<OfficesUpdateByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(UUID id, OfficesUpdateByIdRequest officesUpdateByIdRequest, final ApiCallback<OfficesUpdateByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, officesUpdateByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<OfficesUpdateByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String name;
        private final UUID id;
        private String description;
        private String address;
        private OfficesCreateOfficeRequestCoordinates coordinates;
        private Integer radio;

        private UpdateByIdRequestBuilder(String name, UUID id) {
            this.name = name;
            this.id = id;
        }

        /**
         * Set description
         * @param description The description of the office (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set address
         * @param address The address of the office (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder address(String address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set coordinates
         * @param coordinates  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder coordinates(OfficesCreateOfficeRequestCoordinates coordinates) {
            this.coordinates = coordinates;
            return this;
        }
        
        /**
         * Set radio
         * @param radio The radio of the office (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder radio(Integer radio) {
            this.radio = radio;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OfficesUpdateByIdRequest officesUpdateByIdRequest = buildBodyParams();
            return updateByIdCall(id, officesUpdateByIdRequest, _callback);
        }

        private OfficesUpdateByIdRequest buildBodyParams() {
            OfficesUpdateByIdRequest officesUpdateByIdRequest = new OfficesUpdateByIdRequest();
            officesUpdateByIdRequest.description(this.description);
            officesUpdateByIdRequest.name(this.name);
            officesUpdateByIdRequest.address(this.address);
            officesUpdateByIdRequest.coordinates(this.coordinates);
            officesUpdateByIdRequest.radio(this.radio);
            return officesUpdateByIdRequest;
        }

        /**
         * Execute updateById request
         * @return OfficesUpdateByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public OfficesUpdateByIdResponse execute() throws ApiException {
            OfficesUpdateByIdRequest officesUpdateByIdRequest = buildBodyParams();
            ApiResponse<OfficesUpdateByIdResponse> localVarResp = updateByIdWithHttpInfo(id, officesUpdateByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;OfficesUpdateByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OfficesUpdateByIdResponse> executeWithHttpInfo() throws ApiException {
            OfficesUpdateByIdRequest officesUpdateByIdRequest = buildBodyParams();
            return updateByIdWithHttpInfo(id, officesUpdateByIdRequest);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OfficesUpdateByIdResponse> _callback) throws ApiException {
            OfficesUpdateByIdRequest officesUpdateByIdRequest = buildBodyParams();
            return updateByIdAsync(id, officesUpdateByIdRequest, _callback);
        }
    }

    /**
     * Update an office
     * 
     * @param id Office ID (required)
     * @param officesUpdateByIdRequest Office object that needs to be updated (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String name, UUID id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateByIdRequestBuilder(name, id);
    }
}
