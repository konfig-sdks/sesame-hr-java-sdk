/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeAssignationsRolesAssignRoleRequest;
import com.konfigthis.client.model.EmployeeAssignationsRolesAssignRoleResponse;
import com.konfigthis.client.model.EmployeeAssignationsRolesListByEmployeeResponse;
import com.konfigthis.client.model.EmployeeAssignationsRolesUnassignRoleRequest;
import com.konfigthis.client.model.EmployeeAssignationsRolesUnassignRoleResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeAssignationsRolesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeAssignationsRolesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeAssignationsRolesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignRoleCall(EmployeeAssignationsRolesAssignRoleRequest employeeAssignationsRolesAssignRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeAssignationsRolesAssignRoleRequest;

        // create path and map variables
        String localVarPath = "/core/v3/roles/assignation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignRoleValidateBeforeCall(EmployeeAssignationsRolesAssignRoleRequest employeeAssignationsRolesAssignRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeAssignationsRolesAssignRoleRequest' is set
        if (employeeAssignationsRolesAssignRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'employeeAssignationsRolesAssignRoleRequest' when calling assignRole(Async)");
        }

        return assignRoleCall(employeeAssignationsRolesAssignRoleRequest, _callback);

    }


    private ApiResponse<EmployeeAssignationsRolesAssignRoleResponse> assignRoleWithHttpInfo(EmployeeAssignationsRolesAssignRoleRequest employeeAssignationsRolesAssignRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = assignRoleValidateBeforeCall(employeeAssignationsRolesAssignRoleRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeAssignationsRolesAssignRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignRoleAsync(EmployeeAssignationsRolesAssignRoleRequest employeeAssignationsRolesAssignRoleRequest, final ApiCallback<EmployeeAssignationsRolesAssignRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignRoleValidateBeforeCall(employeeAssignationsRolesAssignRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeAssignationsRolesAssignRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignRoleRequestBuilder {
        private final UUID roleId;
        private final UUID employeeId;
        private final UUID entityAffectedId;

        private AssignRoleRequestBuilder(UUID roleId, UUID employeeId, UUID entityAffectedId) {
            this.roleId = roleId;
            this.employeeId = employeeId;
            this.entityAffectedId = entityAffectedId;
        }

        /**
         * Build call for assignRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeAssignationsRolesAssignRoleRequest employeeAssignationsRolesAssignRoleRequest = buildBodyParams();
            return assignRoleCall(employeeAssignationsRolesAssignRoleRequest, _callback);
        }

        private EmployeeAssignationsRolesAssignRoleRequest buildBodyParams() {
            EmployeeAssignationsRolesAssignRoleRequest employeeAssignationsRolesAssignRoleRequest = new EmployeeAssignationsRolesAssignRoleRequest();
            employeeAssignationsRolesAssignRoleRequest.roleId(this.roleId);
            employeeAssignationsRolesAssignRoleRequest.employeeId(this.employeeId);
            employeeAssignationsRolesAssignRoleRequest.entityAffectedId(this.entityAffectedId);
            return employeeAssignationsRolesAssignRoleRequest;
        }

        /**
         * Execute assignRole request
         * @return EmployeeAssignationsRolesAssignRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeAssignationsRolesAssignRoleResponse execute() throws ApiException {
            EmployeeAssignationsRolesAssignRoleRequest employeeAssignationsRolesAssignRoleRequest = buildBodyParams();
            ApiResponse<EmployeeAssignationsRolesAssignRoleResponse> localVarResp = assignRoleWithHttpInfo(employeeAssignationsRolesAssignRoleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignRole request with HTTP info returned
         * @return ApiResponse&lt;EmployeeAssignationsRolesAssignRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeAssignationsRolesAssignRoleResponse> executeWithHttpInfo() throws ApiException {
            EmployeeAssignationsRolesAssignRoleRequest employeeAssignationsRolesAssignRoleRequest = buildBodyParams();
            return assignRoleWithHttpInfo(employeeAssignationsRolesAssignRoleRequest);
        }

        /**
         * Execute assignRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeAssignationsRolesAssignRoleResponse> _callback) throws ApiException {
            EmployeeAssignationsRolesAssignRoleRequest employeeAssignationsRolesAssignRoleRequest = buildBodyParams();
            return assignRoleAsync(employeeAssignationsRolesAssignRoleRequest, _callback);
        }
    }

    /**
     * Assign Role
     * 
     * @param employeeAssignationsRolesAssignRoleRequest Assign object (required)
     * @return AssignRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public AssignRoleRequestBuilder assignRole(UUID roleId, UUID employeeId, UUID entityAffectedId) throws IllegalArgumentException {
        if (roleId == null) throw new IllegalArgumentException("\"roleId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (entityAffectedId == null) throw new IllegalArgumentException("\"entityAffectedId\" is required but got null");
            

        return new AssignRoleRequestBuilder(roleId, employeeId, entityAffectedId);
    }
    private okhttp3.Call listByEmployeeCall(UUID employeeId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/core/v3/roles/assignation/{employeeId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByEmployeeValidateBeforeCall(UUID employeeId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listByEmployee(Async)");
        }

        return listByEmployeeCall(employeeId, limit, page, _callback);

    }


    private ApiResponse<EmployeeAssignationsRolesListByEmployeeResponse> listByEmployeeWithHttpInfo(UUID employeeId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listByEmployeeValidateBeforeCall(employeeId, limit, page, null);
        Type localVarReturnType = new TypeToken<EmployeeAssignationsRolesListByEmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByEmployeeAsync(UUID employeeId, Integer limit, Integer page, final ApiCallback<EmployeeAssignationsRolesListByEmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByEmployeeValidateBeforeCall(employeeId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<EmployeeAssignationsRolesListByEmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByEmployeeRequestBuilder {
        private final UUID employeeId;
        private Integer limit;
        private Integer page;

        private ListByEmployeeRequestBuilder(UUID employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set limit
         * @param limit Limit departments (optional)
         * @return ListByEmployeeRequestBuilder
         */
        public ListByEmployeeRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Request a specific page (optional)
         * @return ListByEmployeeRequestBuilder
         */
        public ListByEmployeeRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listByEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assigned Roles by Employee </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByEmployeeCall(employeeId, limit, page, _callback);
        }


        /**
         * Execute listByEmployee request
         * @return EmployeeAssignationsRolesListByEmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assigned Roles by Employee </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeAssignationsRolesListByEmployeeResponse execute() throws ApiException {
            ApiResponse<EmployeeAssignationsRolesListByEmployeeResponse> localVarResp = listByEmployeeWithHttpInfo(employeeId, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeeAssignationsRolesListByEmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assigned Roles by Employee </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeAssignationsRolesListByEmployeeResponse> executeWithHttpInfo() throws ApiException {
            return listByEmployeeWithHttpInfo(employeeId, limit, page);
        }

        /**
         * Execute listByEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Assigned Roles by Employee </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeAssignationsRolesListByEmployeeResponse> _callback) throws ApiException {
            return listByEmployeeAsync(employeeId, limit, page, _callback);
        }
    }

    /**
     * List Assignations Roles by Employee
     * 
     * @param employeeId Employee Id (required)
     * @return ListByEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Assigned Roles by Employee </td><td>  -  </td></tr>
     </table>
     */
    public ListByEmployeeRequestBuilder listByEmployee(UUID employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListByEmployeeRequestBuilder(employeeId);
    }
    private okhttp3.Call unassignRoleCall(EmployeeAssignationsRolesUnassignRoleRequest employeeAssignationsRolesUnassignRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeAssignationsRolesUnassignRoleRequest;

        // create path and map variables
        String localVarPath = "/core/v3/roles/assignation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignRoleValidateBeforeCall(EmployeeAssignationsRolesUnassignRoleRequest employeeAssignationsRolesUnassignRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeAssignationsRolesUnassignRoleRequest' is set
        if (employeeAssignationsRolesUnassignRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'employeeAssignationsRolesUnassignRoleRequest' when calling unassignRole(Async)");
        }

        return unassignRoleCall(employeeAssignationsRolesUnassignRoleRequest, _callback);

    }


    private ApiResponse<EmployeeAssignationsRolesUnassignRoleResponse> unassignRoleWithHttpInfo(EmployeeAssignationsRolesUnassignRoleRequest employeeAssignationsRolesUnassignRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = unassignRoleValidateBeforeCall(employeeAssignationsRolesUnassignRoleRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeAssignationsRolesUnassignRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unassignRoleAsync(EmployeeAssignationsRolesUnassignRoleRequest employeeAssignationsRolesUnassignRoleRequest, final ApiCallback<EmployeeAssignationsRolesUnassignRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignRoleValidateBeforeCall(employeeAssignationsRolesUnassignRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeAssignationsRolesUnassignRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnassignRoleRequestBuilder {
        private final UUID assignationId;

        private UnassignRoleRequestBuilder(UUID assignationId) {
            this.assignationId = assignationId;
        }

        /**
         * Build call for unassignRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeAssignationsRolesUnassignRoleRequest employeeAssignationsRolesUnassignRoleRequest = buildBodyParams();
            return unassignRoleCall(employeeAssignationsRolesUnassignRoleRequest, _callback);
        }

        private EmployeeAssignationsRolesUnassignRoleRequest buildBodyParams() {
            EmployeeAssignationsRolesUnassignRoleRequest employeeAssignationsRolesUnassignRoleRequest = new EmployeeAssignationsRolesUnassignRoleRequest();
            employeeAssignationsRolesUnassignRoleRequest.assignationId(this.assignationId);
            return employeeAssignationsRolesUnassignRoleRequest;
        }

        /**
         * Execute unassignRole request
         * @return EmployeeAssignationsRolesUnassignRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeAssignationsRolesUnassignRoleResponse execute() throws ApiException {
            EmployeeAssignationsRolesUnassignRoleRequest employeeAssignationsRolesUnassignRoleRequest = buildBodyParams();
            ApiResponse<EmployeeAssignationsRolesUnassignRoleResponse> localVarResp = unassignRoleWithHttpInfo(employeeAssignationsRolesUnassignRoleRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unassignRole request with HTTP info returned
         * @return ApiResponse&lt;EmployeeAssignationsRolesUnassignRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeAssignationsRolesUnassignRoleResponse> executeWithHttpInfo() throws ApiException {
            EmployeeAssignationsRolesUnassignRoleRequest employeeAssignationsRolesUnassignRoleRequest = buildBodyParams();
            return unassignRoleWithHttpInfo(employeeAssignationsRolesUnassignRoleRequest);
        }

        /**
         * Execute unassignRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeAssignationsRolesUnassignRoleResponse> _callback) throws ApiException {
            EmployeeAssignationsRolesUnassignRoleRequest employeeAssignationsRolesUnassignRoleRequest = buildBodyParams();
            return unassignRoleAsync(employeeAssignationsRolesUnassignRoleRequest, _callback);
        }
    }

    /**
     * Unassign Role
     * 
     * @param employeeAssignationsRolesUnassignRoleRequest Unassign object (required)
     * @return UnassignRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Object </td><td>  -  </td></tr>
     </table>
     */
    public UnassignRoleRequestBuilder unassignRole(UUID assignationId) throws IllegalArgumentException {
        if (assignationId == null) throw new IllegalArgumentException("\"assignationId\" is required but got null");
            

        return new UnassignRoleRequestBuilder(assignationId);
    }
}
