/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AbsenceCalendarsCreateCalendarRequest;
import com.konfigthis.client.model.AbsenceCalendarsCreateCalendarRequestDaysOffInner;
import com.konfigthis.client.model.AbsenceCalendarsCreateCalendarResponse;
import com.konfigthis.client.model.AbsenceCalendarsListResponse;
import com.konfigthis.client.model.AbsenceCalendarsUpdateByIdRequest;
import com.konfigthis.client.model.AbsenceCalendarsUpdateByIdRequestDaysOffInner;
import com.konfigthis.client.model.AbsenceCalendarsUpdateByIdResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AbsenceCalendarsApi
 */
@Disabled
public class AbsenceCalendarsApiTest {

    private static AbsenceCalendarsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AbsenceCalendarsApi(apiClient);
    }

    /**
     * Create Absence Calendar
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCalendarTest() throws ApiException {
        UUID employeeId = null;
        UUID absenceTypeId = null;
        Integer year = null;
        List<AbsenceCalendarsCreateCalendarRequestDaysOffInner> daysOff = null;
        AbsenceCalendarsCreateCalendarResponse response = api.createCalendar(employeeId, absenceTypeId, year, daysOff)
                .execute();
        // TODO: test validations
    }

    /**
     * List Absence Calendars
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        UUID employeeId = null;
        UUID type = null;
        List<Integer> yearIn = null;
        Integer limit = null;
        Integer page = null;
        AbsenceCalendarsListResponse response = api.list()
                .employeeId(employeeId)
                .type(type)
                .yearIn(yearIn)
                .limit(limit)
                .page(page)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Absence Calendar
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByIdTest() throws ApiException {
        List<AbsenceCalendarsUpdateByIdRequestDaysOffInner> daysOff = null;
        UUID id = null;
        AbsenceCalendarsUpdateByIdResponse response = api.updateById(daysOff, id)
                .execute();
        // TODO: test validations
    }

}
