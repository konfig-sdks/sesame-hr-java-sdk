/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.io.File;
import com.konfigthis.client.model.RecruitmentCreateCandidateRequest;
import com.konfigthis.client.model.RecruitmentCreateCandidateResponse;
import com.konfigthis.client.model.RecruitmentGetCandidateByIdResponse;
import com.konfigthis.client.model.RecruitmentGetCandidateStatusListResponse;
import com.konfigthis.client.model.RecruitmentGetVacancyResponse;
import com.konfigthis.client.model.RecruitmentListVacanciesResponse;
import com.konfigthis.client.model.RecruitmentUpdateCandidateRequest;
import com.konfigthis.client.model.RecruitmentUpdateCandidateResponse;
import com.konfigthis.client.model.RecruitmentUploadCandidateDocumentRequest;
import com.konfigthis.client.model.RecruitmentUploadCandidateDocumentResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecruitmentApi
 */
@Disabled
public class RecruitmentApiTest {

    private static RecruitmentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new RecruitmentApi(apiClient);
    }

    /**
     * Create a candidate
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCandidateTest() throws ApiException {
        String firstName = null;
        String lastName = null;
        String email = null;
        String phone = null;
        UUID vacancyId = null;
        String linkedinURL = null;
        String desiredSalary = null;
        String startWorkDate = null;
        String web = null;
        String location = null;
        UUID statusId = null;
        RecruitmentCreateCandidateResponse response = api.createCandidate(firstName, lastName, email, phone, vacancyId)
                .linkedinURL(linkedinURL)
                .desiredSalary(desiredSalary)
                .startWorkDate(startWorkDate)
                .web(web)
                .location(location)
                .statusId(statusId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a candidate
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCandidateByIdTest() throws ApiException {
        UUID id = null;
        RecruitmentGetCandidateByIdResponse response = api.getCandidateById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get candidate status list
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCandidateStatusListTest() throws ApiException {
        UUID vacancyId = null;
        RecruitmentGetCandidateStatusListResponse response = api.getCandidateStatusList(vacancyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a vacancy
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVacancyTest() throws ApiException {
        UUID id = null;
        RecruitmentGetVacancyResponse response = api.getVacancy(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get vacancies list
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVacanciesTest() throws ApiException {
        RecruitmentListVacanciesResponse response = api.listVacancies()
                .execute();
        // TODO: test validations
    }

    /**
     * Update a candidate
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCandidateTest() throws ApiException {
        String firstName = null;
        String lastName = null;
        String email = null;
        String phone = null;
        UUID vacancyId = null;
        UUID id = null;
        String linkedinURL = null;
        String desiredSalary = null;
        String startWorkDate = null;
        String web = null;
        String location = null;
        UUID statusId = null;
        RecruitmentUpdateCandidateResponse response = api.updateCandidate(firstName, lastName, email, phone, vacancyId, id)
                .linkedinURL(linkedinURL)
                .desiredSalary(desiredSalary)
                .startWorkDate(startWorkDate)
                .web(web)
                .location(location)
                .statusId(statusId)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload candidate document
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadCandidateDocumentTest() throws ApiException {
        UUID id = null;
        File document = null;
        RecruitmentUploadCandidateDocumentResponse response = api.uploadCandidateDocument(id, document)
                .execute();
        // TODO: test validations
    }

}
