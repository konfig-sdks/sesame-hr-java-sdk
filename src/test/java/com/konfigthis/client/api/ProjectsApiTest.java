/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.LocalDate;
import com.konfigthis.client.model.ProjectsCreateProjectRequest;
import com.konfigthis.client.model.ProjectsCreateProjectResponse;
import com.konfigthis.client.model.ProjectsListResponse;
import com.konfigthis.client.model.ProjectsRemoveByIdResponse;
import com.konfigthis.client.model.ProjectsUpdateProjectByIdRequest;
import com.konfigthis.client.model.ProjectsUpdateProjectByIdResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private static ProjectsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProjectsApi(apiClient);
    }

    /**
     * Create a project
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        UUID companyId = null;
        String name = null;
        String description = null;
        UUID parentProjectId = null;
        UUID customerId = null;
        Float price = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        UUID managerId = null;
        String status = null;
        ProjectsCreateProjectResponse response = api.createProject(companyId, name)
                .description(description)
                .parentProjectId(parentProjectId)
                .customerId(customerId)
                .price(price)
                .startDate(startDate)
                .endDate(endDate)
                .managerId(managerId)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * List projects
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        UUID id = null;
        Integer page = null;
        Integer limit = null;
        String orderBy = null;
        ProjectsListResponse response = api.list(id)
                .page(page)
                .limit(limit)
                .orderBy(orderBy)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a project
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        UUID id = null;
        ProjectsRemoveByIdResponse response = api.removeById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a project
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectByIdTest() throws ApiException {
        String name = null;
        UUID id = null;
        String description = null;
        UUID parentProjectId = null;
        UUID customerId = null;
        Float price = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        UUID managerId = null;
        String status = null;
        ProjectsUpdateProjectByIdResponse response = api.updateProjectById(name, id)
                .description(description)
                .parentProjectId(parentProjectId)
                .customerId(customerId)
                .price(price)
                .startDate(startDate)
                .endDate(endDate)
                .managerId(managerId)
                .status(status)
                .execute();
        // TODO: test validations
    }

}
