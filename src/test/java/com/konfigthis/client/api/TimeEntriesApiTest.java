/*
 * Sesame Public API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.LocalDate;
import com.konfigthis.client.model.TimeEntriesCreateNewEntryRequest;
import com.konfigthis.client.model.TimeEntriesCreateNewEntryRequestTimeEntryIn;
import com.konfigthis.client.model.TimeEntriesCreateNewEntryRequestTimeEntryOut;
import com.konfigthis.client.model.TimeEntriesCreateNewEntryResponse;
import com.konfigthis.client.model.TimeEntriesDeleteByIdResponse;
import com.konfigthis.client.model.TimeEntriesListResponse;
import com.konfigthis.client.model.TimeEntriesStartEntryRequest;
import com.konfigthis.client.model.TimeEntriesStartEntryResponse;
import com.konfigthis.client.model.TimeEntriesStopTimeEntryOutRequest;
import com.konfigthis.client.model.TimeEntriesStopTimeEntryOutRequestCoordinates;
import com.konfigthis.client.model.TimeEntriesStopTimeEntryOutResponse;
import com.konfigthis.client.model.TimeEntriesUpdateEntryRequest;
import com.konfigthis.client.model.TimeEntriesUpdateEntryRequestTimeEntryIn;
import com.konfigthis.client.model.TimeEntriesUpdateEntryRequestTimeEntryOut;
import com.konfigthis.client.model.TimeEntriesUpdateEntryResponse;
import java.util.UUID;
import com.konfigthis.client.model.WorkEntriesStartNewEntryRequestWorkEntryInCoordinates;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeEntriesApi
 */
@Disabled
public class TimeEntriesApiTest {

    private static TimeEntriesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimeEntriesApi(apiClient);
    }

    /**
     * Create Time Entry
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewEntryTest() throws ApiException {
        UUID employeeId = null;
        TimeEntriesCreateNewEntryRequestTimeEntryIn timeEntryIn = null;
        UUID projectId = null;
        List<UUID> tagIds = null;
        String comment = null;
        TimeEntriesCreateNewEntryRequestTimeEntryOut timeEntryOut = null;
        TimeEntriesCreateNewEntryResponse response = api.createNewEntry(employeeId, timeEntryIn)
                .projectId(projectId)
                .tagIds(tagIds)
                .comment(comment)
                .timeEntryOut(timeEntryOut)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Time Entry
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        UUID id = null;
        TimeEntriesDeleteByIdResponse response = api.deleteById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List Time Entries
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        UUID employeeId = null;
        LocalDate from = null;
        LocalDate to = null;
        String employeeStatus = null;
        Integer limit = null;
        Integer page = null;
        TimeEntriesListResponse response = api.list()
                .employeeId(employeeId)
                .from(from)
                .to(to)
                .employeeStatus(employeeStatus)
                .limit(limit)
                .page(page)
                .execute();
        // TODO: test validations
    }

    /**
     * Time Entry In
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startEntryTest() throws ApiException {
        UUID employeeId = null;
        UUID projectId = null;
        List<UUID> tagIds = null;
        String comment = null;
        WorkEntriesStartNewEntryRequestWorkEntryInCoordinates coordinates = null;
        TimeEntriesStartEntryResponse response = api.startEntry(employeeId)
                .projectId(projectId)
                .tagIds(tagIds)
                .comment(comment)
                .coordinates(coordinates)
                .execute();
        // TODO: test validations
    }

    /**
     * Time Entry Out
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopTimeEntryOutTest() throws ApiException {
        TimeEntriesStopTimeEntryOutRequestCoordinates coordinates = null;
        TimeEntriesStopTimeEntryOutResponse response = api.stopTimeEntryOut()
                .coordinates(coordinates)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Time Entry
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEntryTest() throws ApiException {
        TimeEntriesUpdateEntryRequestTimeEntryIn timeEntryIn = null;
        UUID id = null;
        UUID projectId = null;
        List<UUID> tagIds = null;
        String comment = null;
        TimeEntriesUpdateEntryRequestTimeEntryOut timeEntryOut = null;
        TimeEntriesUpdateEntryResponse response = api.updateEntry(timeEntryIn, id)
                .projectId(projectId)
                .tagIds(tagIds)
                .comment(comment)
                .timeEntryOut(timeEntryOut)
                .execute();
        // TODO: test validations
    }

}
